#!/usr/bin/env python3
"""
Pre-commit Hook Setup for Documentation Quality

This script sets up a git pre-commit hook that automatically runs
documentation quality checks before each commit.

Usage:
    python tools/setup_pre_commit_hook.py
    python tools/setup_pre_commit_hook.py --install    # Install the hook
    python tools/setup_pre_commit_hook.py --uninstall  # Remove the hook
"""

import os
import sys
import argparse
from pathlib import Path

PRE_COMMIT_HOOK_CONTENT = '''#!/bin/bash
#
# Pre-commit hook for documentation quality checks
# Auto-generated by tools/setup_pre_commit_hook.py
#

echo "üîç Running documentation quality checks..."

# Change to repository root
cd "$(git rev-parse --show-toplevel)"

# Check if documentation files were modified
docs_modified=$(git diff --cached --name-only | grep -E "(docs_src/.*\.md|mkdocs\.yml)" | wc -l)

if [ "$docs_modified" -gt 0 ]; then
    echo "üìù Documentation files modified, running quality checks..."
    
    # Check if Python is available
    if ! command -v python3 &> /dev/null; then
        echo "‚ùå Python3 not found. Please install Python to run documentation checks."
        exit 1
    fi
    
    # Check if documentation quality checker exists
    if [ ! -f "tools/check_docs_quality.py" ]; then
        echo "‚ö†Ô∏è  Documentation quality checker not found. Skipping checks."
        exit 0
    fi
    
    # Run the documentation quality checker
    python3 tools/check_docs_quality.py --fix-minor
    
    if [ $? -ne 0 ]; then
        echo ""
        echo "‚ùå Documentation quality checks failed!"
        echo "   Please fix the issues above before committing."
        echo "   You can run 'python tools/check_docs_quality.py --verbose' for more details."
        echo ""
        exit 1
    fi
    
    # Check if any files were auto-fixed and need to be staged
    auto_fixed=$(git diff --name-only | grep -E "docs_src/.*\.md" | wc -l)
    if [ "$auto_fixed" -gt 0 ]; then
        echo "üîß Auto-fixes applied to documentation files."
        echo "   Please review and stage the fixes with 'git add docs_src/'"
        echo "   Then re-run the commit."
        exit 1
    fi
    
    echo "‚úÖ Documentation quality checks passed!"
else
    echo "üìÑ No documentation files modified, skipping checks."
fi

exit 0
'''

def install_hook(repo_root: Path) -> bool:
    """Install the pre-commit hook"""
    hooks_dir = repo_root / '.git' / 'hooks'
    if not hooks_dir.exists():
        print("‚ùå .git/hooks directory not found. Is this a git repository?")
        return False
        
    hook_path = hooks_dir / 'pre-commit'
    
    # Backup existing hook if it exists
    if hook_path.exists():
        backup_path = hooks_dir / 'pre-commit.backup'
        print(f"üì¶ Backing up existing pre-commit hook to {backup_path}")
        hook_path.rename(backup_path)
        
    # Write new hook
    hook_path.write_text(PRE_COMMIT_HOOK_CONTENT)
    hook_path.chmod(0o755)  # Make executable
    
    print(f"‚úÖ Pre-commit hook installed at {hook_path}")
    print("   The hook will run documentation quality checks before each commit.")
    return True

def uninstall_hook(repo_root: Path) -> bool:
    """Uninstall the pre-commit hook"""
    hooks_dir = repo_root / '.git' / 'hooks'
    hook_path = hooks_dir / 'pre-commit'
    backup_path = hooks_dir / 'pre-commit.backup'
    
    if not hook_path.exists():
        print("‚ÑπÔ∏è  No pre-commit hook found.")
        return True
        
    # Check if this is our hook
    content = hook_path.read_text()
    if "tools/setup_pre_commit_hook.py" not in content:
        print("‚ö†Ô∏è  Pre-commit hook exists but wasn't created by this script.")
        print("   Please remove it manually if needed.")
        return False
        
    # Remove our hook
    hook_path.unlink()
    print("üóëÔ∏è  Pre-commit hook removed.")
    
    # Restore backup if it exists
    if backup_path.exists():
        backup_path.rename(hook_path)
        print(f"üì¶ Restored backup pre-commit hook from {backup_path}")
        
    return True

def check_hook_status(repo_root: Path):
    """Check the current hook status"""
    hooks_dir = repo_root / '.git' / 'hooks'
    hook_path = hooks_dir / 'pre-commit'
    
    print("Pre-commit Hook Status")
    print("=" * 25)
    
    if not hook_path.exists():
        print("‚ùå No pre-commit hook installed")
        return
        
    content = hook_path.read_text()
    if "tools/setup_pre_commit_hook.py" in content:
        print("‚úÖ Documentation quality pre-commit hook is installed")
        
        # Check if documentation checker exists
        checker_path = repo_root / 'tools' / 'check_docs_quality.py'
        if checker_path.exists():
            print("‚úÖ Documentation quality checker is available")
        else:
            print("‚ö†Ô∏è  Documentation quality checker not found")
    else:
        print("‚ÑπÔ∏è  Different pre-commit hook is installed")
        
def create_sample_pre_commit_config(repo_root: Path):
    """Create a sample .pre-commit-config.yaml for pre-commit framework"""
    config_path = repo_root / '.pre-commit-config.yaml'
    
    config_content = '''# Pre-commit configuration for AI Agent TDD-Scrum Workflow
# Install with: pip install pre-commit && pre-commit install
# Run manually: pre-commit run --all-files

repos:
  # Documentation quality checks
  - repo: local
    hooks:
      - id: docs-quality
        name: Documentation Quality Check
        entry: python tools/check_docs_quality.py --fix-minor
        language: python
        files: ^docs_src/.*\.md$|^mkdocs\.yml$
        pass_filenames: false
        
  # YAML validation
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: check-yaml
        files: \.(yaml|yml)$
        
  # Markdown formatting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint-fix
        files: ^docs_src/.*\.md$
        args: ['--config', '.markdownlint.json']
        
  # General file checks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
        files: ^docs_src/.*\.md$
      - id: end-of-file-fixer
        files: ^docs_src/.*\.md$
      - id: check-merge-conflict
'''
    
    if not config_path.exists():
        config_path.write_text(config_content)
        print(f"üìù Created sample pre-commit configuration at {config_path}")
        print("   To use the pre-commit framework:")
        print("   1. pip install pre-commit")
        print("   2. pre-commit install")
        print("   3. Customize .pre-commit-config.yaml as needed")
    else:
        print(f"‚ÑπÔ∏è  Pre-commit configuration already exists at {config_path}")

def main():
    parser = argparse.ArgumentParser(description='Setup pre-commit hook for documentation quality')
    parser.add_argument('--install', action='store_true', 
                       help='Install the pre-commit hook')
    parser.add_argument('--uninstall', action='store_true', 
                       help='Uninstall the pre-commit hook')
    parser.add_argument('--status', action='store_true', 
                       help='Check hook status')
    parser.add_argument('--create-config', action='store_true',
                       help='Create sample .pre-commit-config.yaml')
    
    args = parser.parse_args()
    
    repo_root = Path(__file__).parent.parent
    
    if args.install:
        success = install_hook(repo_root)
        sys.exit(0 if success else 1)
    elif args.uninstall:
        success = uninstall_hook(repo_root)
        sys.exit(0 if success else 1)
    elif args.status:
        check_hook_status(repo_root)
    elif args.create_config:
        create_sample_pre_commit_config(repo_root)
    else:
        # Default: show status and installation instructions
        check_hook_status(repo_root)
        print("\nTo install the pre-commit hook:")
        print("  python tools/setup_pre_commit_hook.py --install")
        print("\nTo use the pre-commit framework instead:")
        print("  python tools/setup_pre_commit_hook.py --create-config")

if __name__ == "__main__":
    main()