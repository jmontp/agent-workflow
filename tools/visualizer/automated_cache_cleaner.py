#!/usr/bin/env python3
"""
Automated Cache Cleaner for Browser Issues
Generated by Resource Loading Analyzer
"""

import os
import sys
import subprocess
import platform
from pathlib import Path

def clear_chrome_cache():
    """Clear Chrome cache for localhost"""
    system = platform.system()
    
    if system == "Windows":
        cache_paths = [
            os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data\Default\Cache"),
            os.path.expandvars(r"%LOCALAPPDATA%\Google\Chrome\User Data\Default\Code Cache"),
        ]
    elif system == "Linux":
        cache_paths = [
            os.path.expanduser("~/.cache/google-chrome/Default/Cache"),
            os.path.expanduser("~/.config/google-chrome/Default/Cache"),
        ]
    elif system == "Darwin":  # macOS
        cache_paths = [
            os.path.expanduser("~/Library/Caches/Google/Chrome/Default/Cache"),
        ]
    else:
        print(f"Unsupported system: {system}")
        return False
        
    for cache_path in cache_paths:
        if os.path.exists(cache_path):
            try:
                import shutil
                shutil.rmtree(cache_path)
                print(f"‚úÖ Cleared: {cache_path}")
            except Exception as e:
                print(f"‚ùå Failed to clear {cache_path}: {e}")
                
    return True

def launch_browser_with_cache_disabled():
    """Launch browser with cache disabled"""
    system = platform.system()
    
    if system == "Windows":
        chrome_paths = [
            r"C:\Program Files\Google\Chrome\Application\chrome.exe",
            r"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
        ]
    elif system == "Linux":
        chrome_paths = [
            "/usr/bin/google-chrome",
            "/usr/bin/google-chrome-stable",
            "/usr/bin/chromium-browser",
        ]
    elif system == "Darwin":
        chrome_paths = [
            "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome",
        ]
    else:
        print(f"Unsupported system: {system}")
        return False
        
    chrome_exe = None
    for path in chrome_paths:
        if os.path.exists(path):
            chrome_exe = path
            break
            
    if not chrome_exe:
        print("‚ùå Chrome not found")
        return False
        
    args = [
        chrome_exe,
        "--disable-cache",
        "--disable-application-cache", 
        "--disable-offline-load-stale-cache",
        "--disk-cache-size=0",
        "--media-cache-size=0",
        "--aggressive-cache-discard",
        "http://localhost:5000"
    ]
    
    try:
        subprocess.Popen(args)
        print("‚úÖ Chrome launched with cache disabled")
        return True
    except Exception as e:
        print(f"‚ùå Failed to launch Chrome: {e}")
        return False

if __name__ == "__main__":
    print("üßπ Automated Cache Cleaner")
    print("=" * 40)
    
    # Step 1: Clear cache
    print("üìç Clearing browser cache...")
    clear_chrome_cache()
    
    # Step 2: Launch browser
    print("üìç Launching browser with cache disabled...")
    launch_browser_with_cache_disabled()
    
    print("‚úÖ Done! Check if the interface now works correctly.")
