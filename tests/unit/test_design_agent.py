"""
Unit tests for Design Agent.

Tests the AI agent specialized in system design, architecture decisions,
and TDD specification creation.
"""

import pytest
import asyncio
import tempfile
import shutil
import json
from pathlib import Path
from unittest.mock import Mock, patch, AsyncMock

import sys
sys.path.append(str(Path(__file__).parent.parent.parent))

from lib.agents.design_agent import DesignAgent
from lib.agents import Task, AgentResult, TDDState
from lib.agent_tool_config import AgentType


class TestDesignAgent:
    """Test the DesignAgent class."""
    
    @pytest.fixture
    def mock_claude_client(self):
        """Create a mock Claude client."""
        mock_client = Mock()
        mock_client.create_architecture = AsyncMock(return_value="# System Architecture\n\nGenerated by Claude")
        mock_client.analyze_code = AsyncMock(return_value="Code analysis complete")
        mock_client.generate_specification = AsyncMock(return_value="# TDD Specification\n\nDetailed spec")
        return mock_client
    
    @pytest.fixture
    def mock_context_manager(self):
        """Create a mock context manager."""
        mock_context = Mock()
        mock_context.prepare_context = AsyncMock(return_value=Mock(
            request_id="test-123",
            file_contents={"README.md": "Project documentation"},
            context_summary="Test context"
        ))
        mock_context.record_feedback = AsyncMock()
        mock_context.record_agent_decision = AsyncMock()
        mock_context.get_project_statistics = AsyncMock(return_value={
            "total_files": 50,
            "primary_language": "python",
            "complexity_metrics": {"cyclomatic": 2.5}
        })
        return mock_context
    
    @pytest.fixture
    def design_agent(self, mock_claude_client):
        """Create a DesignAgent for testing."""
        return DesignAgent(claude_code_client=mock_claude_client)
    
    @pytest.fixture
    def design_agent_with_context(self, mock_claude_client, mock_context_manager):
        """Create a DesignAgent with context manager for testing."""
        return DesignAgent(claude_code_client=mock_claude_client, context_manager=mock_context_manager)
    
    def test_design_agent_init(self, design_agent, mock_claude_client):
        """Test DesignAgent initialization."""
        assert design_agent.name == "DesignAgent"
        assert design_agent.claude_client == mock_claude_client
        assert design_agent.context_manager is None
        
        # Check capabilities
        expected_capabilities = [
            "system_architecture",
            "component_design", 
            "interface_definition",
            "design_review",
            "pattern_identification",
            "technical_specification",
            "tdd_specification",
            "acceptance_criteria",
            "test_scenarios",
            "api_contracts",
            "testable_design"
        ]
        
        for capability in expected_capabilities:
            assert capability in design_agent.capabilities

    def test_design_agent_init_with_context(self, design_agent_with_context, mock_context_manager):
        """Test DesignAgent initialization with context manager."""
        assert design_agent_with_context.context_manager == mock_context_manager

    @pytest.mark.asyncio
    async def test_create_architecture_dry_run(self, design_agent):
        """Test architecture creation in dry run mode."""
        task = Task(
            id="test-1",
            agent_type="DesignAgent",
            command="create system architecture",
            context={
                "requirements": "Microservices architecture for e-commerce platform"
            }
        )
        
        result = await design_agent.run(task, dry_run=True)
        
        assert result.success
        assert "[DRY RUN]" in result.output
        assert "microservices architecture" in result.output.lower()
        assert "architecture.md" in result.artifacts
        assert "[Generated design]" in result.artifacts["architecture.md"]

    @pytest.mark.asyncio
    async def test_create_architecture_with_claude(self, design_agent, mock_claude_client):
        """Test architecture creation using Claude client."""
        mock_claude_client.create_architecture.return_value = "# Microservices Architecture\n\nDetailed design..."
        
        task = Task(
            id="test-2",
            agent_type="DesignAgent",
            command="design architecture for payment system",
            context={
                "requirements": "Secure payment processing with high availability"
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "Microservices Architecture" in result.output
        assert "architecture.md" in result.artifacts
        assert "component-diagram.mermaid" in result.artifacts
        mock_claude_client.create_architecture.assert_called_once()

    @pytest.mark.asyncio
    async def test_create_architecture_fallback(self, design_agent, mock_claude_client):
        """Test architecture creation fallback when Claude is unavailable."""
        mock_claude_client.create_architecture.side_effect = Exception("Claude unavailable")
        
        task = Task(
            id="test-3",
            agent_type="DesignAgent",
            command="architecture for user management",
            context={
                "requirements": "User registration and authentication system"
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "System Architecture" in result.output
        assert "User registration and authentication system" in result.output
        assert "architecture.md" in result.artifacts
        assert "component-diagram.mermaid" in result.artifacts

    @pytest.mark.asyncio
    async def test_review_design_dry_run(self, design_agent):
        """Test design review in dry run mode."""
        task = Task(
            id="test-4",
            agent_type="DesignAgent",
            command="review system design",
            context={
                "design": "class UserService:\n    def create_user(self): pass"
            }
        )
        
        result = await design_agent.run(task, dry_run=True)
        
        assert result.success
        assert "[DRY RUN]" in result.output
        assert "class UserService:" in result.output

    @pytest.mark.asyncio
    async def test_review_design_with_claude(self, design_agent, mock_claude_client):
        """Test design review using Claude client."""
        mock_claude_client.analyze_code.return_value = "Design review: Good separation of concerns"
        
        task = Task(
            id="test-5",
            agent_type="DesignAgent",
            command="review api design",
            context={
                "design": "def process_payment(amount, card): return True"
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "Good separation of concerns" in result.output
        assert "design-review.md" in result.artifacts
        mock_claude_client.analyze_code.assert_called_once()

    @pytest.mark.asyncio
    async def test_review_design_fallback(self, design_agent, mock_claude_client):
        """Test design review fallback when Claude is unavailable."""
        mock_claude_client.analyze_code.side_effect = Exception("Claude unavailable")
        
        task = Task(
            id="test-6",
            agent_type="DesignAgent",
            command="review design quality",
            context={
                "design": "def example_function(): return 'test'"
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "Design Review" in result.output
        assert "Quality Score: 7/10" in result.output
        assert "design-review.md" in result.artifacts

    @pytest.mark.asyncio
    async def test_define_interfaces(self, design_agent):
        """Test interface definition."""
        task = Task(
            id="test-7",
            agent_type="DesignAgent",
            command="define component interfaces",
            context={
                "components": ["UserService", "PaymentService", "NotificationService"]
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "UserService, PaymentService, NotificationService" in result.output
        assert "interfaces.md" in result.artifacts
        
        # Check interface content
        interface_content = result.artifacts["interfaces.md"]
        assert "Component Interfaces" in interface_content
        assert "API Contracts" in interface_content
        assert "Integration Points" in interface_content

    @pytest.mark.asyncio
    async def test_create_specification(self, design_agent):
        """Test technical specification creation."""
        task = Task(
            id="test-8",
            agent_type="DesignAgent",
            command="create technical specification",
            context={
                "feature": "Real-time chat system"
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "Real-time chat system" in result.output
        assert "technical-spec.md" in result.artifacts
        
        # Check spec content
        spec_content = result.artifacts["technical-spec.md"]
        assert "Technical Specification: Real-time chat system" in spec_content
        assert "Functional Requirements" in spec_content
        assert "Implementation Details" in spec_content

    @pytest.mark.asyncio
    async def test_create_tdd_specification_dry_run(self, design_agent):
        """Test TDD specification creation in dry run mode."""
        task = Task(
            id="test-9",
            agent_type="DesignAgent",
            command="tdd_specification",
            context={
                "story": {
                    "description": "As a user, I want to register an account so I can access the system"
                }
            }
        )
        
        result = await design_agent.run(task, dry_run=True)
        
        assert result.success
        assert "[DRY RUN]" in result.output
        assert "tdd-spec.md" in result.artifacts
        assert "[Generated TDD specification]" in result.artifacts["tdd-spec.md"]

    @pytest.mark.asyncio
    async def test_create_tdd_specification_with_claude(self, design_agent, mock_claude_client):
        """Test TDD specification creation using Claude client."""
        mock_claude_client.generate_specification.return_value = "# TDD Specification\n\nDetailed testable requirements"
        
        task = Task(
            id="test-10",
            agent_type="DesignAgent",
            command="tdd_spec for user login",
            context={
                "story": {
                    "description": "User authentication with email and password"
                }
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "Detailed testable requirements" in result.output
        assert "tdd-specification.md" in result.artifacts
        assert "acceptance-criteria.md" in result.artifacts
        assert "test-plan.md" in result.artifacts
        mock_claude_client.generate_specification.assert_called_once()

    @pytest.mark.asyncio
    async def test_create_tdd_specification_fallback(self, design_agent, mock_claude_client):
        """Test TDD specification creation fallback when Claude is unavailable."""
        mock_claude_client.generate_specification.side_effect = Exception("Claude unavailable")
        
        task = Task(
            id="test-11",
            agent_type="DesignAgent",
            command="tdd_specification",
            context={
                "story": {
                    "description": "Shopping cart management functionality"
                }
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "TDD Specification" in result.output
        assert "Shopping cart management functionality" in result.output
        assert "tdd-specification.md" in result.artifacts

    @pytest.mark.asyncio
    async def test_define_acceptance_criteria(self, design_agent):
        """Test acceptance criteria definition."""
        task = Task(
            id="test-12",
            agent_type="DesignAgent",
            command="acceptance_criteria",
            context={
                "story": {
                    "description": "Password reset functionality for users"
                }
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "Password reset functionality" in result.output
        assert "acceptance-criteria.md" in result.artifacts
        
        # Check acceptance criteria content
        criteria_content = result.artifacts["acceptance-criteria.md"]
        assert "Acceptance Criteria" in criteria_content
        assert "Given-When-Then" in criteria_content
        assert "Definition of Done" in criteria_content

    @pytest.mark.asyncio
    async def test_design_test_scenarios(self, design_agent):
        """Test test scenarios design."""
        task = Task(
            id="test-13",
            agent_type="DesignAgent",
            command="test_scenarios",
            context={
                "story": {
                    "description": "File upload with validation"
                },
                "acceptance_criteria": ["Valid files should upload", "Invalid files rejected"]
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "File upload with validation" in result.output
        assert "test-scenarios.md" in result.artifacts
        assert "edge-cases.md" in result.artifacts
        
        # Check scenarios content
        scenarios_content = result.artifacts["test-scenarios.md"]
        assert "Test Scenarios" in scenarios_content
        assert "Functional Tests" in scenarios_content
        assert "Edge Cases" in scenarios_content
        assert "Performance Tests" in scenarios_content

    @pytest.mark.asyncio
    async def test_create_api_contracts(self, design_agent):
        """Test API contracts creation."""
        task = Task(
            id="test-14",
            agent_type="DesignAgent",
            command="api_contracts",
            context={
                "story": {
                    "description": "RESTful API for product management"
                }
            }
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "RESTful API for product management" in result.output
        assert "api-contracts.md" in result.artifacts
        assert "interface-definitions.json" in result.artifacts
        
        # Check contracts content
        contracts_content = result.artifacts["api-contracts.md"]
        assert "API Contracts" in contracts_content
        assert "REST API Design" in contracts_content
        assert "Data Models" in contracts_content
        assert "Service Layer Contracts" in contracts_content

    @pytest.mark.asyncio
    async def test_execute_tdd_phase_design(self, design_agent):
        """Test executing TDD DESIGN phase."""
        context = {
            "story": {
                "description": "User profile management system"
            },
            "task_description": "Create user profile CRUD operations"
        }
        
        result = await design_agent.execute_tdd_phase(TDDState.DESIGN, context)
        
        assert result.success
        assert "TDD Design Phase Complete" in result.output
        assert "Ready for TEST_RED Phase" in result.output
        assert "tdd-specification.md" in result.artifacts
        assert "acceptance-criteria.md" in result.artifacts
        assert "test-scenarios.md" in result.artifacts
        assert "api-contracts.md" in result.artifacts

    @pytest.mark.asyncio
    async def test_execute_tdd_phase_invalid(self, design_agent):
        """Test executing invalid TDD phase."""
        context = {"story": {"description": "test"}}
        
        result = await design_agent.execute_tdd_phase(TDDState.TEST_RED, context)
        
        assert not result.success
        assert "can only execute DESIGN phase" in result.error

    @pytest.mark.asyncio
    async def test_general_design_task(self, design_agent):
        """Test handling of general design tasks."""
        task = Task(
            id="test-15",
            agent_type="DesignAgent",
            command="custom design operation",
            context={}
        )
        
        result = await design_agent.run(task, dry_run=False)
        
        assert result.success
        assert "DesignAgent executed: custom design operation" in result.output

    @pytest.mark.asyncio
    async def test_error_handling(self, design_agent):
        """Test error handling during task execution."""
        task = Task(
            id="test-16",
            agent_type="DesignAgent",
            command="create architecture",
            context={"requirements": "test"}
        )
        
        with patch.object(design_agent, '_create_architecture', side_effect=Exception("Test error")):
            result = await design_agent.run(task, dry_run=False)
            
            assert not result.success
            assert "Test error" in result.error
            assert result.execution_time > 0

    @pytest.mark.asyncio
    async def test_context_manager_integration(self, design_agent_with_context, mock_context_manager):
        """Test integration with context manager."""
        task = Task(
            id="test-17",
            agent_type="DesignAgent",
            command="create architecture",
            context={"requirements": "User management system"}
        )
        task.story_id = "USER-123"
        
        result = await design_agent_with_context.run(task, dry_run=False)
        
        assert result.success
        mock_context_manager.prepare_context.assert_called_once()
        mock_context_manager.record_feedback.assert_called_once()
        mock_context_manager.record_agent_decision.assert_called_once()

    @pytest.mark.asyncio
    async def test_context_manager_failure(self, design_agent_with_context, mock_context_manager):
        """Test handling context manager failures."""
        mock_context_manager.prepare_context.side_effect = Exception("Context error")
        
        task = Task(
            id="test-18",
            agent_type="DesignAgent",
            command="create architecture",
            context={"requirements": "Test system"}
        )
        
        result = await design_agent_with_context.run(task, dry_run=False)
        
        # Should still succeed despite context manager failure
        assert result.success

    # Test helper methods
    
    def test_generate_architecture_design(self, design_agent):
        """Test architecture design generation."""
        requirements = "Scalable web application with microservices"
        design = design_agent._generate_architecture_design(requirements)
        
        assert isinstance(design, str)
        assert "System Architecture" in design
        assert requirements in design
        assert "Components" in design
        assert "Technology Stack" in design
        assert "Design Patterns" in design
        assert "Security Considerations" in design

    def test_generate_component_diagram(self, design_agent):
        """Test component diagram generation."""
        diagram = design_agent._generate_component_diagram()
        
        assert isinstance(diagram, str)
        assert "graph TB" in diagram
        assert "API Gateway" in diagram
        assert "-->" in diagram

    def test_analyze_design_quality(self, design_agent):
        """Test design quality analysis."""
        design_content = "class Service:\n    def process(self): pass"
        analysis = design_agent._analyze_design_quality(design_content)
        
        assert isinstance(analysis, str)
        assert "Design Review" in analysis
        assert "Recommendations" in analysis
        assert "Quality Score: 7/10" in analysis

    def test_create_interface_definitions(self, design_agent):
        """Test interface definitions creation."""
        components = ["UserService", "PaymentService", "EmailService"]
        interfaces = design_agent._create_interface_definitions(components)
        
        assert isinstance(interfaces, str)
        assert "Component Interfaces" in interfaces
        assert "UserService, PaymentService, EmailService" in interfaces
        assert "API Contracts" in interfaces
        assert "Integration Points" in interfaces

    def test_generate_technical_spec(self, design_agent):
        """Test technical specification generation."""
        feature = "Real-time messaging system"
        spec = design_agent._generate_technical_spec(feature)
        
        assert isinstance(spec, str)
        assert f"Technical Specification: {feature}" in spec
        assert "Functional Requirements" in spec
        assert "Non-Functional Requirements" in spec
        assert "Testing Strategy" in spec
        assert "Deployment Plan" in spec

    def test_generate_tdd_spec_fallback(self, design_agent):
        """Test TDD specification fallback generation."""
        story_description = "User authentication with OAuth"
        spec = design_agent._generate_tdd_spec_fallback(story_description)
        
        assert isinstance(spec, str)
        assert "TDD Specification" in spec
        assert story_description in spec
        assert "Testable Requirements" in spec
        assert "API Interface Design" in spec
        assert "Test-First Considerations" in spec
        assert "Edge Cases and Boundary Conditions" in spec

    def test_generate_acceptance_criteria(self, design_agent):
        """Test acceptance criteria generation."""
        story_description = "User can reset password via email"
        criteria = design_agent._generate_acceptance_criteria(story_description)
        
        assert isinstance(criteria, str)
        assert "Acceptance Criteria" in criteria
        assert story_description in criteria
        assert "Given-When-Then" in criteria
        assert "Scenario 1: Happy Path" in criteria
        assert "Definition of Done" in criteria

    def test_generate_test_scenarios(self, design_agent):
        """Test test scenarios generation."""
        story_description = "File upload with virus scanning"
        acceptance_criteria = "Files should be scanned before storage"
        scenarios = design_agent._generate_test_scenarios(story_description, acceptance_criteria)
        
        assert isinstance(scenarios, str)
        assert "Test Scenarios" in scenarios
        assert story_description in scenarios
        assert "Functional Tests" in scenarios
        assert "Integration Tests" in scenarios
        assert "Edge Cases" in scenarios
        assert "Performance Tests" in scenarios
        assert "Security Tests" in scenarios

    def test_generate_api_contracts(self, design_agent):
        """Test API contracts generation."""
        story_description = "Product catalog REST API"
        contracts = design_agent._generate_api_contracts(story_description)
        
        assert isinstance(contracts, str)
        assert "API Contracts" in contracts
        assert story_description in contracts
        assert "REST API Design" in contracts
        assert "Data Models" in contracts
        assert "Service Layer Contracts" in contracts
        assert "Error Handling Contracts" in contracts

    def test_extract_acceptance_criteria(self, design_agent):
        """Test acceptance criteria extraction."""
        specification = """
        # TDD Specification
        
        ## Acceptance Criteria
        - Criterion 1: User can login
        - Criterion 2: Invalid credentials rejected
        
        ## Other Section
        Content here
        """
        
        criteria = design_agent._extract_acceptance_criteria(specification)
        
        assert isinstance(criteria, str)
        assert "Acceptance Criteria" in criteria
        assert "User can login" in criteria
        assert "Other Section" not in criteria

    def test_extract_acceptance_criteria_no_section(self, design_agent):
        """Test acceptance criteria extraction when no section exists."""
        specification = "# Simple Spec\n\nNo acceptance criteria section."
        
        criteria = design_agent._extract_acceptance_criteria(specification)
        
        assert isinstance(criteria, str)
        assert "To be extracted" in criteria

    def test_extract_test_plan(self, design_agent):
        """Test test plan extraction."""
        specification = "Any specification content"
        
        plan = design_agent._extract_test_plan(specification)
        
        assert isinstance(plan, str)
        assert "Test Plan" in plan
        assert "Test Strategy" in plan
        assert "RED Phase" in plan
        assert "GREEN Phase" in plan
        assert "REFACTOR Phase" in plan

    def test_extract_edge_cases(self, design_agent):
        """Test edge cases extraction."""
        scenarios = "Test scenarios content"
        
        edge_cases = design_agent._extract_edge_cases(scenarios)
        
        assert isinstance(edge_cases, str)
        assert "Edge Cases" in edge_cases
        assert "Empty Data Sets" in edge_cases
        assert "Boundary Values" in edge_cases
        assert "Concurrent Access" in edge_cases

    def test_extract_interfaces(self, design_agent):
        """Test interface definitions extraction."""
        contracts = "API contracts content"
        
        interfaces = design_agent._extract_interfaces(contracts)
        
        assert isinstance(interfaces, str)
        # Should be valid JSON
        interface_data = json.loads(interfaces)
        assert "interfaces" in interface_data
        assert "models" in interface_data
        assert len(interface_data["interfaces"]) > 0

    def test_analyze_file_relevance(self, design_agent):
        """Test file relevance analysis."""
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={})
        
        # Mock agent context
        mock_context = Mock()
        mock_context.file_contents = {
            "README.md": "Documentation",
            "architecture.md": "Architecture docs",
            "src/main.py": "Implementation",
            "tests/test_main.py": "Tests",
            "config.yaml": "Configuration"
        }
        
        relevance = design_agent._analyze_file_relevance(task, mock_context)
        
        assert isinstance(relevance, dict)
        assert "README.md" in relevance
        assert "architecture.md" in relevance
        assert "src/main.py" in relevance
        assert "tests/test_main.py" in relevance
        assert "config.yaml" in relevance
        
        # Check relevance scores
        assert relevance["README.md"] == 0.9  # Documentation
        assert relevance["architecture.md"] == 0.8  # Architecture-related
        assert relevance["src/main.py"] == 0.6  # Implementation
        assert relevance["tests/test_main.py"] == 0.4  # Tests
        assert relevance["config.yaml"] == 0.9  # Configuration

    def test_analyze_file_relevance_empty_context(self, design_agent):
        """Test file relevance analysis with empty context."""
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={})
        
        relevance = design_agent._analyze_file_relevance(task, None)
        
        assert relevance == {}

    @pytest.mark.asyncio
    async def test_record_context_usage(self, design_agent_with_context, mock_context_manager):
        """Test context usage recording."""
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={})
        task.story_id = "STORY-123"
        
        mock_context = Mock()
        mock_context.request_id = "req-123"
        mock_context.file_contents = {"README.md": "content"}
        
        await design_agent_with_context._record_context_usage(task, mock_context)
        
        mock_context_manager.record_feedback.assert_called_once()
        mock_context_manager.record_agent_decision.assert_called_once()

    @pytest.mark.asyncio
    async def test_record_context_usage_error(self, design_agent_with_context, mock_context_manager):
        """Test context usage recording with error."""
        mock_context_manager.record_feedback.side_effect = Exception("Recording error")
        
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={})
        mock_context = Mock()
        mock_context.file_contents = {}
        
        # Should not raise exception
        await design_agent_with_context._record_context_usage(task, mock_context)

    @pytest.mark.asyncio
    async def test_enrich_context_for_design(self, design_agent_with_context, mock_context_manager):
        """Test context enrichment for design tasks."""
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={"existing": "data"})
        task.story_id = "STORY-456"
        
        mock_context = Mock()
        mock_context.file_contents = {
            "architecture/design.md": "Architecture documentation",
            "src/main.py": "Implementation code"
        }
        
        enriched = await design_agent_with_context._enrich_context_for_design(task, mock_context)
        
        assert isinstance(enriched, dict)
        assert "existing" in enriched
        assert enriched["existing"] == "data"
        assert "existing_architecture" in enriched
        assert "project_context" in enriched
        
        # Check project context
        project_ctx = enriched["project_context"]
        assert "file_count" in project_ctx
        assert "main_language" in project_ctx
        assert "complexity_indicators" in project_ctx

    @pytest.mark.asyncio
    async def test_enrich_context_no_context_manager(self, design_agent):
        """Test context enrichment without context manager."""
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={"test": "data"})
        
        enriched = await design_agent._enrich_context_for_design(task, None)
        
        assert enriched == {"test": "data"}

    @pytest.mark.asyncio
    async def test_enrich_context_with_error(self, design_agent_with_context, mock_context_manager):
        """Test context enrichment with error."""
        mock_context_manager.get_project_statistics.side_effect = Exception("Stats error")
        
        task = Task(id="test", agent_type="DesignAgent", command="architecture", context={})
        mock_context = Mock()
        mock_context.file_contents = {}
        
        enriched = await design_agent_with_context._enrich_context_for_design(task, mock_context)
        
        assert isinstance(enriched, dict)