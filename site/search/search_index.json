{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Agent TDD-Scrum Workflow","text":"<p>A sophisticated Human-In-The-Loop (HITL) orchestration framework that coordinates multiple specialized AI agents through a Discord interface, following a research-mode Scrum methodology optimized for solo engineers working with AI assistance.</p>"},{"location":"#overview","title":"\ud83c\udfaf Overview","text":"<p>This system implements a complete workflow for AI-assisted software development with proper human oversight and control. It combines the best practices of Test-Driven Development (TDD) and Scrum methodology, adapted for modern AI-assisted development scenarios.</p> <p></p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83e\udd16 Multi-Agent Coordination: Specialized AI agents for design, coding, testing, and data analysis</li> <li>\ud83c\udfae Discord Integration: Complete HITL interface with slash commands and interactive UI</li> <li>\ud83d\udd04 State Machine: Enforced workflow states preventing invalid operations</li> <li>\ud83c\udfd7\ufe0f Multi-Project Support: Simultaneous orchestration across multiple projects</li> <li>\ud83d\udee1\ufe0f Human Oversight: Approval gates for strategic decisions with escalation workflows</li> <li>\ud83d\udcca Interactive Visualization: Real-time state inspection and command discovery</li> <li>\ud83e\uddea Comprehensive Testing: Unit, integration, and E2E test coverage</li> </ul>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get up and running in minutes:</p> <pre><code># Clone and install\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\nmake install\n\n# Configure\nexport DISCORD_BOT_TOKEN=\"your_token_here\"\n\n# Run\nmake run\n</code></pre> <p>\u2192 Detailed Installation Guide</p>"},{"location":"#core-workflow","title":"\ud83c\udf9b\ufe0f Core Workflow","text":"<p>The system follows a finite state machine with clear transitions:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; BACKLOG_READY : /epic\n    BACKLOG_READY --&gt; SPRINT_PLANNED : /sprint plan\n    SPRINT_PLANNED --&gt; SPRINT_ACTIVE : /sprint start\n    SPRINT_ACTIVE --&gt; SPRINT_REVIEW : tasks complete\n    SPRINT_REVIEW --&gt; IDLE : /feedback\n    SPRINT_ACTIVE --&gt; SPRINT_PAUSED : /sprint pause\n    SPRINT_PAUSED --&gt; SPRINT_ACTIVE : /sprint resume\n    SPRINT_ACTIVE --&gt; BLOCKED : CI fails 3\u00d7\n    BLOCKED --&gt; SPRINT_ACTIVE : /suggest_fix</code></pre> <p>\u2192 Complete State Machine Reference</p>"},{"location":"#ai-agents","title":"\ud83e\udd16 AI Agents","text":"<p>Four specialized agents handle different aspects of development:</p>"},{"location":"#designagent","title":"\ud83c\udfa8 DesignAgent","text":"<ul> <li>System architecture creation</li> <li>Component design and interfaces  </li> <li>Technical specifications</li> <li>Design review and validation</li> </ul>"},{"location":"#codeagent","title":"\ud83d\udcbb CodeAgent","text":"<ul> <li>Feature implementation</li> <li>Bug fixing and debugging</li> <li>Code refactoring</li> <li>Performance optimization</li> </ul>"},{"location":"#qaagent","title":"\ud83e\uddea QAAgent","text":"<ul> <li>Test suite creation</li> <li>Quality validation</li> <li>Coverage analysis</li> <li>Performance testing</li> </ul>"},{"location":"#dataagent","title":"\ud83d\udcca DataAgent","text":"<ul> <li>Data analysis and insights</li> <li>Pipeline creation</li> <li>Metrics reporting</li> <li>Visualization generation</li> </ul> <p>\u2192 Agent Capabilities Reference</p>"},{"location":"#essential-commands","title":"\ud83d\udccb Essential Commands","text":"<p>Master these key slash commands in Discord:</p> Command Purpose Example <code>/epic</code> Define high-level initiatives <code>/epic \"Build authentication system\"</code> <code>/sprint plan</code> Plan sprint with stories <code>/sprint plan AUTH-1 AUTH-2</code> <code>/sprint start</code> Begin sprint execution <code>/sprint start</code> <code>/approve</code> Approve pending tasks <code>/approve AUTH-1 AUTH-2</code> <code>/state</code> Interactive state inspection <code>/state</code> <p>\u2192 Complete Command Reference</p>"},{"location":"#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":"<p>The system uses a clean layered architecture:</p> <ul> <li>Scripts Layer: Executable orchestrator entry points</li> <li>Library Layer: Core business logic and agents</li> <li>Interface Layer: Discord bot and external integrations</li> <li>Data Layer: State persistence and configuration</li> </ul> <p>\u2192 Detailed Architecture Documentation</p>"},{"location":"#testing-quality","title":"\ud83e\uddea Testing &amp; Quality","text":"<p>Comprehensive testing strategy ensures reliability:</p> <ul> <li>Unit Tests: State machine validation and component testing</li> <li>Integration Tests: Orchestrator workflows and agent coordination  </li> <li>E2E Tests: Complete user scenarios and error handling</li> <li>Coverage Target: &gt;90% code coverage with automated reporting</li> </ul> <p>\u2192 Testing Strategy &amp; Implementation</p>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions! The system is designed for extensibility:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Implement with tests</li> <li>Submit a pull request</li> </ol> <p>\u2192 Contributing Guidelines</p>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"Section Description Getting Started Installation, setup, and first steps User Guide Commands, workflows, and daily usage Architecture System design and technical details Development Testing, contributing, and API reference Deployment Production setup and configuration <p>Getting Help</p> <ul> <li>Check the Command Reference for syntax</li> <li>Use <code>/state</code> in Discord to see available commands</li> <li>Review Common Workflows for examples</li> <li>See Troubleshooting for issues</li> </ul>"},{"location":"architecture/code/","title":"C4 Code Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"architecture/code/#state-machine-class-structure","title":"State Machine Class Structure","text":"<pre><code>classDiagram\n    class StateMachine {\n        +current_state: State\n        +validate_command(command: Command) bool\n        +transition(command: Command) State\n        +get_allowed_commands() List[Command]\n        +get_state_diagram() str\n    }\n\n    class State {\n        &lt;&lt;enumeration&gt;&gt;\n        IDLE\n        BACKLOG_READY\n        SPRINT_PLANNED\n        SPRINT_ACTIVE\n        SPRINT_PAUSED\n        SPRINT_REVIEW\n        BLOCKED\n    }\n\n    class Command {\n        +name: str\n        +args: Dict\n        +validate() bool\n        +execute() Result\n    }\n\n    StateMachine --&gt; State\n    StateMachine --&gt; Command</code></pre>"},{"location":"architecture/code/#agent-class-hierarchy","title":"Agent Class Hierarchy","text":"<pre><code>classDiagram\n    class BaseAgent {\n        &lt;&lt;abstract&gt;&gt;\n        +name: str\n        +capabilities: List[str]\n        +run(task: Task, dry: bool) Result\n        +validate_task(task: Task) bool\n        +get_status() AgentStatus\n    }\n\n    class DesignAgent {\n        +run(task: Task, dry: bool) Result\n        +create_architecture(requirements: str) str\n        +review_design(design: str) str\n    }\n\n    class CodeAgent {\n        +run(task: Task, dry: bool) Result\n        +implement_feature(spec: str) str\n        +fix_bug(issue: str) str\n        +refactor_code(target: str) str\n    }\n\n    class QAAgent {\n        +run(task: Task, dry: bool) Result\n        +write_tests(spec: str) str\n        +run_tests(code: str) TestResult\n        +validate_implementation(code: str) ValidationResult\n    }\n\n    class DataAgent {\n        +run(task: Task, dry: bool) Result\n        +analyze_data(dataset: str) str\n        +create_pipeline(spec: str) str\n    }\n\n    BaseAgent &lt;|-- DesignAgent\n    BaseAgent &lt;|-- CodeAgent\n    BaseAgent &lt;|-- QAAgent\n    BaseAgent &lt;|-- DataAgent</code></pre>"},{"location":"architecture/code/#orchestrator-core-classes","title":"Orchestrator Core Classes","text":"<pre><code>classDiagram\n    class Orchestrator {\n        +projects: Dict[str, Project]\n        +agents: Dict[str, BaseAgent]\n        +state_machine: StateMachine\n        +handle_command(command: Command) Result\n        +dispatch_task(task: Task) Result\n        +escalate_to_human(task: Task) ApprovalRequest\n    }\n\n    class Project {\n        +name: str\n        +path: Path\n        +state: ProjectState\n        +orchestration_mode: OrchestrationMode\n        +load_state() ProjectState\n        +save_state(state: ProjectState) void\n    }\n\n    class ProjectState {\n        +current_state: State\n        +active_tasks: List[Task]\n        +pending_approvals: List[ApprovalRequest]\n        +sprint_backlog: List[Story]\n        +product_backlog: List[Story]\n    }\n\n    class Task {\n        +id: str\n        +agent_type: str\n        +command: str\n        +status: TaskStatus\n        +retry_count: int\n        +created_at: datetime\n    }\n\n    Orchestrator --&gt; Project\n    Project --&gt; ProjectState\n    ProjectState --&gt; Task\n    Orchestrator --&gt; StateMachine\n    Orchestrator --&gt; BaseAgent</code></pre>"},{"location":"architecture/code/#discord-bot-classes","title":"Discord Bot Classes","text":"<pre><code>classDiagram\n    class DiscordBot {\n        +orchestrator: Orchestrator\n        +client: discord.Client\n        +handle_slash_command(interaction: Interaction) void\n        +send_notification(message: str, channel: str) void\n        +create_interactive_view(state: State) discord.View\n    }\n\n    class CommandHandler {\n        +parse_command(interaction: Interaction) Command\n        +validate_command(command: Command) bool\n        +execute_command(command: Command) Result\n    }\n\n    class StateView {\n        +state: State\n        +create_buttons() List[discord.Button]\n        +create_embed() discord.Embed\n        +handle_button_click(interaction: Interaction) void\n    }\n\n    class NotificationManager {\n        +send_approval_request(request: ApprovalRequest) void\n        +send_status_update(project: str, status: str) void\n        +send_error_notification(error: Exception) void\n    }\n\n    DiscordBot --&gt; CommandHandler\n    DiscordBot --&gt; StateView\n    DiscordBot --&gt; NotificationManager\n    DiscordBot --&gt; Orchestrator</code></pre>"},{"location":"architecture/component/","title":"C4 Component Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"architecture/component/#component-architecture","title":"Component Architecture","text":""},{"location":"architecture/component/#discord-bot-components","title":"Discord Bot Components","text":"<pre><code>C4Component\n    title Discord Bot Components\n\n    Container_Boundary(discord_bot, \"Discord Bot\") {\n        Component(command_parser, \"Command Parser\", \"Parse and validate slash commands\")\n        Component(state_visualizer, \"State Visualizer\", \"Generate interactive state diagrams\")\n        Component(notification_manager, \"Notification Manager\", \"Send alerts and status updates\")\n        Component(button_handler, \"Button Handler\", \"Handle interactive UI elements\")\n    }\n\n    Container(orchestrator, \"Orchestrator\", \"Core coordination logic\")\n    System_Ext(discord_api, \"Discord API\")\n\n    Rel(discord_api, command_parser, \"Slash command events\")\n    Rel(command_parser, orchestrator, \"Validated commands\")\n    Rel(orchestrator, state_visualizer, \"State data\")\n    Rel(state_visualizer, discord_api, \"Interactive messages\")\n    Rel(orchestrator, notification_manager, \"Status updates\")\n    Rel(notification_manager, discord_api, \"Notifications\")\n    Rel(button_handler, orchestrator, \"User interactions\")</code></pre>"},{"location":"architecture/component/#orchestrator-components","title":"Orchestrator Components","text":"<pre><code>C4Component\n    title Orchestrator Components\n\n    Container_Boundary(orchestrator, \"Orchestrator\") {\n        Component(state_machine, \"State Machine\", \"Enforce command transitions\")\n        Component(project_manager, \"Project Manager\", \"Multi-project coordination\")\n        Component(task_dispatcher, \"Task Dispatcher\", \"Agent task coordination\")\n        Component(approval_gate, \"Approval Gate\", \"HITL workflow management\")\n        Component(retry_logic, \"Retry Logic\", \"3-attempt failure handling\")\n    }\n\n    Container(agent_lib, \"Agent Library\")\n    Container(state_store, \"State Store\")\n    Container(discord_bot, \"Discord Bot\")\n\n    Rel(discord_bot, state_machine, \"Command validation\")\n    Rel(state_machine, project_manager, \"Valid state transitions\")\n    Rel(project_manager, task_dispatcher, \"Task assignment\")\n    Rel(task_dispatcher, agent_lib, \"Agent execution\")\n    Rel(approval_gate, discord_bot, \"Approval requests\")\n    Rel(retry_logic, approval_gate, \"Escalation after 3 failures\")\n    Rel(project_manager, state_store, \"Persist state\")</code></pre>"},{"location":"architecture/component/#agent-library-components","title":"Agent Library Components","text":"<pre><code>C4Component\n    title Agent Library Components\n\n    Container_Boundary(agent_lib, \"Agent Library\") {\n        Component(base_agent, \"Base Agent\", \"Common agent interface\")\n        Component(design_agent, \"Design Agent\", \"Architecture decisions\")\n        Component(code_agent, \"Code Agent\", \"Implementation tasks\")\n        Component(qa_agent, \"QA Agent\", \"Testing and validation\")\n        Component(data_agent, \"Data Agent\", \"Data processing\")\n        Component(anthropic_client, \"Anthropic Client\", \"AI model integration\")\n        Component(github_client, \"GitHub Client\", \"Repository operations\")\n    }\n\n    System_Ext(anthropic_api, \"Anthropic API\")\n    System_Ext(github_api, \"GitHub API\")\n\n    Rel(base_agent, design_agent, \"Inheritance\")\n    Rel(base_agent, code_agent, \"Inheritance\")\n    Rel(base_agent, qa_agent, \"Inheritance\")\n    Rel(base_agent, data_agent, \"Inheritance\")\n    Rel(design_agent, anthropic_client, \"AI requests\")\n    Rel(code_agent, anthropic_client, \"AI requests\")\n    Rel(code_agent, github_client, \"Code commits\")\n    Rel(anthropic_client, anthropic_api, \"API calls\")\n    Rel(github_client, github_api, \"Repository operations\")</code></pre>"},{"location":"architecture/container/","title":"C4 Container Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"architecture/container/#container-architecture","title":"Container Architecture","text":"<pre><code>C4Container\n    title Container Diagram - AI Agent Workflow System\n\n    Person(user, \"Product Owner\", \"Solo developer\")\n\n    System_Boundary(system, \"AI Agent Workflow System\") {\n        Container(discord_bot, \"Discord Bot\", \"Python, discord.py\", \"Command interface, state visualization, notifications\")\n        Container(orchestrator, \"Orchestrator\", \"Python, asyncio\", \"Central coordination, state machine, project management\")\n        Container(agent_lib, \"Agent Library\", \"Python, anthropic\", \"Specialized AI agents (Design, Code, Data, QA)\")\n        Container(state_store, \"State Store\", \"JSON files\", \"Project state, task queues, approval gates\")\n        Container(config, \"Configuration\", \"YAML\", \"Project definitions, orchestration modes\")\n    }\n\n    System_Ext(discord_api, \"Discord API\", \"Real-time messaging platform\")\n    System_Ext(github_api, \"GitHub API\", \"Repository and CI/CD integration\")\n    System_Ext(anthropic_api, \"Anthropic API\", \"Claude AI models\")\n\n    Rel(user, discord_api, \"Slash commands, interactions\")\n    Rel(discord_api, discord_bot, \"Webhook events, API calls\")\n    Rel(discord_bot, orchestrator, \"Command dispatch, state queries\")\n    Rel(orchestrator, agent_lib, \"Task execution requests\")\n    Rel(orchestrator, state_store, \"Read/write project state\")\n    Rel(orchestrator, config, \"Load project definitions\")\n    Rel(agent_lib, anthropic_api, \"AI model requests\")\n    Rel(agent_lib, github_api, \"Code commits, PR creation\")</code></pre>"},{"location":"architecture/container/#container-responsibilities","title":"Container Responsibilities","text":""},{"location":"architecture/container/#discord-bot","title":"Discord Bot","text":"<ul> <li>Parse and validate slash commands</li> <li>Implement interactive state visualization</li> <li>Send notifications and approval requests</li> <li>Handle user interactions and buttons</li> </ul>"},{"location":"architecture/container/#orchestrator","title":"Orchestrator","text":"<ul> <li>Enforce state machine transitions</li> <li>Coordinate multi-agent workflows</li> <li>Implement HITL approval gates</li> <li>Manage project lifecycle</li> </ul>"},{"location":"architecture/container/#agent-library","title":"Agent Library","text":"<ul> <li>Specialized agent implementations</li> <li>Anthropic API integration</li> <li>Code generation and testing</li> <li>GitHub operations</li> </ul>"},{"location":"architecture/container/#state-store","title":"State Store","text":"<ul> <li>Persist workflow state across restarts</li> <li>Track task queues and approvals</li> <li>Maintain project status</li> </ul>"},{"location":"architecture/container/#configuration","title":"Configuration","text":"<ul> <li>Define project orchestration modes</li> <li>Configure agent behaviors</li> <li>Set approval thresholds</li> </ul>"},{"location":"architecture/context/","title":"C4 Context Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"architecture/context/#system-context","title":"System Context","text":"<pre><code>C4Context\n    title System Context - AI Agent TDD-Scrum Workflow\n\n    Person(user, \"Product Owner/Engineer\", \"Solo developer using AI agents for software development\")\n\n    System_Boundary(system, \"AI Agent Workflow System\") {\n        System(orchestrator, \"Agent Orchestrator\", \"Coordinates multiple AI agents through HITL workflow\")\n    }\n\n    System_Ext(discord, \"Discord\", \"Primary interface for human interaction and approval\")\n    System_Ext(github, \"GitHub\", \"Source code repository and CI/CD\")\n    System_Ext(anthropic, \"Anthropic API\", \"AI agent capabilities\")\n\n    Rel(user, discord, \"Issues commands, approves tasks\")\n    Rel(discord, orchestrator, \"Command execution, notifications\")\n    Rel(orchestrator, github, \"Code changes, PR management\")\n    Rel(orchestrator, anthropic, \"Agent task execution\")\n    Rel(github, user, \"Code review, CI feedback\")</code></pre>"},{"location":"architecture/context/#key-interactions","title":"Key Interactions","text":"<ol> <li>User \u2192 Discord: Issues slash commands (<code>/epic</code>, <code>/sprint</code>, <code>/approve</code>)</li> <li>Discord \u2192 Orchestrator: Command parsing and state transitions</li> <li>Orchestrator \u2192 Agents: Task dispatch and coordination</li> <li>Agents \u2192 GitHub: Code implementation and PR creation</li> <li>GitHub \u2192 User: CI results and code review</li> <li>User Approval Loop: HITL gates for strategic decisions</li> </ol>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>The AI Agent TDD-Scrum Workflow system follows a clean, layered architecture designed for scalability, maintainability, and extensibility.</p>"},{"location":"architecture/overview/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"User Interface Layer\"\n        Discord[Discord Bot Interface]\n        CLI[Command Line Interface]\n    end\n\n    subgraph \"Application Layer\"\n        Orch[Orchestrator]\n        SM[State Machine]\n        Commands[Command Handlers]\n    end\n\n    subgraph \"Domain Layer\"\n        Agents[AI Agent Library]\n        Tasks[Task Management]\n        Projects[Project Management]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        State[State Persistence]\n        Config[Configuration]\n        Logging[Logging &amp; Monitoring]\n    end\n\n    Discord --&gt; Orch\n    CLI --&gt; Orch\n    Orch --&gt; SM\n    Orch --&gt; Commands\n    Commands --&gt; Agents\n    Commands --&gt; Tasks\n    Commands --&gt; Projects\n    Agents --&gt; State\n    Projects --&gt; State\n    Orch --&gt; Config\n    Orch --&gt; Logging</code></pre>"},{"location":"architecture/overview/#core-principles","title":"Core Principles","text":""},{"location":"architecture/overview/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each layer has distinct responsibilities: - Interface Layer: User interaction and external communication - Application Layer: Workflow orchestration and business logic - Domain Layer: Core business entities and AI agent coordination - Infrastructure Layer: Data persistence, configuration, and cross-cutting concerns</p>"},{"location":"architecture/overview/#2-finite-state-machine","title":"2. Finite State Machine","text":"<p>The system enforces a strict state machine to ensure workflow integrity: - Prevents invalid command sequences - Provides clear error messages and hints - Enables state visualization and debugging</p>"},{"location":"architecture/overview/#3-event-driven-architecture","title":"3. Event-Driven Architecture","text":"<p>Components communicate through well-defined events: - Command execution triggers state transitions - Agent completion events update project status - Human approval events unblock workflows</p>"},{"location":"architecture/overview/#4-plugin-architecture","title":"4. Plugin Architecture","text":"<p>Agents are designed as pluggable components: - Common base interface for all agents - Easy to add new specialized agents - Configurable agent behavior per project</p>"},{"location":"architecture/overview/#directory-structure","title":"Directory Structure","text":"<pre><code>agent-workflow/\n\u251c\u2500\u2500 docs_src/           # MkDocs documentation source\n\u251c\u2500\u2500 docs/              # Original documentation files\n\u251c\u2500\u2500 scripts/           # Executable entry points\n\u2502   \u2514\u2500\u2500 orchestrator.py\n\u251c\u2500\u2500 lib/               # Core library code\n\u2502   \u251c\u2500\u2500 agents/        # AI agent implementations\n\u2502   \u251c\u2500\u2500 state_machine.py\n\u2502   \u2514\u2500\u2500 discord_bot.py\n\u251c\u2500\u2500 tests/             # Test suite\n\u2502   \u251c\u2500\u2500 unit/         # Unit tests\n\u2502   \u251c\u2500\u2500 integration/  # Integration tests\n\u2502   \u2514\u2500\u2500 conftest.py   # Test configuration\n\u251c\u2500\u2500 requirements.txt   # Dependencies\n\u251c\u2500\u2500 mkdocs.yml        # Documentation configuration\n\u251c\u2500\u2500 Makefile          # Build automation\n\u2514\u2500\u2500 README.md         # Project overview\n</code></pre>"},{"location":"architecture/overview/#component-interaction","title":"Component Interaction","text":""},{"location":"architecture/overview/#1-command-flow","title":"1. Command Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Discord\n    participant Orchestrator\n    participant StateMachine\n    participant Agent\n\n    User-&gt;&gt;Discord: /epic \"Build auth system\"\n    Discord-&gt;&gt;Orchestrator: handle_command()\n    Orchestrator-&gt;&gt;StateMachine: validate_command()\n    StateMachine--&gt;&gt;Orchestrator: validation_result\n    Orchestrator-&gt;&gt;Agent: dispatch_task()\n    Agent--&gt;&gt;Orchestrator: task_result\n    Orchestrator-&gt;&gt;StateMachine: transition_state()\n    Orchestrator--&gt;&gt;Discord: command_response\n    Discord--&gt;&gt;User: Success message</code></pre>"},{"location":"architecture/overview/#2-state-management","title":"2. State Management","text":"<ul> <li>Centralized State: Single source of truth in orchestrator</li> <li>Persistent Storage: State saved to <code>.orch-state/status.json</code></li> <li>State Recovery: System recovers state on restart</li> <li>Multi-Project: Independent state machines per project</li> </ul>"},{"location":"architecture/overview/#3-agent-coordination","title":"3. Agent Coordination","text":"<ul> <li>Task Queue: Orchestrator maintains task queues per project</li> <li>Retry Logic: Automatic retry with exponential backoff</li> <li>Human Escalation: HITL approval after 3 failed attempts</li> <li>Parallel Execution: Multiple agents can work simultaneously</li> </ul>"},{"location":"architecture/overview/#design-patterns","title":"Design Patterns","text":""},{"location":"architecture/overview/#1-command-pattern","title":"1. Command Pattern","text":"<p>Each user command is encapsulated as a command object: - Enables undo/redo functionality - Facilitates command logging and auditing - Allows command queuing and batch processing</p>"},{"location":"architecture/overview/#2-state-pattern","title":"2. State Pattern","text":"<p>Workflow states encapsulate behavior: - Each state defines allowed commands - State transitions are explicit and validated - Easy to add new states and transitions</p>"},{"location":"architecture/overview/#3-strategy-pattern","title":"3. Strategy Pattern","text":"<p>Agent implementations use strategy pattern: - Agents can be swapped at runtime - Different strategies for different project types - Easy A/B testing of agent behaviors</p>"},{"location":"architecture/overview/#4-observer-pattern","title":"4. Observer Pattern","text":"<p>Event-driven communication between components: - Loose coupling between layers - Easy to add new event handlers - Supports monitoring and debugging</p>"},{"location":"architecture/overview/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"architecture/overview/#1-horizontal-scaling","title":"1. Horizontal Scaling","text":"<ul> <li>Multiple orchestrator instances can run simultaneously</li> <li>Discord bot can be load-balanced</li> <li>Agent execution can be distributed</li> </ul>"},{"location":"architecture/overview/#2-performance-optimization","title":"2. Performance Optimization","text":"<ul> <li>Async/await throughout for I/O operations</li> <li>Caching of frequently accessed data</li> <li>Batch processing of similar tasks</li> </ul>"},{"location":"architecture/overview/#3-resource-management","title":"3. Resource Management","text":"<ul> <li>Connection pooling for external services</li> <li>Rate limiting for API calls</li> <li>Memory-efficient state storage</li> </ul>"},{"location":"architecture/overview/#security-architecture","title":"Security Architecture","text":"<p>The system implements comprehensive security through multiple layers of protection. See Security Architecture for detailed information.</p>"},{"location":"architecture/overview/#1-agent-security-model","title":"1. Agent Security Model","text":"<ul> <li>Command Access Control: Each agent type has restricted tool access</li> <li>Principle of Least Privilege: Agents can only access necessary tools</li> <li>Automatic Enforcement: Security boundaries applied via Claude Code CLI flags</li> </ul>"},{"location":"architecture/overview/#2-authentication-authorization","title":"2. Authentication &amp; Authorization","text":"<ul> <li>Discord bot token authentication</li> <li>Role-based access control in Discord</li> <li>Project-level permission isolation</li> <li>Agent-specific security profiles</li> </ul>"},{"location":"architecture/overview/#3-data-protection","title":"3. Data Protection","text":"<ul> <li>No sensitive data stored in state files</li> <li>Environment variables for secrets</li> <li>Audit logging of all commands and agent tool usage</li> <li>State file access controls</li> </ul>"},{"location":"architecture/overview/#extensibility-points","title":"Extensibility Points","text":""},{"location":"architecture/overview/#1-custom-agents","title":"1. Custom Agents","text":"<pre><code>class CustomAgent(BaseAgent):\n    def __init__(self):\n        super().__init__(\n            name=\"CustomAgent\",\n            capabilities=[\"custom_capability\"]\n        )\n\n    async def run(self, task, dry_run=False):\n        # Custom implementation\n        pass\n</code></pre>"},{"location":"architecture/overview/#2-custom-commands","title":"2. Custom Commands","text":"<p>Add new slash commands by extending the Discord bot: <pre><code>@app_commands.command(name=\"custom\", description=\"Custom command\")\nasync def custom_command(self, interaction, param: str):\n    # Custom command implementation\n    pass\n</code></pre></p>"},{"location":"architecture/overview/#3-custom-states","title":"3. Custom States","text":"<p>Extend the state machine with new workflow states: <pre><code>class CustomState(Enum):\n    CUSTOM_STATE = \"CUSTOM_STATE\"\n</code></pre></p>"},{"location":"architecture/overview/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/overview/#1-logging-strategy","title":"1. Logging Strategy","text":"<ul> <li>Structured logging with JSON format</li> <li>Different log levels per component</li> <li>Centralized log aggregation ready</li> </ul>"},{"location":"architecture/overview/#2-metrics-collection","title":"2. Metrics Collection","text":"<ul> <li>Command execution metrics</li> <li>Agent performance metrics</li> <li>State transition tracking</li> </ul>"},{"location":"architecture/overview/#3-health-checks","title":"3. Health Checks","text":"<ul> <li>Discord bot connectivity</li> <li>Agent responsiveness</li> <li>State persistence availability</li> </ul> <p>Architecture Evolution</p> <p>This architecture is designed to evolve with the system's needs. New patterns and components can be added while maintaining backward compatibility.</p>"},{"location":"architecture/security/","title":"Security Architecture","text":""},{"location":"architecture/security/#overview","title":"Overview","text":"<p>The AI Agent TDD-Scrum Workflow system implements comprehensive security measures to ensure safe operation of AI agents with appropriate access controls and data protection.</p>"},{"location":"architecture/security/#agent-security-model","title":"Agent Security Model","text":""},{"location":"architecture/security/#command-access-control","title":"Command Access Control","text":"<p>Each agent type operates under the Principle of Least Privilege, with access restricted to only the tools necessary for their specific function.</p> <pre><code>graph LR\n    subgraph \"Agent Security Layers\"\n        Claude[Claude Code CLI]\n        Config[Agent Tool Config]\n        Validation[Access Validation]\n    end\n\n    subgraph \"Agent Types\"\n        Orchestrator[Orchestrator&lt;br/&gt;Full Access]\n        Code[Code Agent&lt;br/&gt;Edit + Commit]\n        Design[Design Agent&lt;br/&gt;Read Only]\n        QA[QA Agent&lt;br/&gt;Test Only]\n        Data[Data Agent&lt;br/&gt;Analysis Only]\n    end\n\n    Claude --&gt; Config\n    Config --&gt; Validation\n    Validation --&gt; Orchestrator\n    Validation --&gt; Code\n    Validation --&gt; Design\n    Validation --&gt; QA\n    Validation --&gt; Data</code></pre>"},{"location":"architecture/security/#agent-access-matrix","title":"Agent Access Matrix","text":"Tool Category Orchestrator Code Agent Design Agent QA Agent Data Agent File Operations Read files \u2705 \u2705 \u2705 \u2705 \u2705 Write new files \u2705 \u2705 \u2705 \u274c \u2705 Edit existing code \u2705 \u2705 \u274c \u274c \u274c Delete files \u2705 \u274c \u274c \u274c \u274c Version Control Git status/diff \u2705 \u2705 \u2705 \u2705 \u274c Git add/commit \u2705 \u2705 \u274c \u274c \u274c Git push \u2705 \u274c \u274c \u274c \u274c Testing &amp; Analysis Run tests \u2705 \u2705 \u274c \u2705 \u274c Code quality tools \u2705 \u2705 \u274c \u2705 \u274c System Operations Package management \u2705 \u2705 (limited) \u274c \u274c \u274c Process management \u2705 \u274c \u274c \u274c \u274c Network access \u2705 \u274c \u2705 (research) \u274c \u274c"},{"location":"architecture/security/#security-implementation","title":"Security Implementation","text":""},{"location":"architecture/security/#1-tool-restriction-enforcement","title":"1. Tool Restriction Enforcement","text":"<p>The system leverages Claude Code's built-in security flags:</p> <pre><code>claude --allowedTools \"Read Write Glob\" --disallowedTools \"Bash(rm) Edit\"\n</code></pre> <p>Architecture Components:</p> <ul> <li><code>agent_tool_config.py</code>: Centralized security configuration</li> <li>Enhanced Claude Client: Automatic tool restriction application</li> <li>Agent Integration: Transparent security enforcement</li> </ul>"},{"location":"architecture/security/#2-command-categories","title":"2. Command Categories","text":""},{"location":"architecture/security/#restricted-commands-blocked-for-most-agents","title":"Restricted Commands (Blocked for Most Agents)","text":"<ul> <li><code>sudo</code>, <code>su</code> - Privilege escalation</li> <li><code>chmod</code>, <code>chown</code> - Permission changes</li> <li><code>kill</code>, <code>killall</code> - Process termination</li> <li><code>curl</code>, <code>wget</code> - Network downloads</li> <li><code>ssh</code>, <code>scp</code> - Remote access</li> <li><code>docker run</code> - Container operations</li> </ul>"},{"location":"architecture/security/#elevated-commands-orchestrator-only","title":"Elevated Commands (Orchestrator Only)","text":"<ul> <li><code>rm</code>, <code>rmdir</code> - File deletion</li> <li><code>git push</code> - Publishing changes</li> </ul>"},{"location":"architecture/security/#code-management-commands-orchestrator-code-agent","title":"Code Management Commands (Orchestrator + Code Agent)","text":"<ul> <li><code>git commit</code> - Version control commits</li> <li><code>git add</code> - Stage changes</li> <li><code>git reset</code> - Reset changes</li> </ul>"},{"location":"architecture/security/#3-security-validation","title":"3. Security Validation","text":"<pre><code>from lib.agent_tool_config import validate_agent_access, AgentType\n\n# Runtime validation\ncan_commit = validate_agent_access(AgentType.CODE, \"Bash(git commit)\")  # \u2705 True\ncan_delete = validate_agent_access(AgentType.CODE, \"Bash(rm)\")          # \u274c False\n</code></pre>"},{"location":"architecture/security/#data-protection","title":"Data Protection","text":""},{"location":"architecture/security/#1-state-management-security","title":"1. State Management Security","text":"<ul> <li>No Sensitive Data: State files contain only workflow metadata</li> <li>Local Storage: State persisted locally in <code>.orch-state/</code></li> <li>Project Isolation: Independent state per project</li> <li>Access Control: File system permissions protect state</li> </ul>"},{"location":"architecture/security/#2-environment-security","title":"2. Environment Security","text":"<pre><code># Required environment variables\nexport DISCORD_BOT_TOKEN=\"your_token_here\"\n\n# Optional: Restrict Claude Code directory access\nclaude --add-dir ./project-dir\n</code></pre>"},{"location":"architecture/security/#3-secret-management","title":"3. Secret Management","text":"<ul> <li>Environment Variables: All secrets stored as env vars</li> <li>No Hardcoded Secrets: Code contains no embedded credentials</li> <li>Token Rotation: Support for rotating API tokens</li> <li>Audit Logging: All credential usage logged</li> </ul>"},{"location":"architecture/security/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"architecture/security/#1-discord-bot-security","title":"1. Discord Bot Security","text":"<pre><code># Role-based access control\n@app_commands.command()\n@requires_role(\"developer\")\nasync def sensitive_command(self, interaction):\n    # Only users with 'developer' role can execute\n    pass\n</code></pre>"},{"location":"architecture/security/#2-project-level-permissions","title":"2. Project-Level Permissions","text":"<ul> <li>Channel Isolation: Each project has dedicated Discord channel</li> <li>User Permissions: Discord role-based access control</li> <li>Command Restrictions: Sensitive commands require elevated roles</li> </ul>"},{"location":"architecture/security/#input-validation-sanitization","title":"Input Validation &amp; Sanitization","text":""},{"location":"architecture/security/#1-command-validation","title":"1. Command Validation","text":"<pre><code>def validate_epic_command(description: str) -&gt; bool:\n    \"\"\"Validate epic description input\"\"\"\n    if len(description) &gt; 500:\n        raise ValueError(\"Epic description too long\")\n\n    # Prevent command injection\n    dangerous_chars = [';', '&amp;&amp;', '||', '`', '$']\n    if any(char in description for char in dangerous_chars):\n        raise ValueError(\"Invalid characters in description\")\n\n    return True\n</code></pre>"},{"location":"architecture/security/#2-state-machine-validation","title":"2. State Machine Validation","text":"<ul> <li>Command Sequencing: Only valid commands allowed per state</li> <li>Parameter Validation: All inputs validated before processing</li> <li>Error Handling: Graceful failure with helpful error messages</li> </ul>"},{"location":"architecture/security/#audit-monitoring","title":"Audit &amp; Monitoring","text":""},{"location":"architecture/security/#1-security-logging","title":"1. Security Logging","text":"<pre><code># Security-relevant events logged\nlogger.security(\"Agent access granted\", extra={\n    \"agent_type\": \"CodeAgent\",\n    \"tool\": \"git commit\",\n    \"user\": interaction.user.id,\n    \"project\": project_name\n})\n</code></pre>"},{"location":"architecture/security/#2-access-monitoring","title":"2. Access Monitoring","text":"<ul> <li>Tool Usage Tracking: All agent tool usage logged</li> <li>Failed Access Attempts: Blocked commands logged</li> <li>User Activity: Discord command usage tracked</li> <li>Anomaly Detection: Unusual usage patterns flagged</li> </ul>"},{"location":"architecture/security/#threat-model-mitigations","title":"Threat Model &amp; Mitigations","text":""},{"location":"architecture/security/#1-identified-threats","title":"1. Identified Threats","text":"Threat Impact Likelihood Mitigation Malicious Agent Commands High Medium Tool access restrictions Privilege Escalation High Low Command filtering Code Injection Medium Low Input validation Data Exfiltration Medium Low Network restrictions Unauthorized Access Medium Low Discord role permissions"},{"location":"architecture/security/#2-security-controls","title":"2. Security Controls","text":""},{"location":"architecture/security/#preventive-controls","title":"Preventive Controls","text":"<ul> <li>Agent tool restrictions</li> <li>Input validation</li> <li>Role-based access control</li> <li>Environment isolation</li> </ul>"},{"location":"architecture/security/#detective-controls","title":"Detective Controls","text":"<ul> <li>Comprehensive audit logging</li> <li>Access monitoring</li> <li>Anomaly detection</li> <li>Failed attempt tracking</li> </ul>"},{"location":"architecture/security/#corrective-controls","title":"Corrective Controls","text":"<ul> <li>Automatic command blocking</li> <li>Error recovery procedures</li> <li>State rollback capabilities</li> <li>Alert escalation</li> </ul>"},{"location":"architecture/security/#security-testing","title":"Security Testing","text":""},{"location":"architecture/security/#1-automated-security-tests","title":"1. Automated Security Tests","text":"<pre><code># Example security test\ndef test_code_agent_cannot_delete_files(self):\n    \"\"\"Verify code agent cannot use rm command\"\"\"\n    access_granted = validate_agent_access(AgentType.CODE, \"Bash(rm)\")\n    self.assertFalse(access_granted)\n</code></pre>"},{"location":"architecture/security/#2-security-test-categories","title":"2. Security Test Categories","text":"<ul> <li>Access Control Tests: Verify agent restrictions work</li> <li>Input Validation Tests: Test command injection prevention</li> <li>Authentication Tests: Verify Discord role enforcement</li> <li>State Security Tests: Ensure state tampering protection</li> </ul>"},{"location":"architecture/security/#security-configuration","title":"Security Configuration","text":""},{"location":"architecture/security/#1-agent-security-profiles","title":"1. Agent Security Profiles","text":"<p>Create custom security profiles by modifying <code>AGENT_TOOL_CONFIG</code>:</p> <pre><code>CUSTOM_AGENT_CONFIG = {\n    AgentType.CUSTOM: {\n        \"allowed_tools\": [\n            \"Read\", \"Write\",\n            \"Bash(custom_tool)\"\n        ],\n        \"disallowed_tools\": [\n            \"Edit\", \"Bash(dangerous_command)\"\n        ]\n    }\n}\n</code></pre>"},{"location":"architecture/security/#2-environment-security-settings","title":"2. Environment Security Settings","text":"<pre><code># Restrict Claude Code to specific directories\nexport CLAUDE_ALLOWED_DIRS=\"/workspace/safe-dir\"\n\n# Enable additional security logging\nexport SECURITY_LOG_LEVEL=\"DEBUG\"\n\n# Require explicit permission for network access\nexport REQUIRE_NETWORK_APPROVAL=\"true\"\n</code></pre>"},{"location":"architecture/security/#best-practices","title":"Best Practices","text":""},{"location":"architecture/security/#1-development-security","title":"1. Development Security","text":"<ul> <li>Code Review: All security-related changes require review</li> <li>Principle of Least Privilege: Grant minimal necessary permissions</li> <li>Defense in Depth: Multiple security layers</li> <li>Fail Secure: Default to deny for unknown operations</li> </ul>"},{"location":"architecture/security/#2-operational-security","title":"2. Operational Security","text":"<ul> <li>Regular Audits: Periodic review of agent permissions</li> <li>Security Updates: Keep dependencies updated</li> <li>Incident Response: Clear procedures for security events</li> <li>Backup &amp; Recovery: Secure backup of critical data</li> </ul>"},{"location":"architecture/security/#3-monitoring-alerting","title":"3. Monitoring &amp; Alerting","text":"<pre><code># Security alert example\nif failed_access_attempts &gt; 5:\n    alert_security_team(\n        \"Multiple failed access attempts\",\n        agent_type=agent.name,\n        user=user_id,\n        timestamp=datetime.now()\n    )\n</code></pre>"},{"location":"architecture/security/#compliance-considerations","title":"Compliance Considerations","text":""},{"location":"architecture/security/#1-data-privacy","title":"1. Data Privacy","text":"<ul> <li>No PII Storage: System avoids storing personal information</li> <li>Data Minimization: Only necessary data collected</li> <li>Retention Policies: Automatic log rotation and cleanup</li> </ul>"},{"location":"architecture/security/#2-access-controls","title":"2. Access Controls","text":"<ul> <li>Role Separation: Clear separation of duties</li> <li>Audit Trail: Complete audit trail of all actions</li> <li>Access Reviews: Regular review of user permissions</li> </ul> <p>Security Updates</p> <p>Security configurations should be reviewed regularly and updated as new threats emerge. Monitor security advisories for all dependencies.</p> <p>Incident Response</p> <p>In case of suspected security incident, immediately disable affected agents and review audit logs. Contact security team for investigation procedures.</p>"},{"location":"development/testing/","title":"Testing Plan - AI Agent TDD-Scrum Workflow","text":""},{"location":"development/testing/#testing-strategy","title":"Testing Strategy","text":""},{"location":"development/testing/#test-pyramid","title":"Test Pyramid","text":"<ol> <li>Unit Tests (70%) - Individual component testing</li> <li>Integration Tests (20%) - Component interaction testing  </li> <li>End-to-End Tests (10%) - Full workflow testing</li> </ol>"},{"location":"development/testing/#test-categories","title":"Test Categories","text":""},{"location":"development/testing/#1-state-machine-tests","title":"1. State Machine Tests","text":"<ul> <li>File: <code>tests/unit/test_state_machine.py</code></li> <li>Coverage: All state transitions and command validations</li> <li>Approach: Table-driven tests with (current_state, command) \u2192 expected_result</li> </ul> <pre><code>test_cases = [\n    (\"IDLE\", \"/epic\", \"BACKLOG_READY\", True),\n    (\"IDLE\", \"/sprint start\", \"IDLE\", False),  # Invalid transition\n    (\"SPRINT_ACTIVE\", \"/sprint pause\", \"SPRINT_PAUSED\", True),\n    # ... comprehensive matrix\n]\n</code></pre>"},{"location":"development/testing/#2-agent-library-tests","title":"2. Agent Library Tests","text":"<ul> <li>Files: </li> <li><code>tests/unit/test_base_agent.py</code></li> <li><code>tests/unit/test_design_agent.py</code></li> <li><code>tests/unit/test_code_agent.py</code></li> <li><code>tests/unit/test_qa_agent.py</code></li> <li><code>tests/unit/test_data_agent.py</code></li> <li><code>tests/unit/test_agent_tool_config.py</code> \u2705</li> <li>Coverage: </li> <li>Agent initialization and configuration</li> <li>Task execution with dry-run mode</li> <li>Error handling and retry logic</li> <li>Agent Security: Tool access control and command restrictions</li> <li>Claude Code integration (mocked)</li> </ul>"},{"location":"development/testing/#3-discord-bot-tests","title":"3. Discord Bot Tests","text":"<ul> <li>Files:</li> <li><code>tests/unit/test_discord_bot.py</code></li> <li><code>tests/unit/test_command_parser.py</code></li> <li><code>tests/unit/test_state_visualizer.py</code></li> <li>Coverage:</li> <li>Slash command parsing and validation</li> <li>Interactive state visualization</li> <li>Button handling and user interactions</li> <li>Channel management (create project channels)</li> <li>Error message formatting</li> </ul>"},{"location":"development/testing/#4-orchestrator-tests","title":"4. Orchestrator Tests","text":"<ul> <li>Files:</li> <li><code>tests/unit/test_orchestrator.py</code></li> <li><code>tests/unit/test_project_manager.py</code></li> <li><code>tests/unit/test_approval_gate.py</code></li> <li>Coverage:</li> <li>Multi-project coordination</li> <li>HITL approval workflow</li> <li>Task dispatch and retry logic</li> <li>State persistence and recovery</li> </ul>"},{"location":"development/testing/#5-integration-tests","title":"5. Integration Tests","text":"<ul> <li>Files:</li> <li><code>tests/integration/test_discord_orchestrator.py</code></li> <li><code>tests/integration/test_agent_coordination.py</code></li> <li><code>tests/integration/test_state_persistence.py</code></li> <li>Coverage:</li> <li>Discord \u2192 Orchestrator \u2192 Agent workflows</li> <li>State machine integration with Discord UI</li> <li>Multi-agent task coordination</li> <li>Project state persistence across restarts</li> </ul>"},{"location":"development/testing/#6-end-to-end-tests","title":"6. End-to-End Tests","text":"<ul> <li>Files:</li> <li><code>tests/e2e/test_complete_workflow.py</code></li> <li><code>tests/e2e/test_approval_scenarios.py</code></li> <li>Coverage:</li> <li>Complete epic \u2192 sprint \u2192 implementation workflow</li> <li>HITL approval gates and escalation</li> <li>Multi-project orchestration scenarios</li> <li>Error recovery and retry scenarios</li> </ul>"},{"location":"development/testing/#test-implementation-structure","title":"Test Implementation Structure","text":""},{"location":"development/testing/#mock-strategy","title":"Mock Strategy","text":"<ul> <li>Discord API: Mock discord.py interactions</li> <li>Anthropic API: Mock AI model responses with realistic outputs</li> <li>GitHub API: Mock repository operations and CI results</li> <li>File System: Use temporary directories for state persistence</li> </ul>"},{"location":"development/testing/#test-data","title":"Test Data","text":"<ul> <li>Fixtures: <code>tests/fixtures/</code></li> <li>Sample project configurations</li> <li>Mock Discord interactions</li> <li>Predefined AI responses</li> <li>Test state machine configurations</li> </ul>"},{"location":"development/testing/#performance-tests","title":"Performance Tests","text":"<ul> <li>Load Testing: Multiple concurrent projects</li> <li>Stress Testing: High-frequency command processing  </li> <li>Memory Testing: Long-running orchestrator instances</li> </ul>"},{"location":"development/testing/#test-execution","title":"Test Execution","text":""},{"location":"development/testing/#continuous-testing","title":"Continuous Testing","text":"<pre><code># Unit tests (fast feedback)\npytest tests/unit/ -v\n\n# Integration tests (moderate speed)\npytest tests/integration/ -v\n\n# Full test suite (comprehensive)\npytest tests/ -v --cov=lib --cov=scripts\n\n# Performance tests (separate run)\npytest tests/performance/ -v\n</code></pre>"},{"location":"development/testing/#test-coverage-targets","title":"Test Coverage Targets","text":"<ul> <li>Unit Tests: \u226595% line coverage</li> <li>Integration Tests: \u226590% feature coverage</li> <li>E2E Tests: 100% critical path coverage</li> </ul>"},{"location":"development/testing/#test-environment-setup","title":"Test Environment Setup","text":"<pre><code># Test dependencies\npip install pytest pytest-cov pytest-asyncio pytest-mock\n\n# Discord testing with mock bot\nexport DISCORD_BOT_TOKEN=\"test_token\"\nexport ANTHROPIC_API_KEY=\"test_key\"\n\n# Test database setup\nmkdir -p tests/tmp\n</code></pre>"},{"location":"development/testing/#quality-gates","title":"Quality Gates","text":""},{"location":"development/testing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<ul> <li>Run unit tests</li> <li>Check code coverage</li> <li>Lint code style</li> <li>Validate type hints</li> </ul>"},{"location":"development/testing/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ol> <li>Fast Tests: Unit tests on every commit</li> <li>Integration Tests: On pull request</li> <li>E2E Tests: On main branch merge</li> <li>Performance Tests: Nightly runs</li> </ol>"},{"location":"development/testing/#test-driven-development-process","title":"Test-Driven Development Process","text":"<ol> <li>Write failing test for new feature</li> <li>Implement minimal code to pass test  </li> <li>Refactor while maintaining test coverage</li> <li>Add integration tests for feature interactions</li> <li>Add E2E test for user-facing workflows</li> </ol>"},{"location":"development/testing/#test-scenarios-priority","title":"Test Scenarios Priority","text":""},{"location":"development/testing/#high-priority-must-test","title":"High Priority (Must Test)","text":"<ul> <li>State machine command validation</li> <li>HITL approval workflows</li> <li>Agent task execution</li> <li>Agent security and tool restrictions \u2705</li> <li>Discord command parsing</li> <li>Project state persistence</li> </ul>"},{"location":"development/testing/#medium-priority-should-test","title":"Medium Priority (Should Test)","text":"<ul> <li>Multi-project coordination</li> <li>Error handling and recovery</li> <li>Performance under load</li> <li>State visualization</li> <li>Configuration management</li> </ul>"},{"location":"development/testing/#low-priority-nice-to-test","title":"Low Priority (Nice to Test)","text":"<ul> <li>Edge case error scenarios</li> <li>Stress testing beyond normal limits</li> <li>UI polish and formatting</li> <li>Advanced Discord features</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Detailed installation instructions for the AI Agent TDD-Scrum Workflow system.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#python-environment","title":"Python Environment","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> <li>Virtual environment (recommended)</li> </ul>"},{"location":"getting-started/installation/#external-services","title":"External Services","text":"<ul> <li>Discord Application with bot token</li> <li>Git for repository management</li> <li>Optional: AI service integration</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-direct-installation-recommended","title":"Method 1: Direct Installation (Recommended)","text":"<pre><code># Clone repository\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n\n# Create virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\nmake install\n</code></pre>"},{"location":"getting-started/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>For contributors and developers:</p> <pre><code># Clone repository\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n\n# Set up development environment\nmake dev-setup\n\n# This installs additional development tools:\n# - black (code formatting)\n# - flake8 (linting)\n# - pytest plugins\n</code></pre>"},{"location":"getting-started/installation/#method-3-manual-installation","title":"Method 3: Manual Installation","text":"<p>If Make is not available:</p> <pre><code># Install core dependencies\npip install discord.py&gt;=2.3.0\npip install pygithub&gt;=1.59.0  \npip install pyyaml&gt;=6.0\npip install anthropic&gt;=0.3.0\n\n# Install testing dependencies\npip install pytest&gt;=7.4.0\npip install pytest-asyncio&gt;=0.21.0\npip install pytest-mock&gt;=3.11.0\npip install pytest-cov&gt;=4.1.0\n</code></pre>"},{"location":"getting-started/installation/#documentation-setup-optional","title":"Documentation Setup (Optional)","text":"<p>To build and serve documentation locally:</p> <pre><code># Install MkDocs and dependencies\npip install mkdocs\npip install mkdocs-material\npip install mkdocs-mermaid2-plugin\n\n# Serve documentation locally\nmkdocs serve\n</code></pre> <p>Access documentation at: <code>http://localhost:8000</code></p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-check-installation","title":"1. Check Installation","text":"<pre><code># Verify Python modules\npython -c \"import discord, yaml, anthropic; print('All modules imported successfully')\"\n\n# Run basic tests\nmake test-unit\n</code></pre>"},{"location":"getting-started/installation/#2-environment-setup","title":"2. Environment Setup","text":"<pre><code># Check required environment variables\necho $DISCORD_BOT_TOKEN\n</code></pre>"},{"location":"getting-started/installation/#3-system-test","title":"3. System Test","text":"<pre><code># Run orchestrator in test mode\npython scripts/orchestrator.py --help\n\n# Run Discord bot in test mode  \npython lib/discord_bot.py --help\n</code></pre>"},{"location":"getting-started/installation/#configuration-files","title":"Configuration Files","text":"<p>The system expects certain configuration files:</p>"},{"location":"getting-started/installation/#project-configuration-optional","title":"Project Configuration (Optional)","text":"<p>Create <code>config/projects.yaml</code>: <pre><code>projects:\n  - name: \"my_project\"\n    path: \"/path/to/project\"\n    orchestration: \"blocking\"\n</code></pre></p>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Required variables: <pre><code>export DISCORD_BOT_TOKEN=\"your_discord_bot_token\"\n</code></pre></p> <p>Optional variables: <pre><code>export HOSTNAME=\"your_hostname\"  # For Discord channel naming\nexport LOG_LEVEL=\"INFO\"          # Logging level\n</code></pre></p>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<pre><code># Use Windows paths\nset DISCORD_BOT_TOKEN=your_token\n\n# Activate virtual environment\nvenv\\Scripts\\activate\n\n# Run with Python\npython lib/discord_bot.py\n</code></pre>"},{"location":"getting-started/installation/#macoslinux","title":"macOS/Linux","text":"<pre><code># Use Unix paths\nexport DISCORD_BOT_TOKEN=\"your_token\"\n\n# Activate virtual environment\nsource venv/bin/activate\n\n# Run with Make\nmake run\n</code></pre>"},{"location":"getting-started/installation/#wsl-windows-subsystem-for-linux","title":"WSL (Windows Subsystem for Linux)","text":"<p>The system is fully compatible with WSL. Follow Linux instructions above.</p>"},{"location":"getting-started/installation/#docker-installation-alternative","title":"Docker Installation (Alternative)","text":"<p>For containerized deployment:</p> <pre><code>FROM python:3.9-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\nCMD [\"python\", \"lib/discord_bot.py\"]\n</code></pre> <pre><code># Build and run\ndocker build -t agent-workflow .\ndocker run -e DISCORD_BOT_TOKEN=\"your_token\" agent-workflow\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Permission Errors: <pre><code># Use user installation\npip install --user -r requirements.txt\n</code></pre></p> <p>Version Conflicts: <pre><code># Create clean virtual environment\npython -m venv fresh_venv\nsource fresh_venv/bin/activate\npip install -r requirements.txt\n</code></pre></p> <p>Discord.py Installation Issues: <pre><code># Update pip first\npip install --upgrade pip\n\n# Install with specific version\npip install discord.py==2.3.0\n</code></pre></p> <p>Import Errors: - Ensure virtual environment is activated - Check Python path includes project directory - Verify all dependencies installed correctly</p>"},{"location":"getting-started/installation/#dependency-issues","title":"Dependency Issues","text":"<p>If you encounter dependency conflicts:</p> <pre><code># Check installed packages\npip list\n\n# Create requirements lock file\npip freeze &gt; requirements-lock.txt\n\n# Clean install from lock file\npip install -r requirements-lock.txt\n</code></pre>"},{"location":"getting-started/installation/#performance-optimization","title":"Performance Optimization","text":"<p>For better performance:</p> <pre><code># Install with optimizations\npip install --upgrade pip setuptools wheel\n\n# Use faster package resolution\npip install --use-feature=fast-deps -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure Discord Bot</li> <li>Set up Project Configuration </li> <li>Try Quick Start Guide</li> <li>Read User Guide</li> </ol> <p>Installation Complete</p> <p>Your AI Agent TDD-Scrum Workflow system is now installed and ready for configuration!</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get the AI Agent TDD-Scrum Workflow system running in under 5 minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>Discord Bot Token (see Discord Setup)</li> <li>Git for cloning the repository</li> </ul>"},{"location":"getting-started/quick-start/#1-clone-and-install","title":"1. Clone and Install","text":"<pre><code># Clone the repository\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n\n# Install dependencies\nmake install\n</code></pre> <p>Or manually: <pre><code>pip install -r requirements.txt\n</code></pre></p>"},{"location":"getting-started/quick-start/#2-configure-environment","title":"2. Configure Environment","text":"<p>Set up your Discord bot token:</p> <pre><code>export DISCORD_BOT_TOKEN=\"your_discord_bot_token_here\"\n</code></pre> <p>Optional: AI Capabilities</p> <p>The system works without AI integration for testing. For full AI capabilities, you can integrate with Claude Code or other AI services.</p>"},{"location":"getting-started/quick-start/#3-run-the-system","title":"3. Run the System","text":""},{"location":"getting-started/quick-start/#option-a-discord-bot-recommended","title":"Option A: Discord Bot (Recommended)","text":"<pre><code>make run\n</code></pre> <p>This starts the Discord bot with the orchestrator backend.</p>"},{"location":"getting-started/quick-start/#option-b-orchestrator-only","title":"Option B: Orchestrator Only","text":"<pre><code>make orchestrator\n</code></pre> <p>This runs the orchestrator without Discord integration (useful for testing).</p>"},{"location":"getting-started/quick-start/#4-test-in-discord","title":"4. Test in Discord","text":"<ol> <li>Invite your bot to a Discord server</li> <li>Try basic commands:    <pre><code>/state\n/epic \"Build a todo app\"\n/approve\n/sprint plan\n/sprint start\n</code></pre></li> </ol>"},{"location":"getting-started/quick-start/#5-verify-installation","title":"5. Verify Installation","text":"<p>Run the test suite to ensure everything works:</p> <pre><code>make test\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Read the User Guide for complete command reference</li> <li>Configure Projects for multi-project setups</li> <li>Explore Workflows for common usage patterns</li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond to commands: - Verify <code>DISCORD_BOT_TOKEN</code> is set correctly - Check bot permissions in Discord server - Ensure bot is invited with appropriate scopes</p> <p>Import errors: - Run <code>make install</code> to ensure all dependencies are installed - Check Python version is 3.8+</p> <p>Tests failing: - Some tests require Discord token for integration tests - Use <code>make test-unit</code> to run only unit tests</p>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the <code>/state</code> command in Discord to see system status</li> <li>Review logs for error messages</li> <li>See Contributing Guide for support options</li> </ul> <p>You're Ready!</p> <p>Your AI Agent TDD-Scrum Workflow system is now running. Start with <code>/epic \"Your first project\"</code> in Discord!</p>"},{"location":"user-guide/hitl-commands/","title":"HITL Commands \u2013 Research-Mode AI Agent Scrum","text":"<p>Optimized for a solo product-owner/engineer who wants minimal ceremony and maximum momentum.</p>"},{"location":"user-guide/hitl-commands/#command-quick-reference","title":"Command Quick-Reference","text":"Verb Group Syntax Purpose /epic <code>/epic \"&lt;description&gt;\"</code> Define a new high-level initiative. /approve <code>/approve [ID ...]</code> Approve proposed stories or epics so they can enter a sprint. /sprint <code>/sprint plan [ID ...]</code> \u2013 plan next sprint<code>/sprint start</code> \u2013 kick off planned sprint<code>/sprint status</code> \u2013 progress snapshot<code>/sprint pause</code> \u2013 halt agent work<code>/sprint resume</code> \u2013 continue paused sprint Single verb for all sprint administration. /backlog <code>/backlog view product \\| sprint</code> \u2013 list items<code>/backlog view &lt;ITEM_ID&gt;</code> \u2013 show full item details<code>/backlog add_story \"&lt;desc&gt;\" --feature &lt;FEATURE_ID&gt;</code> \u2013 create story<code>/backlog remove &lt;ITEM_ID&gt;</code> \u2013 delete item<code>/backlog prioritize &lt;STORY_ID&gt; &lt;top|high|med|low&gt;</code> Manage product &amp; sprint backlog without leaving GitHub Projects. /request_changes <code>/request_changes \"&lt;description&gt;\"</code> Used on a PR to demand modifications. /suggest_fix <code>/suggest_fix \"&lt;description&gt;\"</code> Give the Code Agent a hint when stuck. /skip_task <code>/skip_task</code> Abandon the currently blocked task and move on. /feedback <code>/feedback \"&lt;description&gt;\"</code> General improvement notes after a sprint. /state <code>/state</code> \u2013 interactive view (allowed commands, diagram, matrix) Inspect current orchestrator state &amp; legal commands."},{"location":"user-guide/hitl-commands/#examples","title":"Examples","text":""},{"location":"user-guide/hitl-commands/#1-strategic-planning","title":"1. Strategic Planning","text":"<pre><code>/epic \"Build a modular authentication system\"\n</code></pre> <p>Orchestrator returns proposed stories <code>AUTH-1</code>, <code>AUTH-2</code>.</p> <pre><code>/approve AUTH-1 AUTH-2\n</code></pre>"},{"location":"user-guide/hitl-commands/#2-sprint-lifecycle","title":"2. Sprint Lifecycle","text":"<pre><code>/sprint plan AUTH-1 AUTH-2\n/sprint start\n</code></pre> <p>At any time: <pre><code>/sprint status\n/sprint pause   # emergency halt\n/sprint resume  # continue work\n</code></pre></p>"},{"location":"user-guide/hitl-commands/#3-backlog-grooming","title":"3. Backlog Grooming","text":"<pre><code>/backlog view product\n/backlog add_story \"As a user I can reset my password\" --feature AUTH\n/backlog prioritize AUTH-3 high\n</code></pre>"},{"location":"user-guide/hitl-commands/#4-review-debug","title":"4. Review &amp; Debug","text":"<pre><code>/request_changes \"Add duplicate-email guard in registration API\"\n/suggest_fix \"Database URL is wrong in config.py\"\n/skip_task   # after three failed CI attempts\n</code></pre>"},{"location":"user-guide/hitl-commands/#escalation-policy-research-mode","title":"Escalation Policy (Research Mode)","text":"<ol> <li>The Orchestrator escalates after three consecutive CI failures.</li> <li>Security-critical code requires explicit human approval.</li> <li>Agents time-box tasks to 30 min; longer tasks trigger a status ping.</li> </ol> <p>This lightweight command set keeps you focused on big-picture direction while agents handle the details.</p>"},{"location":"user-guide/hitl-commands/#state-awareness-invalid-commands","title":"State Awareness &amp; Invalid Commands","text":"<p>The orchestrator enforces a finite-state machine (see <code>command_state_machine.md</code>).</p> <ul> <li>Use <code>/state</code> at any time to:</li> <li>View the current state (e.g., <code>SPRINT_ACTIVE</code>).</li> <li>Click Allowed Commands \u2013 shows only the verbs valid right now.</li> <li>Click Diagram \u2013 in-chat SVG of the full state chart.</li> <li>Click Matrix \u2013 raw command\u2192state table.</li> </ul> <p>If you issue a command that is not legal for the current state, the bot replies with an error message:</p> <p>\u26a0\ufe0f Command <code>/sprint plan</code> is not allowed now (state: SPRINT_ACTIVE). Try <code>/sprint status</code>.</p> <p>No action is taken until a valid command is sent. </p>"},{"location":"user-guide/state-machine/","title":"Orchestrator Command State Machine","text":"<p>This document formalises when each slash-command is legal, how it changes the orchestrator's state, and the feedback pattern when a command is issued in an improper state.</p>"},{"location":"user-guide/state-machine/#1-top-level-states","title":"1. Top-Level States","text":"Key State Name Description IDLE Idle / Awaiting Vision No epic defined; waiting for <code>/epic</code> or backlog grooming. BACKLOG_READY Backlog Ready Stories exist in the product backlog, none selected for sprint. SPRINT_PLANNED Sprint Planned A sprint backlog has been drafted but not started. SPRINT_ACTIVE Sprint Active Agents are working on tasks. SPRINT_PAUSED Sprint Paused Active sprint is temporarily halted. SPRINT_REVIEW Sprint Review Sprint tasks done; PR awaiting user review. BLOCKED Blocked Task Sprint task failed CI 3\u00d7 and awaits user input. (Sub-state of <code>SPRINT_ACTIVE</code>.)"},{"location":"user-guide/state-machine/#2-command-state-matrix","title":"2. Command \u2192 State Matrix","text":"Command Allowed in States Resulting State <code>/epic</code> IDLE, BACKLOG_READY BACKLOG_READY <code>/approve</code> BACKLOG_READY BACKLOG_READY <code>/backlog *</code> Any (except SPRINT_REVIEW locked) (no change) <code>/sprint plan</code> BACKLOG_READY SPRINT_PLANNED <code>/sprint start</code> SPRINT_PLANNED SPRINT_ACTIVE <code>/sprint status</code> SPRINT_ACTIVE, SPRINT_PAUSED, BLOCKED (no change) <code>/sprint pause</code> SPRINT_ACTIVE SPRINT_PAUSED <code>/sprint resume</code> SPRINT_PAUSED SPRINT_ACTIVE <code>/request_changes</code> SPRINT_REVIEW BACKLOG_READY <code>/suggest_fix</code> BLOCKED SPRINT_ACTIVE <code>/skip_task</code> BLOCKED SPRINT_ACTIVE (next task) <code>/feedback</code> SPRINT_REVIEW IDLE <p>Commands issued outside their Allowed States trigger an error response (see \u00a74). <code>/backlog</code> commands are always safe but may show different context (product vs sprint). <code>BLOCKED</code> is transient: once the user responds the orchestrator returns to <code>SPRINT_ACTIVE</code> or skips forward.</p>"},{"location":"user-guide/state-machine/#3-mermaid-state-diagram","title":"3. Mermaid State Diagram","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nstateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; BACKLOG_READY : /epic\n    BACKLOG_READY --&gt; BACKLOG_READY : /approve\n    BACKLOG_READY --&gt; SPRINT_PLANNED : /sprint plan\n    SPRINT_PLANNED --&gt; SPRINT_ACTIVE : /sprint start\n    SPRINT_ACTIVE --&gt; SPRINT_PAUSED : /sprint pause\n    SPRINT_PAUSED --&gt; SPRINT_ACTIVE : /sprint resume\n    SPRINT_ACTIVE --&gt; BLOCKED : CI fails 3\u00d7\n    BLOCKED --&gt; SPRINT_ACTIVE : /suggest_fix | /skip_task\n    SPRINT_ACTIVE --&gt; SPRINT_REVIEW : all tasks done\n    SPRINT_REVIEW --&gt; BACKLOG_READY : /request_changes\n    SPRINT_REVIEW --&gt; IDLE : /feedback (retrospective complete)</code></pre>"},{"location":"user-guide/state-machine/#4-standardised-error-hint-response","title":"4. Standardised Error &amp; Hint Response","text":"<p>When a user issues an invalid command for the current state, the orchestrator must reply with:</p> <pre><code>{\n  \"type\": \"error\",\n  \"code\": \"INVALID_STATE\",\n  \"current_state\": \"SPRINT_ACTIVE\",\n  \"command\": \"/sprint plan\",\n  \"allowed_in\": [\"BACKLOG_READY\"],\n  \"hint\": \"Sprint already active. Use /sprint status or /sprint pause instead.\"\n}\n</code></pre> <p>In Discord this is rendered as:</p> <p>\u26a0\ufe0f Command <code>/sprint plan</code> is not allowed now (state: SPRINT_ACTIVE). Try <code>/sprint status</code> or <code>/sprint pause</code>.</p>"},{"location":"user-guide/state-machine/#5-implementation-notes","title":"5. Implementation Notes","text":"<ol> <li>Maintain state in orchestrator memory / lightweight DB keyed by guild or workspace.</li> <li>Expose a <code>/state</code> debug command (admin-only) to dump current finite-state and backlog summary.</li> <li>Unit-test the state machine with a table-driven test: <code>(state, command) \u2192 expected</code>.</li> <li>Extend easily: add columns/rows to matrix and diagram.</li> </ol> <p>This state machine keeps user interactions predictable and provides immediate, actionable feedback when mis-ordered commands occur. </p>"},{"location":"user-guide/user-profile/","title":"User Profile Context: Solo Engineer \u2192 Technical Orchestrator","text":""},{"location":"user-guide/user-profile/#1-persona-snapshot","title":"1. Persona Snapshot","text":"<ul> <li>Name (alias): Solo-Engineer-Manager (SEM)</li> <li>Current Role: Senior individual contributor owning several products across personal and client repos.</li> <li>Aspired Role: Technical orchestrator who delegates low-level implementation to specialist AI agents while focusing on architecture, product direction, and quality.</li> <li>Daily Time Budget: \u2264 2 hrs deep focus + adhoc reviews.</li> <li>Preferred Communication: Concise, decision-ready summaries; markdown tables over long prose; mermaid diagrams for flows.</li> </ul>"},{"location":"user-guide/user-profile/#2-core-goals","title":"2. Core Goals","text":"<ol> <li>Strategic Alignment \u2013 Spend \u2265 70 % of effort on roadmap definition, architecture, and cross-project coherence.</li> <li>Quality Gateway \u2013 Establish rock-solid automated tests &amp; CI so that merged code is production-ready with minimal manual QA.</li> <li>Throughput, not Tickets \u2013 Keep WIP \u2264 2 concurrent initiatives per project; finish before starting new work.</li> <li>Knowledge Scaling \u2013 Capture design decisions &amp; ADRs once, reuse across projects.</li> </ol>"},{"location":"user-guide/user-profile/#3-decision-boundaries-what-the-agents-decide-vs-what-sem-decides","title":"3. Decision Boundaries (What the Agents Decide vs. What SEM Decides)","text":"Area AI Agents Own SEM Retains Task decomposition Break story \u2192 tasks; propose PR titles Approve sprint scope Implementation Write &amp; refactor code/tests Approve architecture-significant changes Debug loop \u2264 3 autonomous attempts Guide after repeated failure Documentation Tech/User docs generation Final voice &amp; tone check Release Draft releases, changelogs Hit publish button <p>Agents should escalate when: * CI fails 3\u00d7 consecutively * Architectural decision alters public contracts * Security-sensitive code is touched</p>"},{"location":"user-guide/user-profile/#4-workflow-principles","title":"4. Workflow Principles","text":"<ol> <li>Trunk-Based Development with short-lived feature branches.</li> <li>TDD First: tests precede production code.</li> <li>Continuous Deployment gated by green CI.</li> <li>Automated Linters &amp; Formatters enforce style; no manual reviews for cosmetics.</li> <li>Backlog \u2260 Dumping Ground: every item must map to a quarterly objective.</li> </ol>"},{"location":"user-guide/user-profile/#5-key-performance-indicators","title":"5. Key Performance Indicators","text":"<ul> <li>PR cycle time \u2264 1 day.</li> <li>Mean time-to-restore (failing main) &lt; 30 min.</li> <li>Test coverage \u2265 90 % critical paths.</li> <li>Zero P1 bugs escaping to production per quarter.</li> </ul>"},{"location":"user-guide/user-profile/#6-tooling-integrations","title":"6. Tooling &amp; Integrations","text":"<ul> <li>Version Control: GitHub.</li> <li>CI/CD: GitHub Actions.</li> <li>Issue Tracking: GitHub Projects, epics \u2192 features \u2192 stories.</li> <li>Communication: Discord bot (#orchestrator) for agent updates.</li> <li>Observability: Sentry + Prometheus (planned).</li> </ul>"},{"location":"user-guide/user-profile/#7-preferred-output-formats-for-agents","title":"7. Preferred Output Formats for Agents","text":"<ul> <li>Status updates: <code>\ud83d\udcc8 Sprint X \u2013 3/5 tasks done, ETA: 2 days</code>.</li> <li>Decisions needed: <code>\u26a0\ufe0f Decision \u2013 PR #42 alters auth schema. Approve?</code>.</li> <li>Reports: Markdown bullet lists; diagrams in Mermaid.</li> </ul> <p>This profile should be loaded at orchestration start-up so every specialist agent inherits the same context &amp; escalation rules. </p>"},{"location":"user-guide/workflow-sequences/","title":"AI Agent Scrum Workflows \u2013 Research Mode (v3)","text":"<p>This file documents the core interaction patterns between the Product Owner (single user) and the AI-powered Orchestrator + specialist agents.</p>"},{"location":"user-guide/workflow-sequences/#1-main-workflow-lightweight-scrum-cycle","title":"1. Main Workflow: Lightweight Scrum Cycle","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"AI Agent Research Scrum Workflow\"\n\n    participant U as \"User (Product Owner)\"\n    participant BOT as \"Orchestrator (Scrum Master)\"\n    box \"Specialist Agents\"\n        participant QA as \"QA Agent\"\n        participant DEV as \"Code Agent\"\n        participant DOC as \"Doc Agent\"\n    end\n    participant GH as \"GitHub Repo\"\n    participant CI as \"CI Runner\"\n\n    %% == 1. Vision &amp; Backlog ==\n    U-&gt;&gt;BOT: /epic \"Build auth system\"\n    BOT-&gt;&gt;BOT: Decompose into candidate stories (AUTH-1, AUTH-2)\n    BOT--&gt;&gt;U: \"Proposed stories ready: [AUTH-1, AUTH-2]\"\n\n    U-&gt;&gt;BOT: /approve AUTH-1 AUTH-2\n    BOT-&gt;&gt;BOT: Add stories to product backlog\n\n    %% == 2. Sprint Planning ==\n    U-&gt;&gt;BOT: /sprint plan AUTH-1 AUTH-2\n    BOT--&gt;&gt;U: \"Sprint drafted: Auth \u2011 Basic\"\n    U-&gt;&gt;BOT: /sprint start\n\n    %% == 3. Sprint Execution ==\n    loop each task in Sprint\n        BOT-&gt;&gt;QA: \"Write failing tests for TASK\"\n        QA--&gt;&gt;BOT: test_task.py\n\n        BOT-&gt;&gt;DEV: \"Implement code to pass tests\" + test_task.py\n        DEV--&gt;&gt;BOT: patch.diff\n\n        BOT-&gt;&gt;GH: Push branch feat/TASK\n        GH-&gt;&gt;CI: run pytest &amp; lint\n        CI--&gt;&gt;BOT: report \u2714 / \u2716\n\n        alt Tests pass\n            BOT-&gt;&gt;DOC: \"Add docs for TASK\"\n            DOC--&gt;&gt;BOT: docs_update.md\n            BOT-&gt;&gt;GH: Commit docs_update.md\n        else Tests fail &amp; attempt &lt; 3\n            BOT-&gt;&gt;DEV: \"CI failed \u2013 please fix\"\n        else Tests fail after 3 attempts\n            BOT--&gt;&gt;U: \"TASK blocked\"  \\nOptions: /suggest_fix, /skip_task\n        end\n    end\n\n    %% == 4. Sprint Review ==\n    BOT-&gt;&gt;GH: Open PR \"auth-sprint\"\n    BOT--&gt;&gt;U: \"Sprint ready \u2013 please review PR #123\"\n    U-&gt;&gt;BOT: /request_changes \"Guard against duplicate emails\"\n    note over BOT: Changes become new backlog item.</code></pre>"},{"location":"user-guide/workflow-sequences/#2-backlog-management-flow","title":"2. Backlog Management Flow","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"Backlog Commands\"\n\n    participant U as \"User\"\n    participant BOT as \"Orchestrator\"\n\n    U-&gt;&gt;BOT: /backlog view product\n    BOT--&gt;&gt;U: List stories [AUTH-1, AUTH-2]\n\n    U-&gt;&gt;BOT: /backlog view AUTH-1\n    BOT--&gt;&gt;U: Full details AUTH-1\n\n    U-&gt;&gt;BOT: /backlog add_story \"As a user I can reset my password\" --feature AUTH\n    BOT--&gt;&gt;U: \"Story AUTH-3 created\"\n\n    U-&gt;&gt;BOT: /backlog prioritize AUTH-3 high\n    BOT--&gt;&gt;U: \"AUTH-3 priority set to high\"</code></pre>"},{"location":"user-guide/workflow-sequences/#3-sprint-control-commands","title":"3. Sprint Control Commands","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"Sprint Control\"\n\n    participant U as \"User\"\n    participant BOT as \"Orchestrator\"\n\n    Note over U,BOT: During an active sprint...\n\n    U-&gt;&gt;BOT: /sprint status\n    BOT--&gt;&gt;U: \"Sprint 'Auth-Basic': 2/4 tasks complete\"\n\n    U-&gt;&gt;BOT: /sprint pause\n    BOT-&gt;&gt;BOT: Freeze agent tasks\n    BOT--&gt;&gt;U: \"Sprint paused\"\n\n    U-&gt;&gt;BOT: /sprint resume\n    BOT-&gt;&gt;BOT: Resume tasks\n    BOT--&gt;&gt;U: \"Sprint resumed\"</code></pre>"},{"location":"user-guide/workflow-sequences/#4-debug-rework-loop-condensed","title":"4. Debug &amp; Rework Loop (Condensed)","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"Debug Loop\"\n\n    participant BOT as \"Orchestrator\"\n    participant DEV as \"Code Agent\"\n    participant GH as \"GitHub\"\n    participant CI as \"CI Runner\"\n    participant U as \"User\"\n\n    BOT-&gt;&gt;DEV: \"Fix CI failure (attempt 1)\"\n    loop Up to 3 attempts\n        DEV--&gt;&gt;BOT: patch.diff\n        BOT-&gt;&gt;GH: push\n        GH-&gt;&gt;CI: test\n        CI--&gt;&gt;BOT: \u2716\n        BOT-&gt;&gt;DEV: \"Fix again\"\n    end\n\n    BOT--&gt;&gt;U: \"Task blocked after 3 attempts\"\\nChoose: /suggest_fix or /skip_task</code></pre>"}]}