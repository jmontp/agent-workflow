{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI Agent TDD-Scrum Workflow","text":"<p>A sophisticated Human-In-The-Loop (HITL) orchestration framework that coordinates multiple specialized AI agents through a Discord interface, following a research-mode Scrum methodology optimized for solo engineers working with AI assistance.</p>"},{"location":"#overview","title":"Overview","text":"<p>This system implements a complete workflow for AI-assisted software development with proper human oversight and control. It combines the best practices of Test-Driven Development (TDD) and Scrum methodology, adapted for modern AI-assisted development scenarios.</p>"},{"location":"#how-it-works","title":"How It Works","text":"<pre><code>flowchart LR\n    You[\"\ud83d\udc68\u200d\ud83d\udcbb&lt;br/&gt;YOU\"] \n    Chat[\"\ud83d\udcac&lt;br/&gt;Discord&lt;br/&gt;Chat\"]\n    AI[\"\ud83e\udd16&lt;br/&gt;AI Team&lt;br/&gt;Helper\"]\n    Code[\"\ud83d\udcdd&lt;br/&gt;Your&lt;br/&gt;Project\"]\n\n    You --&gt;|\"Tell it what to build\"| Chat\n    Chat --&gt;|\"Coordinates\"| AI\n    AI --&gt;|\"Builds &amp; tests\"| Code\n    Code --&gt;|\"Shows you progress\"| You\n\n    style You fill:#e3f2fd,stroke:#1976d2,stroke-width:3px\n    style Chat fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    style AI fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    style Code fill:#fff3e0,stroke:#f57c00,stroke-width:2px</code></pre> <p>The Big Picture: You tell the system what you want to build through simple Discord messages. A team of AI agents collaborates to design, code, test, and improve your project while keeping you in control of every major decision.</p>"},{"location":"#detailed-system-architecture","title":"Detailed System Architecture","text":"<pre><code>graph TB\n    subgraph \"\ud83d\udc64 Solo Engineer\"\n        User[User]\n    end\n\n    subgraph DISCORD [\"\ud83c\udfae Discord Interface\"]\n        Discord[\"/epic /sprint /approve&lt;br/&gt;Slash Commands\"]\n        State[Interactive State&lt;br/&gt;Visualization]\n    end\n\n    subgraph WORKFLOW [\"\ud83e\udd16 TDD-Scrum Workflow System\"]\n        subgraph \"\ud83c\udf9b\ufe0f Control Layer\"\n            SM[Workflow State Machine&lt;br/&gt;IDLE - BACKLOG - SPRINT]\n            HITL[Approval Gates&lt;br/&gt;Strategic Decisions]\n            PM[Persistent Storage&lt;br/&gt;Epics - Stories - Tasks]\n        end\n\n        subgraph \"\ud83c\udfad Ephemeral Agents\"\n            Orch[\ud83c\udfad Orchestrator Agent&lt;br/&gt;Scrum Master&lt;br/&gt;spun up on demand]\n        end\n\n        subgraph \"\ud83d\udd04 TDD Execution Layer\"\n            TDD[TDD State Machine&lt;br/&gt;DESIGN - TEST - CODE - REFACTOR]\n            Design[\ud83c\udfa8 Design Agent&lt;br/&gt;Architecture and Specs]\n            QA[\ud83e\uddea Test Agent&lt;br/&gt;Write Tests First]\n            Code[\ud83d\udcbb Code Agent&lt;br/&gt;Make Tests Pass]\n            Data[\ud83d\udcca Analytics Agent&lt;br/&gt;Metrics and Coverage]\n        end\n    end\n\n    subgraph PROJECT [\"\ud83d\udcbe Your Project 1 to n\"]\n        Tests[\ud83e\uddea Test Suite&lt;br/&gt;RED - GREEN - REFACTOR]\n        Repo[\ud83d\udcc1 Git Repository&lt;br/&gt;Code &amp; Documentation]\n    end\n\n    User --&gt;|\"Commands\"| Discord\n    Discord &lt;--&gt;|\"Validates\"| SM\n    Discord --&gt;|\"Updates\"| State\n    State --&gt;|\"Progress\"| User\n\n    SM --&gt;|\"Spins up\"| Orch\n    Orch --&gt;|\"Decisions\"| SM\n    SM &lt;--&gt;|\"Enforces\"| HITL\n    SM &lt;--&gt;|\"Reads/Writes\"| PM\n\n    Orch --&gt;|\"Plans Sprint\"| PM\n    PM --&gt;|\"Assigns Story\"| TDD\n    TDD --&gt;|\"1 Design\"| Design\n    Design --&gt;|\"Specs\"| TDD\n    TDD --&gt;|\"2 Test\"| QA\n    QA --&gt;|\"Tests\"| Tests\n    TDD --&gt;|\"3 Code\"| Code\n    Code &lt;--&gt;|\"TDD Cycle\"| Tests\n    TDD --&gt;|\"4 Analyze\"| Data\n    Data --&gt;|\"Metrics\"| TDD\n\n    TDD --&gt;|\"Story Complete\"| SM\n    HITL &lt;--&gt;|\"Approvals\"| Discord\n\n    Code --&gt;|\"Commits\"| Repo\n    Tests --&gt;|\"Validates\"| Repo\n\n    style User fill:#e1f5fe,stroke:#0277bd,stroke-width:3px\n    style DISCORD fill:#f8f4ff,stroke:#7b1fa2,stroke-width:3px\n    style WORKFLOW fill:#f0f8f0,stroke:#388e3c,stroke-width:3px\n    style PROJECT fill:#fff8e1,stroke:#f57c00,stroke-width:3px\n    style Discord fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    style State fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px\n    style SM fill:#ff6b6b,stroke:#c92a2a,stroke-width:3px\n    style PM fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    style HITL fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    style Orch fill:#ffd43b,stroke:#fab005,stroke-width:3px\n    style TDD fill:#4dabf7,stroke:#1971c2,stroke-width:3px\n    style Design fill:#f1f8e9,stroke:#388e3c,stroke-width:2px\n    style QA fill:#ffebee,stroke:#d32f2f,stroke-width:3px\n    style Code fill:#e8f5e8,stroke:#388e3c,stroke-width:2px\n    style Data fill:#fce4ec,stroke:#c2185b,stroke-width:2px\n    style Tests fill:#ffebee,stroke:#d32f2f,stroke-width:3px\n    style Repo fill:#e3f2fd,stroke:#1976d2,stroke-width:2px</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Multi-Agent Coordination: Specialized AI agents for design, coding, testing, and data analysis</li> <li>Discord Integration: Complete HITL interface with slash commands and interactive UI</li> <li>State Machine: Enforced workflow states preventing invalid operations</li> <li>Multi-Project Support: Simultaneous orchestration across multiple projects</li> <li>Human Oversight: Approval gates for strategic decisions with escalation workflows</li> <li>Interactive Visualization: Real-time state inspection and command discovery</li> <li>Comprehensive Testing: Unit, integration, and E2E test coverage</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running in minutes:</p> <pre><code># Clone and install\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\nmake install\n\n# Configure\nexport DISCORD_BOT_TOKEN=\"your_token_here\"\n\n# Run\nmake run\n</code></pre> <p>\u2192 Detailed Installation Guide</p>"},{"location":"#core-workflow","title":"Core Workflow","text":"<p>The system follows a finite state machine with clear transitions:</p> <pre><code>stateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; BACKLOG_READY : /epic\n    BACKLOG_READY --&gt; SPRINT_PLANNED : /sprint plan\n    SPRINT_PLANNED --&gt; SPRINT_ACTIVE : /sprint start\n    SPRINT_ACTIVE --&gt; SPRINT_REVIEW : tasks complete\n    SPRINT_REVIEW --&gt; IDLE : /feedback\n    SPRINT_ACTIVE --&gt; SPRINT_PAUSED : /sprint pause\n    SPRINT_PAUSED --&gt; SPRINT_ACTIVE : /sprint resume\n    SPRINT_ACTIVE --&gt; BLOCKED : CI fails 3\u00d7\n    BLOCKED --&gt; SPRINT_ACTIVE : /suggest_fix</code></pre> <p>\u2192 Complete State Machine Reference</p>"},{"location":"#ai-agents","title":"AI Agents","text":"<p>Four specialized agents handle different aspects of development:</p>"},{"location":"#designagent","title":"DesignAgent","text":"<ul> <li>System architecture creation</li> <li>Component design and interfaces  </li> <li>Technical specifications</li> <li>Design review and validation</li> </ul>"},{"location":"#codeagent","title":"CodeAgent","text":"<ul> <li>Feature implementation</li> <li>Bug fixing and debugging</li> <li>Code refactoring</li> <li>Performance optimization</li> </ul>"},{"location":"#qaagent","title":"QAAgent","text":"<ul> <li>Test suite creation</li> <li>Quality validation</li> <li>Coverage analysis</li> <li>Performance testing</li> </ul>"},{"location":"#dataagent","title":"DataAgent","text":"<ul> <li>Data analysis and insights</li> <li>Pipeline creation</li> <li>Metrics reporting</li> <li>Visualization generation</li> </ul> <p>\u2192 Agent Capabilities Reference</p>"},{"location":"#essential-commands","title":"Essential Commands","text":"<p>Master these key slash commands in Discord:</p> Command Purpose Example <code>/epic</code> Define high-level initiatives <code>/epic \"Build authentication system\"</code> <code>/sprint plan</code> Plan sprint with stories <code>/sprint plan AUTH-1 AUTH-2</code> <code>/sprint start</code> Begin sprint execution <code>/sprint start</code> <code>/approve</code> Approve pending tasks <code>/approve AUTH-1 AUTH-2</code> <code>/state</code> Interactive state inspection <code>/state</code> <p>\u2192 Complete Command Reference</p>"},{"location":"#architecture","title":"Architecture","text":"<p>The system uses a clean layered architecture:</p> <ul> <li>Scripts Layer: Executable orchestrator entry points</li> <li>Library Layer: Core business logic and agents</li> <li>Interface Layer: Discord bot and external integrations</li> <li>Data Layer: State persistence and configuration</li> </ul> <p>\u2192 Detailed Architecture Documentation</p>"},{"location":"#testing-quality","title":"Testing &amp; Quality","text":"<p>Comprehensive testing strategy ensures reliability:</p> <ul> <li>Unit Tests: State machine validation and component testing</li> <li>Integration Tests: Orchestrator workflows and agent coordination  </li> <li>E2E Tests: Complete user scenarios and error handling</li> <li>Coverage Target: &gt;90% code coverage with automated reporting</li> </ul> <p>\u2192 Testing Strategy &amp; Implementation</p>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! The system is designed for extensibility:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Implement with tests</li> <li>Submit a pull request</li> </ol> <p>\u2192 Contributing Guidelines</p>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"Section Description Getting Started Installation, setup, and first steps User Guide Commands, workflows, and daily usage Concepts System design and core principles Advanced Detailed technical documentation Deployment Production setup and configuration <p>Getting Help</p> <ul> <li>Check the Command Reference for syntax</li> <li>Use <code>/state</code> in Discord to see available commands</li> <li>Review Common Workflows for examples</li> <li>See Troubleshooting for issues</li> </ul>"},{"location":"advanced/architecture-detailed/","title":"Architecture Overview","text":"<p>The AI Agent TDD-Scrum Workflow system follows a clean, layered architecture designed for scalability, maintainability, and extensibility.</p>"},{"location":"advanced/architecture-detailed/#two-repository-model","title":"Two-Repository Model","text":"<p>The system operates on a clear separation between orchestration and project concerns:</p>"},{"location":"advanced/architecture-detailed/#orchestration-repository-this-repo","title":"Orchestration Repository (this repo)","text":"<ul> <li>Purpose: Central framework for AI agent coordination</li> <li>Contents: Agent definitions, workflow engine, Discord bot, security policies</li> <li>Scope: Global across all managed projects</li> <li>Lifecycle: Long-lived, evolves with framework capabilities</li> </ul>"},{"location":"advanced/architecture-detailed/#project-repositories-1-to-n","title":"Project Repositories (1 to n)","text":"<ul> <li>Purpose: Individual codebases being developed with AI assistance</li> <li>Contents: Project code + embedded workflow data in <code>.orch-state/</code></li> <li>Scope: Project-specific data and state</li> <li>Lifecycle: Tied to project development lifecycle</li> </ul> <p>This separation ensures: - Data Ownership: Project data stays with the project code - Version Control: Project management data versioned with code changes - Portability: Projects can move between orchestration instances - Security: Clear boundaries between global and project-specific access</p>"},{"location":"advanced/architecture-detailed/#system-architecture","title":"System Architecture","text":"<pre><code>graph TB\n    subgraph \"User Interface Layer\"\n        Discord[Discord Bot Interface]\n        CLI[Command Line Interface]\n    end\n\n    subgraph \"Application Layer\"\n        Orch[Orchestrator]\n        SM[State Machine]\n        Commands[Command Handlers]\n    end\n\n    subgraph \"Domain Layer\"\n        Agents[AI Agent Library]\n        Tasks[Task Management]\n        Projects[Project Management]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        State[State Persistence]\n        Config[Configuration]\n        Logging[Logging &amp; Monitoring]\n    end\n\n    Discord --&gt; Orch\n    CLI --&gt; Orch\n    Orch --&gt; SM\n    Orch --&gt; Commands\n    Commands --&gt; Agents\n    Commands --&gt; Tasks\n    Commands --&gt; Projects\n    Agents --&gt; State\n    Projects --&gt; State\n    Orch --&gt; Config\n    Orch --&gt; Logging</code></pre>"},{"location":"advanced/architecture-detailed/#core-principles","title":"Core Principles","text":""},{"location":"advanced/architecture-detailed/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each layer has distinct responsibilities: - Interface Layer: User interaction and external communication - Application Layer: Workflow orchestration and business logic - Domain Layer: Core business entities and AI agent coordination - Infrastructure Layer: Data persistence, configuration, and cross-cutting concerns</p>"},{"location":"advanced/architecture-detailed/#2-finite-state-machine","title":"2. Finite State Machine","text":"<p>The system enforces a strict state machine to ensure workflow integrity: - Prevents invalid command sequences - Provides clear error messages and hints - Enables state visualization and debugging</p>"},{"location":"advanced/architecture-detailed/#3-event-driven-architecture","title":"3. Event-Driven Architecture","text":"<p>Components communicate through well-defined events: - Command execution triggers state transitions - Agent completion events update project status - Human approval events unblock workflows</p>"},{"location":"advanced/architecture-detailed/#4-plugin-architecture","title":"4. Plugin Architecture","text":"<p>Agents are designed as pluggable components: - Common base interface for all agents - Easy to add new specialized agents - Configurable agent behavior per project</p>"},{"location":"advanced/architecture-detailed/#directory-structure","title":"Directory Structure","text":"<pre><code>agent-workflow/\n\u251c\u2500\u2500 docs_src/           # MkDocs documentation source\n\u251c\u2500\u2500 docs/              # Original documentation files\n\u251c\u2500\u2500 scripts/           # Executable entry points\n\u2502   \u2514\u2500\u2500 orchestrator.py\n\u251c\u2500\u2500 lib/               # Core library code\n\u2502   \u251c\u2500\u2500 agents/        # AI agent implementations\n\u2502   \u251c\u2500\u2500 state_machine.py\n\u2502   \u2514\u2500\u2500 discord_bot.py\n\u251c\u2500\u2500 tests/             # Test suite\n\u2502   \u251c\u2500\u2500 unit/         # Unit tests\n\u2502   \u251c\u2500\u2500 integration/  # Integration tests\n\u2502   \u2514\u2500\u2500 conftest.py   # Test configuration\n\u251c\u2500\u2500 requirements.txt   # Dependencies\n\u251c\u2500\u2500 mkdocs.yml        # Documentation configuration\n\u251c\u2500\u2500 Makefile          # Build automation\n\u2514\u2500\u2500 README.md         # Project overview\n</code></pre>"},{"location":"advanced/architecture-detailed/#component-interaction","title":"Component Interaction","text":""},{"location":"advanced/architecture-detailed/#1-command-flow","title":"1. Command Flow","text":"<pre><code>sequenceDiagram\n    participant User\n    participant Discord\n    participant Orchestrator\n    participant StateMachine\n    participant Agent\n\n    User-&gt;&gt;Discord: /epic \"Build auth system\"\n    Discord-&gt;&gt;Orchestrator: handle_command()\n    Orchestrator-&gt;&gt;StateMachine: validate_command()\n    StateMachine--&gt;&gt;Orchestrator: validation_result\n    Orchestrator-&gt;&gt;Agent: dispatch_task()\n    Agent--&gt;&gt;Orchestrator: task_result\n    Orchestrator-&gt;&gt;StateMachine: transition_state()\n    Orchestrator--&gt;&gt;Discord: command_response\n    Discord--&gt;&gt;User: Success message</code></pre>"},{"location":"advanced/architecture-detailed/#2-state-management","title":"2. State Management","text":"<ul> <li>Centralized State: Single source of truth in orchestrator</li> <li>Persistent Storage: State saved to <code>.orch-state/status.json</code></li> <li>State Recovery: System recovers state on restart</li> <li>Multi-Project: Independent state machines per project</li> </ul>"},{"location":"advanced/architecture-detailed/#3-agent-coordination","title":"3. Agent Coordination","text":"<ul> <li>Task Queue: Orchestrator maintains task queues per project</li> <li>Retry Logic: Automatic retry with exponential backoff</li> <li>Human Escalation: HITL approval after 3 failed attempts</li> <li>Parallel Execution: Multiple agents can work simultaneously</li> </ul>"},{"location":"advanced/architecture-detailed/#design-patterns","title":"Design Patterns","text":""},{"location":"advanced/architecture-detailed/#1-command-pattern","title":"1. Command Pattern","text":"<p>Each user command is encapsulated as a command object: - Enables undo/redo functionality - Facilitates command logging and auditing - Allows command queuing and batch processing</p>"},{"location":"advanced/architecture-detailed/#2-state-pattern","title":"2. State Pattern","text":"<p>Workflow states encapsulate behavior: - Each state defines allowed commands - State transitions are explicit and validated - Easy to add new states and transitions</p>"},{"location":"advanced/architecture-detailed/#3-strategy-pattern","title":"3. Strategy Pattern","text":"<p>Agent implementations use strategy pattern: - Agents can be swapped at runtime - Different strategies for different project types - Easy A/B testing of agent behaviors</p>"},{"location":"advanced/architecture-detailed/#4-observer-pattern","title":"4. Observer Pattern","text":"<p>Event-driven communication between components: - Loose coupling between layers - Easy to add new event handlers - Supports monitoring and debugging</p>"},{"location":"advanced/architecture-detailed/#scalability-considerations","title":"Scalability Considerations","text":""},{"location":"advanced/architecture-detailed/#1-horizontal-scaling","title":"1. Horizontal Scaling","text":"<ul> <li>Multiple orchestrator instances can run simultaneously</li> <li>Discord bot can be load-balanced</li> <li>Agent execution can be distributed</li> </ul>"},{"location":"advanced/architecture-detailed/#2-performance-optimization","title":"2. Performance Optimization","text":"<ul> <li>Async/await throughout for I/O operations</li> <li>Caching of frequently accessed data</li> <li>Batch processing of similar tasks</li> </ul>"},{"location":"advanced/architecture-detailed/#3-resource-management","title":"3. Resource Management","text":"<ul> <li>Connection pooling for external services</li> <li>Rate limiting for API calls</li> <li>Memory-efficient state storage</li> </ul>"},{"location":"advanced/architecture-detailed/#security-architecture","title":"Security Architecture","text":"<p>The system implements comprehensive security through multiple layers of protection. See Security Implementation for detailed information.</p>"},{"location":"advanced/architecture-detailed/#1-agent-security-model","title":"1. Agent Security Model","text":"<ul> <li>Command Access Control: Each agent type has restricted tool access</li> <li>Principle of Least Privilege: Agents can only access necessary tools</li> <li>Automatic Enforcement: Security boundaries applied via Claude Code CLI flags</li> </ul>"},{"location":"advanced/architecture-detailed/#2-authentication-authorization","title":"2. Authentication &amp; Authorization","text":"<ul> <li>Discord bot token authentication</li> <li>Role-based access control in Discord</li> <li>Project-level permission isolation</li> <li>Agent-specific security profiles</li> </ul>"},{"location":"advanced/architecture-detailed/#3-data-protection","title":"3. Data Protection","text":"<ul> <li>No sensitive data stored in state files</li> <li>Environment variables for secrets</li> <li>Audit logging of all commands and agent tool usage</li> <li>State file access controls</li> </ul>"},{"location":"advanced/architecture-detailed/#extensibility-points","title":"Extensibility Points","text":""},{"location":"advanced/architecture-detailed/#1-custom-agents","title":"1. Custom Agents","text":"<pre><code>class CustomAgent(BaseAgent):\n    def __init__(self):\n        super().__init__(\n            name=\"CustomAgent\",\n            capabilities=[\"custom_capability\"]\n        )\n\n    async def run(self, task, dry_run=False):\n        # Custom implementation\n        pass\n</code></pre>"},{"location":"advanced/architecture-detailed/#2-custom-commands","title":"2. Custom Commands","text":"<p>Add new slash commands by extending the Discord bot: <pre><code>@app_commands.command(name=\"custom\", description=\"Custom command\")\nasync def custom_command(self, interaction, param: str):\n    # Custom command implementation\n    pass\n</code></pre></p>"},{"location":"advanced/architecture-detailed/#3-custom-states","title":"3. Custom States","text":"<p>Extend the state machine with new workflow states: <pre><code>class CustomState(Enum):\n    CUSTOM_STATE = \"CUSTOM_STATE\"\n</code></pre></p>"},{"location":"advanced/architecture-detailed/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"advanced/architecture-detailed/#1-logging-strategy","title":"1. Logging Strategy","text":"<ul> <li>Structured logging with JSON format</li> <li>Different log levels per component</li> <li>Centralized log aggregation ready</li> </ul>"},{"location":"advanced/architecture-detailed/#2-metrics-collection","title":"2. Metrics Collection","text":"<ul> <li>Command execution metrics</li> <li>Agent performance metrics</li> <li>State transition tracking</li> </ul>"},{"location":"advanced/architecture-detailed/#3-health-checks","title":"3. Health Checks","text":"<ul> <li>Discord bot connectivity</li> <li>Agent responsiveness</li> <li>State persistence availability</li> </ul> <p>Architecture Evolution</p> <p>This architecture is designed to evolve with the system's needs. New patterns and components can be added while maintaining backward compatibility.</p>"},{"location":"advanced/code/","title":"C4 Code Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"advanced/code/#state-machine-class-structure","title":"State Machine Class Structure","text":"<pre><code>classDiagram\n    class StateMachine {\n        +current_state: State\n        +validate_command(command: Command) bool\n        +transition(command: Command) State\n        +get_allowed_commands() List[Command]\n        +get_state_diagram() str\n    }\n\n    class State {\n        &lt;&lt;enumeration&gt;&gt;\n        IDLE\n        BACKLOG_READY\n        SPRINT_PLANNED\n        SPRINT_ACTIVE\n        SPRINT_PAUSED\n        SPRINT_REVIEW\n        BLOCKED\n    }\n\n    class Command {\n        +name: str\n        +args: Dict\n        +validate() bool\n        +execute() Result\n    }\n\n    StateMachine --&gt; State\n    StateMachine --&gt; Command</code></pre>"},{"location":"advanced/code/#agent-class-hierarchy","title":"Agent Class Hierarchy","text":"<pre><code>classDiagram\n    class BaseAgent {\n        &lt;&lt;abstract&gt;&gt;\n        +name: str\n        +capabilities: List[str]\n        +run(task: Task, dry: bool) Result\n        +validate_task(task: Task) bool\n        +get_status() AgentStatus\n    }\n\n    class DesignAgent {\n        +run(task: Task, dry: bool) Result\n        +create_architecture(requirements: str) str\n        +review_design(design: str) str\n    }\n\n    class CodeAgent {\n        +run(task: Task, dry: bool) Result\n        +implement_feature(spec: str) str\n        +fix_bug(issue: str) str\n        +refactor_code(target: str) str\n    }\n\n    class QAAgent {\n        +run(task: Task, dry: bool) Result\n        +write_tests(spec: str) str\n        +run_tests(code: str) TestResult\n        +validate_implementation(code: str) ValidationResult\n    }\n\n    class DataAgent {\n        +run(task: Task, dry: bool) Result\n        +analyze_data(dataset: str) str\n        +create_pipeline(spec: str) str\n    }\n\n    BaseAgent &lt;|-- DesignAgent\n    BaseAgent &lt;|-- CodeAgent\n    BaseAgent &lt;|-- QAAgent\n    BaseAgent &lt;|-- DataAgent</code></pre>"},{"location":"advanced/code/#orchestrator-core-classes","title":"Orchestrator Core Classes","text":"<pre><code>classDiagram\n    class Orchestrator {\n        +projects: Dict[str, Project]\n        +agents: Dict[str, BaseAgent]\n        +state_machine: StateMachine\n        +handle_command(command: Command) Result\n        +dispatch_task(task: Task) Result\n        +escalate_to_human(task: Task) ApprovalRequest\n    }\n\n    class Project {\n        +name: str\n        +path: Path\n        +state: ProjectState\n        +orchestration_mode: OrchestrationMode\n        +load_state() ProjectState\n        +save_state(state: ProjectState) void\n    }\n\n    class ProjectState {\n        +current_state: State\n        +active_tasks: List[Task]\n        +pending_approvals: List[ApprovalRequest]\n        +sprint_backlog: List[Story]\n        +product_backlog: List[Story]\n    }\n\n    class Task {\n        +id: str\n        +agent_type: str\n        +command: str\n        +status: TaskStatus\n        +retry_count: int\n        +created_at: datetime\n    }\n\n    Orchestrator --&gt; Project\n    Project --&gt; ProjectState\n    ProjectState --&gt; Task\n    Orchestrator --&gt; StateMachine\n    Orchestrator --&gt; BaseAgent</code></pre>"},{"location":"advanced/code/#discord-bot-classes","title":"Discord Bot Classes","text":"<pre><code>classDiagram\n    class DiscordBot {\n        +orchestrator: Orchestrator\n        +client: discord.Client\n        +handle_slash_command(interaction: Interaction) void\n        +send_notification(message: str, channel: str) void\n        +create_interactive_view(state: State) discord.View\n    }\n\n    class CommandHandler {\n        +parse_command(interaction: Interaction) Command\n        +validate_command(command: Command) bool\n        +execute_command(command: Command) Result\n    }\n\n    class StateView {\n        +state: State\n        +create_buttons() List[discord.Button]\n        +create_embed() discord.Embed\n        +handle_button_click(interaction: Interaction) void\n    }\n\n    class NotificationManager {\n        +send_approval_request(request: ApprovalRequest) void\n        +send_status_update(project: str, status: str) void\n        +send_error_notification(error: Exception) void\n    }\n\n    DiscordBot --&gt; CommandHandler\n    DiscordBot --&gt; StateView\n    DiscordBot --&gt; NotificationManager\n    DiscordBot --&gt; Orchestrator</code></pre>"},{"location":"advanced/component/","title":"C4 Component Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"advanced/component/#component-architecture","title":"Component Architecture","text":""},{"location":"advanced/component/#discord-bot-components","title":"Discord Bot Components","text":"<pre><code>C4Component\n    title Discord Bot Components\n\n    Container_Boundary(discord_bot, \"Discord Bot\") {\n        Component(command_parser, \"Command Parser\", \"Parse and validate slash commands\")\n        Component(state_visualizer, \"State Visualizer\", \"Generate interactive state diagrams\")\n        Component(notification_manager, \"Notification Manager\", \"Send alerts and status updates\")\n        Component(button_handler, \"Button Handler\", \"Handle interactive UI elements\")\n    }\n\n    Container(orchestrator, \"Orchestrator\", \"Core coordination logic\")\n    System_Ext(discord_api, \"Discord API\")\n\n    Rel(discord_api, command_parser, \"Slash command events\")\n    Rel(command_parser, orchestrator, \"Validated commands\")\n    Rel(orchestrator, state_visualizer, \"State data\")\n    Rel(state_visualizer, discord_api, \"Interactive messages\")\n    Rel(orchestrator, notification_manager, \"Status updates\")\n    Rel(notification_manager, discord_api, \"Notifications\")\n    Rel(button_handler, orchestrator, \"User interactions\")</code></pre>"},{"location":"advanced/component/#orchestrator-components","title":"Orchestrator Components","text":"<pre><code>C4Component\n    title Orchestrator Components\n\n    Container_Boundary(orchestrator, \"Orchestrator\") {\n        Component(state_machine, \"State Machine\", \"Enforce command transitions\")\n        Component(project_manager, \"Project Manager\", \"Multi-project coordination\")\n        Component(task_dispatcher, \"Task Dispatcher\", \"Agent task coordination\")\n        Component(approval_gate, \"Approval Gate\", \"HITL workflow management\")\n        Component(retry_logic, \"Retry Logic\", \"3-attempt failure handling\")\n    }\n\n    Container(agent_lib, \"Agent Library\")\n    Container(state_store, \"State Store\")\n    Container(discord_bot, \"Discord Bot\")\n\n    Rel(discord_bot, state_machine, \"Command validation\")\n    Rel(state_machine, project_manager, \"Valid state transitions\")\n    Rel(project_manager, task_dispatcher, \"Task assignment\")\n    Rel(task_dispatcher, agent_lib, \"Agent execution\")\n    Rel(approval_gate, discord_bot, \"Approval requests\")\n    Rel(retry_logic, approval_gate, \"Escalation after 3 failures\")\n    Rel(project_manager, state_store, \"Persist state\")</code></pre>"},{"location":"advanced/component/#agent-library-components","title":"Agent Library Components","text":"<pre><code>C4Component\n    title Agent Library Components\n\n    Container_Boundary(agent_lib, \"Agent Library\") {\n        Component(base_agent, \"Base Agent\", \"Common agent interface\")\n        Component(design_agent, \"Design Agent\", \"Architecture decisions\")\n        Component(code_agent, \"Code Agent\", \"Implementation tasks\")\n        Component(qa_agent, \"QA Agent\", \"Testing and validation\")\n        Component(data_agent, \"Data Agent\", \"Data processing\")\n        Component(anthropic_client, \"Anthropic Client\", \"AI model integration\")\n        Component(github_client, \"GitHub Client\", \"Repository operations\")\n    }\n\n    System_Ext(anthropic_api, \"Anthropic API\")\n    System_Ext(github_api, \"GitHub API\")\n\n    Rel(base_agent, design_agent, \"Inheritance\")\n    Rel(base_agent, code_agent, \"Inheritance\")\n    Rel(base_agent, qa_agent, \"Inheritance\")\n    Rel(base_agent, data_agent, \"Inheritance\")\n    Rel(design_agent, anthropic_client, \"AI requests\")\n    Rel(code_agent, anthropic_client, \"AI requests\")\n    Rel(code_agent, github_client, \"Code commits\")\n    Rel(anthropic_client, anthropic_api, \"API calls\")\n    Rel(github_client, github_api, \"Repository operations\")</code></pre>"},{"location":"advanced/container/","title":"C4 Container Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"advanced/container/#container-architecture","title":"Container Architecture","text":"<pre><code>C4Container\n    title Container Diagram - AI Agent Workflow System\n\n    Person(user, \"Product Owner\", \"Solo developer\")\n\n    System_Boundary(system, \"AI Agent Workflow System\") {\n        Container(discord_bot, \"Discord Bot\", \"Python, discord.py\", \"Command interface, state visualization, notifications\")\n        Container(orchestrator, \"Orchestrator\", \"Python, asyncio\", \"Central coordination, state machine, project management\")\n        Container(agent_lib, \"Agent Library\", \"Python, anthropic\", \"Specialized AI agents (Design, Code, Data, QA)\")\n        Container(state_store, \"State Store\", \"JSON files\", \"Project state, task queues, approval gates\")\n        Container(config, \"Configuration\", \"YAML\", \"Project definitions, orchestration modes\")\n    }\n\n    System_Ext(discord_api, \"Discord API\", \"Real-time messaging platform\")\n    System_Ext(github_api, \"GitHub API\", \"Repository and CI/CD integration\")\n    System_Ext(anthropic_api, \"Anthropic API\", \"Claude AI models\")\n\n    Rel(user, discord_api, \"Slash commands, interactions\")\n    Rel(discord_api, discord_bot, \"Webhook events, API calls\")\n    Rel(discord_bot, orchestrator, \"Command dispatch, state queries\")\n    Rel(orchestrator, agent_lib, \"Task execution requests\")\n    Rel(orchestrator, state_store, \"Read/write project state\")\n    Rel(orchestrator, config, \"Load project definitions\")\n    Rel(agent_lib, anthropic_api, \"AI model requests\")\n    Rel(agent_lib, github_api, \"Code commits, PR creation\")</code></pre>"},{"location":"advanced/container/#container-responsibilities","title":"Container Responsibilities","text":""},{"location":"advanced/container/#discord-bot","title":"Discord Bot","text":"<ul> <li>Parse and validate slash commands</li> <li>Implement interactive state visualization</li> <li>Send notifications and approval requests</li> <li>Handle user interactions and buttons</li> </ul>"},{"location":"advanced/container/#orchestrator","title":"Orchestrator","text":"<ul> <li>Enforce state machine transitions</li> <li>Coordinate multi-agent workflows</li> <li>Implement HITL approval gates</li> <li>Manage project lifecycle</li> </ul>"},{"location":"advanced/container/#agent-library","title":"Agent Library","text":"<ul> <li>Specialized agent implementations</li> <li>Anthropic API integration</li> <li>Code generation and testing</li> <li>GitHub operations</li> </ul>"},{"location":"advanced/container/#state-store","title":"State Store","text":"<ul> <li>Persist workflow state across restarts</li> <li>Track task queues and approvals</li> <li>Maintain project status</li> </ul>"},{"location":"advanced/container/#configuration","title":"Configuration","text":"<ul> <li>Define project orchestration modes</li> <li>Configure agent behaviors</li> <li>Set approval thresholds</li> </ul>"},{"location":"advanced/context/","title":"C4 Context Diagram - AI Agent TDD-Scrum Workflow","text":""},{"location":"advanced/context/#system-context","title":"System Context","text":"<pre><code>C4Context\n    title System Context - AI Agent TDD-Scrum Workflow\n\n    Person(user, \"Product Owner/Engineer\", \"Solo developer using AI agents for software development\")\n\n    System_Boundary(system, \"AI Agent Workflow System\") {\n        System(orchestrator, \"Agent Orchestrator\", \"Coordinates multiple AI agents through HITL workflow\")\n    }\n\n    System_Ext(discord, \"Discord\", \"Primary interface for human interaction and approval\")\n    System_Ext(github, \"GitHub\", \"Source code repository and CI/CD\")\n    System_Ext(anthropic, \"Anthropic API\", \"AI agent capabilities\")\n\n    Rel(user, discord, \"Issues commands, approves tasks\")\n    Rel(discord, orchestrator, \"Command execution, notifications\")\n    Rel(orchestrator, github, \"Code changes, PR management\")\n    Rel(orchestrator, anthropic, \"Agent task execution\")\n    Rel(github, user, \"Code review, CI feedback\")</code></pre>"},{"location":"advanced/context/#key-interactions","title":"Key Interactions","text":"<ol> <li>User \u2192 Discord: Issues slash commands (<code>/epic</code>, <code>/sprint</code>, <code>/approve</code>)</li> <li>Discord \u2192 Orchestrator: Command parsing and state transitions</li> <li>Orchestrator \u2192 Agents: Task dispatch and coordination</li> <li>Agents \u2192 GitHub: Code implementation and PR creation</li> <li>GitHub \u2192 User: CI results and code review</li> <li>User Approval Loop: HITL gates for strategic decisions</li> </ol>"},{"location":"advanced/data-flow/","title":"Data Flow Architecture","text":"<p>This document describes how data flows between the orchestration repository and project repositories in the two-repository model.</p>"},{"location":"advanced/data-flow/#overview","title":"Overview","text":"<p>The AI Agent TDD-Scrum workflow system operates on a clear separation between: - Orchestration Repository: Central framework and coordination - Project Repositories: Individual codebases with embedded project management data</p>"},{"location":"advanced/data-flow/#data-flow-patterns","title":"Data Flow Patterns","text":""},{"location":"advanced/data-flow/#1-project-registration-flow","title":"1. Project Registration Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant D as Discord Bot\n    participant O as Orchestrator\n    participant P as Project Repo\n    participant G as Git\n\n    U-&gt;&gt;D: /project register &lt;path&gt;\n    D-&gt;&gt;D: Validate path exists\n    D-&gt;&gt;D: Check if git repository\n    D-&gt;&gt;D: Verify no existing channel\n    D-&gt;&gt;P: Initialize .orch-state/\n    P-&gt;&gt;P: Create directory structure\n    P-&gt;&gt;P: Create template files\n    D-&gt;&gt;D: Create Discord channel\n    D-&gt;&gt;O: Register project\n    O-&gt;&gt;O: Add to project registry\n    D-&gt;&gt;U: Registration complete</code></pre>"},{"location":"advanced/data-flow/#2-command-execution-flow","title":"2. Command Execution Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant D as Discord Bot\n    participant O as Orchestrator\n    participant SM as State Machine\n    participant A as Agent\n    participant P as Project Repo\n\n    U-&gt;&gt;D: /epic \"New feature\"\n    D-&gt;&gt;O: Route command to project\n    O-&gt;&gt;SM: Validate against state\n    SM-&gt;&gt;O: Command allowed\n    O-&gt;&gt;A: Create epic task\n    A-&gt;&gt;P: Read current backlog.json\n    P-&gt;&gt;A: Return project data\n    A-&gt;&gt;A: Create epic object\n    A-&gt;&gt;P: Write updated backlog.json\n    A-&gt;&gt;O: Task complete\n    O-&gt;&gt;D: Success response\n    D-&gt;&gt;U: Epic created notification</code></pre>"},{"location":"advanced/data-flow/#3-sprint-management-flow","title":"3. Sprint Management Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant D as Discord Bot\n    participant O as Orchestrator\n    participant P as Project Repo\n\n    U-&gt;&gt;D: /sprint plan\n    D-&gt;&gt;O: Route to project\n    O-&gt;&gt;P: Read backlog.json\n    P-&gt;&gt;O: Return stories\n    O-&gt;&gt;P: Create sprint in sprints/\n    P-&gt;&gt;P: Write sprint-xxx.json\n    O-&gt;&gt;P: Update story assignments\n    P-&gt;&gt;P: Update backlog.json\n    O-&gt;&gt;D: Sprint plan complete\n    D-&gt;&gt;U: Show sprint details</code></pre>"},{"location":"advanced/data-flow/#data-storage-patterns","title":"Data Storage Patterns","text":""},{"location":"advanced/data-flow/#orchestration-repository","title":"Orchestration Repository","text":"<pre><code>agent-workflow/\n\u251c\u2500\u2500 lib/\n\u2502   \u251c\u2500\u2500 agents/              # Agent definitions (global)\n\u2502   \u251c\u2500\u2500 state_machine.py     # Workflow states (global)\n\u2502   \u251c\u2500\u2500 discord_bot.py       # Interface (global)\n\u2502   \u2514\u2500\u2500 agent_tool_config.py # Security policies (global)\n\u251c\u2500\u2500 scripts/\n\u2502   \u2514\u2500\u2500 orchestrator.py      # Coordination engine (global)\n\u2514\u2500\u2500 docs_src/               # Framework documentation (global)\n</code></pre>"},{"location":"advanced/data-flow/#project-repository","title":"Project Repository","text":"<pre><code>project-repo/\n\u251c\u2500\u2500 src/                    # Project code (project-specific)\n\u251c\u2500\u2500 tests/                  # Project tests (project-specific)\n\u251c\u2500\u2500 .orch-state/           # Workflow data (project-specific)\n\u2502   \u251c\u2500\u2500 backlog.json       # Project management data\n\u2502   \u251c\u2500\u2500 sprints/           # Sprint history\n\u2502   \u251c\u2500\u2500 architecture.md    # Project architecture decisions\n\u2502   \u251c\u2500\u2500 best-practices.md  # Project conventions\n\u2502   \u2514\u2500\u2500 status.json        # Current workflow state\n\u2514\u2500\u2500 .git/                  # Version control (project-specific)\n</code></pre>"},{"location":"advanced/data-flow/#readwrite-access-patterns","title":"Read/Write Access Patterns","text":""},{"location":"advanced/data-flow/#read-operations","title":"Read Operations","text":"<ul> <li>Orchestrator \u2192 Project: Reads state, backlog, and configuration</li> <li>Discord Bot \u2192 Project: Displays current status and history</li> <li>Agents \u2192 Project: Access context for decision making</li> </ul>"},{"location":"advanced/data-flow/#write-operations","title":"Write Operations","text":"<ul> <li>Orchestrator \u2192 Project: Updates state and project data</li> <li>Agents \u2192 Project: Persist task results and changes</li> <li>Discord Commands \u2192 Project: Modify backlogs and sprints</li> </ul>"},{"location":"advanced/data-flow/#security-boundaries","title":"Security Boundaries","text":"<ul> <li>No Cross-Project Access: Agents cannot read other project data</li> <li>Limited Write Scope: Only <code>.orch-state/</code> directory writable</li> <li>Git Permissions: Standard repository access controls apply</li> </ul>"},{"location":"advanced/data-flow/#state-synchronization","title":"State Synchronization","text":""},{"location":"advanced/data-flow/#project-state-machine","title":"Project State Machine","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; BACKLOG_READY: /epic\n    BACKLOG_READY --&gt; SPRINT_PLANNED: /sprint plan\n    SPRINT_PLANNED --&gt; SPRINT_ACTIVE: /sprint start\n    SPRINT_ACTIVE --&gt; SPRINT_REVIEW: /sprint status\n    SPRINT_REVIEW --&gt; IDLE: /feedback\n\n    note right of IDLE\n        Status stored in\n        project repo's\n        status.json\n    end note</code></pre>"},{"location":"advanced/data-flow/#multi-project-coordination","title":"Multi-Project Coordination","text":"<ul> <li>Independent States: Each project has own state machine</li> <li>Parallel Execution: Multiple projects can be active simultaneously</li> <li>Resource Sharing: Agents allocated per project needs</li> <li>Conflict Prevention: Discord channels provide isolation</li> </ul>"},{"location":"advanced/data-flow/#data-consistency","title":"Data Consistency","text":""},{"location":"advanced/data-flow/#eventual-consistency-model","title":"Eventual Consistency Model","text":"<ul> <li>Local Consistency: Each project maintains internal consistency</li> <li>Global Coordination: Orchestrator ensures cross-project resource allocation</li> <li>Conflict Resolution: Manual intervention for complex scenarios</li> </ul>"},{"location":"advanced/data-flow/#transaction-boundaries","title":"Transaction Boundaries","text":"<ul> <li>Single Project: ACID properties maintained within project</li> <li>Cross Project: No transactions spanning projects</li> <li>Rollback Strategy: Git provides rollback capabilities</li> </ul>"},{"location":"advanced/data-flow/#backup-and-recovery","title":"Backup and Recovery","text":"<ul> <li>Git History: Complete audit trail of all changes</li> <li>State Recovery: Projects can be restored from any git commit</li> <li>Disaster Recovery: Projects portable between orchestration instances</li> </ul>"},{"location":"advanced/data-flow/#performance-considerations","title":"Performance Considerations","text":""},{"location":"advanced/data-flow/#read-performance","title":"Read Performance","text":"<ul> <li>Local Access: Project data accessed directly from filesystem</li> <li>Caching Strategy: Orchestrator caches frequently accessed data</li> <li>Lazy Loading: Project data loaded on-demand</li> </ul>"},{"location":"advanced/data-flow/#write-performance","title":"Write Performance","text":"<ul> <li>Batched Writes: Multiple changes combined into single commits</li> <li>Asynchronous Operations: Non-blocking writes to project repositories</li> <li>Conflict Avoidance: Structured data minimizes merge conflicts</li> </ul>"},{"location":"advanced/data-flow/#scalability","title":"Scalability","text":"<ul> <li>Horizontal Scaling: Add projects without affecting others</li> <li>Resource Isolation: Per-project resource allocation</li> <li>Network Efficiency: Local filesystem access minimizes I/O</li> </ul>"},{"location":"advanced/data-flow/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"advanced/data-flow/#data-flow-metrics","title":"Data Flow Metrics","text":"<ul> <li>Command Latency: Time from Discord to project update</li> <li>State Transition Frequency: Workflow progression rates</li> <li>Error Rates: Failed operations per project</li> </ul>"},{"location":"advanced/data-flow/#audit-trail","title":"Audit Trail","text":"<ul> <li>Git History: All changes tracked in version control</li> <li>Discord Logs: Command execution history</li> <li>Agent Logs: Detailed task execution traces</li> </ul>"},{"location":"advanced/data-flow/#health-checks","title":"Health Checks","text":"<ul> <li>Project Repository: Git status and filesystem health</li> <li>Data Integrity: JSON schema validation</li> <li>State Consistency: State machine validation</li> </ul>"},{"location":"advanced/orchestration-repo/","title":"Orchestration Repository Architecture","text":"<p>The orchestration repository (this repository) contains the AI agent framework and multi-project coordination logic. It serves as the centralized system that manages multiple project repositories.</p>"},{"location":"advanced/orchestration-repo/#responsibilities","title":"Responsibilities","text":""},{"location":"advanced/orchestration-repo/#core-framework","title":"Core Framework","text":"<ul> <li>Agent Definitions: All AI agent types (CodeAgent, DesignAgent, QAAgent, DataAgent)</li> <li>State Machine: Workflow state management and validation</li> <li>Discord Bot: Human-In-The-Loop interface for all projects</li> <li>Security System: Agent tool access control and restrictions</li> <li>Orchestrator: Central coordination engine</li> </ul>"},{"location":"advanced/orchestration-repo/#multi-project-management","title":"Multi-Project Management","text":"<ul> <li>Project Registry: Configuration and discovery of project repositories</li> <li>Channel Management: Automatic Discord channel creation per project</li> <li>State Coordination: Cross-project workflow management</li> <li>Resource Allocation: Agent assignment and task distribution</li> </ul>"},{"location":"advanced/orchestration-repo/#global-configuration","title":"Global Configuration","text":"<ul> <li>Agent Security Profiles: Tool access restrictions per agent type</li> <li>Workflow Templates: Reusable workflow definitions</li> <li>Discord Bot Configuration: Global bot settings and commands</li> <li>Logging and Monitoring: Centralized logging across all projects</li> </ul>"},{"location":"advanced/orchestration-repo/#architecture-components","title":"Architecture Components","text":"<pre><code>graph TB\n    subgraph \"Orchestration Repository\"\n        O[Orchestrator]\n        DB[Discord Bot]\n        SM[State Machine]\n        A[Agents]\n        S[Security System]\n\n        O --&gt; DB\n        O --&gt; SM\n        O --&gt; A\n        A --&gt; S\n    end\n\n    subgraph \"Project Repository 1\"\n        P1[Project Code]\n        D1[.orch-state/]\n    end\n\n    subgraph \"Project Repository 2\"\n        P2[Project Code]\n        D2[.orch-state/]\n    end\n\n    O --&gt; D1\n    O --&gt; D2\n    DB --&gt; D1\n    DB --&gt; D2</code></pre>"},{"location":"advanced/orchestration-repo/#data-flow","title":"Data Flow","text":""},{"location":"advanced/orchestration-repo/#project-registration","title":"Project Registration","text":"<ol> <li>User runs <code>/project register &lt;path&gt;</code> in Discord</li> <li>Discord Bot validates project path and git repository</li> <li>Orchestrator creates project instance with storage</li> <li>Discord channel created with naming convention <code>{hostname}-{projectname}</code></li> <li>Project structure initialized in target repository</li> </ol>"},{"location":"advanced/orchestration-repo/#command-execution","title":"Command Execution","text":"<ol> <li>User issues command in project-specific Discord channel</li> <li>Discord Bot routes command to Orchestrator with project context</li> <li>Orchestrator validates command against project state machine</li> <li>Appropriate agent executes command with security restrictions</li> <li>Results stored in project repository's <code>.orch-state/</code> directory</li> </ol>"},{"location":"advanced/orchestration-repo/#state-management","title":"State Management","text":"<ul> <li>Global State: Orchestrator maintains registry of all projects</li> <li>Project State: Each project has independent state machine</li> <li>Persistence: Project state persisted in project repository</li> <li>Synchronization: Discord Bot keeps channel mappings current</li> </ul>"},{"location":"advanced/orchestration-repo/#security-architecture","title":"Security Architecture","text":""},{"location":"advanced/orchestration-repo/#agent-isolation","title":"Agent Isolation","text":"<ul> <li>Each project has isolated agent instances</li> <li>Agents cannot access data from other projects</li> <li>Tool access restricted based on agent type and project context</li> </ul>"},{"location":"advanced/orchestration-repo/#repository-boundaries","title":"Repository Boundaries","text":"<ul> <li>Orchestration repo has read-only access to project repos</li> <li>Write access limited to <code>.orch-state/</code> directory only</li> <li>No cross-project data access without explicit permission</li> </ul>"},{"location":"advanced/orchestration-repo/#discord-security","title":"Discord Security","text":"<ul> <li>Project-specific channels provide access control</li> <li>Commands validated against project membership</li> <li>Audit trail maintained in project repositories</li> </ul>"},{"location":"advanced/orchestration-repo/#deployment-model","title":"Deployment Model","text":""},{"location":"advanced/orchestration-repo/#single-instance","title":"Single Instance","text":"<ul> <li>One orchestration instance manages multiple projects</li> <li>Scales horizontally by project distribution</li> <li>Discord Bot provides unified interface</li> </ul>"},{"location":"advanced/orchestration-repo/#configuration","title":"Configuration","text":"<ul> <li>Projects registered via Discord commands</li> <li>No manual configuration files required</li> <li>Self-discovering and self-healing</li> </ul>"},{"location":"advanced/orchestration-repo/#monitoring","title":"Monitoring","text":"<ul> <li>Centralized logging from all projects</li> <li>Health checks per project</li> <li>Performance metrics aggregated across projects</li> </ul>"},{"location":"advanced/project-repo/","title":"Project Repository Architecture","text":"<p>Project repositories contain the actual code being developed with AI assistance. Each project repository maintains its own project management data and state while being coordinated by the orchestration system.</p>"},{"location":"advanced/project-repo/#repository-structure","title":"Repository Structure","text":"<pre><code>project-repository/\n\u251c\u2500\u2500 src/                     # Project source code\n\u251c\u2500\u2500 tests/                   # Project tests\n\u251c\u2500\u2500 .git/                    # Git repository\n\u251c\u2500\u2500 .orch-state/            # AI workflow state (managed by orchestration)\n\u2502   \u251c\u2500\u2500 backlog.json        # Epics, stories, and priorities\n\u2502   \u251c\u2500\u2500 sprints/            # Sprint data and retrospectives\n\u2502   \u2502   \u251c\u2500\u2500 sprint-abc123.json\n\u2502   \u2502   \u2514\u2500\u2500 sprint-def456.json\n\u2502   \u251c\u2500\u2500 architecture.md     # Project-specific architecture decisions\n\u2502   \u251c\u2500\u2500 best-practices.md   # Project conventions and patterns\n\u2502   \u2514\u2500\u2500 status.json         # Current workflow state\n\u2514\u2500\u2500 README.md               # Project documentation\n</code></pre>"},{"location":"advanced/project-repo/#orch-state-directory","title":"<code>.orch-state/</code> Directory","text":""},{"location":"advanced/project-repo/#purpose","title":"Purpose","text":"<p>The <code>.orch-state/</code> directory stores all AI workflow-related data within the project repository, ensuring that project management information is version-controlled alongside the code.</p>"},{"location":"advanced/project-repo/#contents","title":"Contents","text":""},{"location":"advanced/project-repo/#backlogjson","title":"<code>backlog.json</code>","text":"<p>Contains all project management data: <pre><code>{\n  \"epics\": [\n    {\n      \"id\": \"epic-001\",\n      \"title\": \"User Authentication System\",\n      \"description\": \"Complete user auth with login, registration, and session management\",\n      \"created_at\": \"2024-01-15T10:30:00Z\",\n      \"status\": \"active\"\n    }\n  ],\n  \"stories\": [\n    {\n      \"id\": \"story-001\",\n      \"epic_id\": \"epic-001\",\n      \"title\": \"User login functionality\",\n      \"description\": \"As a user, I want to log in with email/password\",\n      \"acceptance_criteria\": [\"Login form validation\", \"Error handling\", \"Session creation\"],\n      \"priority\": 1,\n      \"status\": \"backlog\",\n      \"sprint_id\": null,\n      \"created_at\": \"2024-01-15T10:35:00Z\"\n    }\n  ],\n  \"sprints\": [\n    {\n      \"id\": \"sprint-001\",\n      \"goal\": \"Implement basic user authentication\",\n      \"start_date\": \"2024-01-16\",\n      \"end_date\": \"2024-01-30\",\n      \"story_ids\": [\"story-001\", \"story-002\"],\n      \"status\": \"active\",\n      \"created_at\": \"2024-01-16T09:00:00Z\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"advanced/project-repo/#sprints-directory","title":"<code>sprints/</code> Directory","text":"<p>Individual sprint files with detailed information: <pre><code>{\n  \"id\": \"sprint-001\",\n  \"goal\": \"Implement basic user authentication\",\n  \"start_date\": \"2024-01-16\",\n  \"end_date\": \"2024-01-30\",\n  \"story_ids\": [\"story-001\", \"story-002\"],\n  \"status\": \"completed\",\n  \"retrospective\": {\n    \"what_went_well\": [\n      \"Good test coverage achieved\",\n      \"Clear user stories helped focus development\"\n    ],\n    \"what_could_improve\": [\n      \"Better estimation needed\",\n      \"More frequent code reviews\"\n    ],\n    \"action_items\": [\n      \"Implement automated testing pipeline\",\n      \"Schedule daily standup meetings\"\n    ]\n  }\n}\n</code></pre></p>"},{"location":"advanced/project-repo/#architecturemd","title":"<code>architecture.md</code>","text":"<p>Project-specific architectural decisions and design documentation: <pre><code># Project Architecture\n\n## Overview\nThis project implements a modern web application with React frontend and Node.js backend.\n\n## Components\n- Frontend: React 18 with TypeScript\n- Backend: Node.js with Express\n- Database: PostgreSQL with Prisma ORM\n- Authentication: JWT with refresh tokens\n\n## Design Decisions\n- **Microservices**: Monolithic architecture chosen for simplicity\n- **State Management**: Redux Toolkit for complex state scenarios\n- **Testing**: Jest + React Testing Library for unit tests\n\n## Dependencies\n- External APIs: Stripe for payments, SendGrid for emails\n- Third-party libraries: Material-UI for components\n\n## Future Considerations\n- Migration to microservices when scaling becomes necessary\n- Implementation of GraphQL for more efficient data fetching\n</code></pre></p>"},{"location":"advanced/project-repo/#best-practicesmd","title":"<code>best-practices.md</code>","text":"<p>Project-specific coding standards and AI agent guidelines: <pre><code># Project Best Practices\n\n## Code Standards\n- Use TypeScript for all new code\n- Follow ESLint and Prettier configurations\n- Minimum 80% test coverage required\n\n## Testing Strategy\n- Unit tests for all business logic\n- Integration tests for API endpoints\n- E2E tests for critical user workflows\n\n## Git Workflow\n- Feature branches from main\n- Pull request required for all changes\n- Squash and merge strategy\n\n## AI Agent Guidelines\n- CodeAgent should follow existing patterns in src/utils/\n- Use established error handling patterns\n- Maintain consistency with existing component structure\n\n## Review Process\n- Automated tests must pass\n- Code review by at least one team member\n- Security review for authentication changes\n</code></pre></p>"},{"location":"advanced/project-repo/#statusjson","title":"<code>status.json</code>","text":"<p>Current workflow state and metadata: <pre><code>{\n  \"current_state\": \"SPRINT_ACTIVE\",\n  \"orchestration_mode\": \"blocking\",\n  \"last_updated\": \"2024-01-20T14:30:00Z\",\n  \"active_tasks\": [\n    {\n      \"id\": \"task-001\",\n      \"agent_type\": \"CodeAgent\",\n      \"command\": \"Implement user login form\",\n      \"status\": \"in_progress\"\n    }\n  ],\n  \"pending_approvals\": [\"story-003\", \"story-004\"]\n}\n</code></pre></p>"},{"location":"advanced/project-repo/#version-control-integration","title":"Version Control Integration","text":""},{"location":"advanced/project-repo/#git-integration","title":"Git Integration","text":"<ul> <li>All <code>.orch-state/</code> files are version controlled</li> <li>Changes tracked alongside code modifications</li> <li>Sprint data preserved in project history</li> <li>Architecture decisions documented over time</li> </ul>"},{"location":"advanced/project-repo/#branching-strategy","title":"Branching Strategy","text":"<ul> <li><code>.orch-state/</code> changes typically made on main branch</li> <li>Sprint planning updates committed as project milestones</li> <li>Feature branches may update story status</li> </ul>"},{"location":"advanced/project-repo/#conflict-resolution","title":"Conflict Resolution","text":"<ul> <li>Merge conflicts in <code>.orch-state/</code> resolved like any code</li> <li>Orchestrator detects and reports state inconsistencies</li> <li>Manual intervention required for complex conflicts</li> </ul>"},{"location":"advanced/project-repo/#data-ownership","title":"Data Ownership","text":""},{"location":"advanced/project-repo/#project-data","title":"Project Data","text":"<ul> <li>Belongs to Project: Stories, epics, sprints, architecture decisions</li> <li>Versioned with Code: All management data tracked in git</li> <li>Project-Specific: No shared data between projects</li> </ul>"},{"location":"advanced/project-repo/#orchestration-data","title":"Orchestration Data","text":"<ul> <li>Belongs to Orchestrator: Agent definitions, security policies</li> <li>Global Configuration: Shared across all projects</li> <li>Runtime State: Project registration and channel mappings</li> </ul>"},{"location":"advanced/project-repo/#benefits-of-repository-co-location","title":"Benefits of Repository Co-location","text":""},{"location":"advanced/project-repo/#consistency","title":"Consistency","text":"<ul> <li>Project management data evolves with code</li> <li>Architecture decisions documented alongside implementation</li> <li>Sprint retrospectives linked to specific code versions</li> </ul>"},{"location":"advanced/project-repo/#auditability","title":"Auditability","text":"<ul> <li>Complete history of project decisions</li> <li>Correlation between features and planning data</li> <li>Compliance and tracking for regulated environments</li> </ul>"},{"location":"advanced/project-repo/#portability","title":"Portability","text":"<ul> <li>Projects can be moved between orchestration instances</li> <li>Self-contained project data travels with repository</li> <li>No external dependencies for project management data</li> </ul>"},{"location":"advanced/project-repo/#access-patterns","title":"Access Patterns","text":""},{"location":"advanced/project-repo/#read-access","title":"Read Access","text":"<ul> <li>Orchestrator reads project state and data</li> <li>Discord Bot displays current status and history</li> <li>Agents access project context for decision making</li> </ul>"},{"location":"advanced/project-repo/#write-access","title":"Write Access","text":"<ul> <li>Only orchestrator writes to <code>.orch-state/</code></li> <li>Changes made through Discord commands</li> <li>Agent results persisted automatically</li> </ul>"},{"location":"advanced/project-repo/#security","title":"Security","text":"<ul> <li>Repository access controls apply to workflow data</li> <li>No cross-project data leakage</li> <li>Standard git permissions model used</li> </ul>"},{"location":"advanced/security-implementation/","title":"Security Architecture","text":""},{"location":"advanced/security-implementation/#overview","title":"Overview","text":"<p>The AI Agent TDD-Scrum Workflow system implements comprehensive security measures to ensure safe operation of AI agents with appropriate access controls and data protection.</p>"},{"location":"advanced/security-implementation/#agent-security-model","title":"Agent Security Model","text":""},{"location":"advanced/security-implementation/#command-access-control","title":"Command Access Control","text":"<p>Each agent type operates under the Principle of Least Privilege, with access restricted to only the tools necessary for their specific function.</p> <pre><code>graph LR\n    subgraph \"Agent Security Layers\"\n        Claude[Claude Code CLI]\n        Config[Agent Tool Config]\n        Validation[Access Validation]\n    end\n\n    subgraph \"Agent Types\"\n        Orchestrator[Orchestrator&lt;br/&gt;Full Access]\n        Code[Code Agent&lt;br/&gt;Edit + Commit]\n        Design[Design Agent&lt;br/&gt;Read Only]\n        QA[QA Agent&lt;br/&gt;Test Only]\n        Data[Data Agent&lt;br/&gt;Analysis Only]\n    end\n\n    Claude --&gt; Config\n    Config --&gt; Validation\n    Validation --&gt; Orchestrator\n    Validation --&gt; Code\n    Validation --&gt; Design\n    Validation --&gt; QA\n    Validation --&gt; Data</code></pre>"},{"location":"advanced/security-implementation/#agent-access-matrix","title":"Agent Access Matrix","text":"Tool Category Orchestrator Code Agent Design Agent QA Agent Data Agent File Operations Read files \u2705 \u2705 \u2705 \u2705 \u2705 Write new files \u2705 \u2705 \u2705 \u274c \u2705 Edit existing code \u2705 \u2705 \u274c \u274c \u274c Delete files \u2705 \u274c \u274c \u274c \u274c Version Control Git status/diff \u2705 \u2705 \u2705 \u2705 \u274c Git add/commit \u2705 \u2705 \u274c \u274c \u274c Git push \u2705 \u274c \u274c \u274c \u274c Testing &amp; Analysis Run tests \u2705 \u2705 \u274c \u2705 \u274c Code quality tools \u2705 \u2705 \u274c \u2705 \u274c System Operations Package management \u2705 \u2705 (limited) \u274c \u274c \u274c Process management \u2705 \u274c \u274c \u274c \u274c Network access \u2705 \u274c \u2705 (research) \u274c \u274c"},{"location":"advanced/security-implementation/#security-implementation","title":"Security Implementation","text":""},{"location":"advanced/security-implementation/#1-tool-restriction-enforcement","title":"1. Tool Restriction Enforcement","text":"<p>The system leverages Claude Code's built-in security flags:</p> <pre><code>claude --allowedTools \"Read Write Glob\" --disallowedTools \"Bash(rm) Edit\"\n</code></pre> <p>Architecture Components:</p> <ul> <li><code>agent_tool_config.py</code>: Centralized security configuration</li> <li>Enhanced Claude Client: Automatic tool restriction application</li> <li>Agent Integration: Transparent security enforcement</li> </ul>"},{"location":"advanced/security-implementation/#2-command-categories","title":"2. Command Categories","text":""},{"location":"advanced/security-implementation/#restricted-commands-blocked-for-most-agents","title":"Restricted Commands (Blocked for Most Agents)","text":"<ul> <li><code>sudo</code>, <code>su</code> - Privilege escalation</li> <li><code>chmod</code>, <code>chown</code> - Permission changes</li> <li><code>kill</code>, <code>killall</code> - Process termination</li> <li><code>curl</code>, <code>wget</code> - Network downloads</li> <li><code>ssh</code>, <code>scp</code> - Remote access</li> <li><code>docker run</code> - Container operations</li> </ul>"},{"location":"advanced/security-implementation/#elevated-commands-orchestrator-only","title":"Elevated Commands (Orchestrator Only)","text":"<ul> <li><code>rm</code>, <code>rmdir</code> - File deletion</li> <li><code>git push</code> - Publishing changes</li> </ul>"},{"location":"advanced/security-implementation/#code-management-commands-orchestrator-code-agent","title":"Code Management Commands (Orchestrator + Code Agent)","text":"<ul> <li><code>git commit</code> - Version control commits</li> <li><code>git add</code> - Stage changes</li> <li><code>git reset</code> - Reset changes</li> </ul>"},{"location":"advanced/security-implementation/#3-security-validation","title":"3. Security Validation","text":"<pre><code>from lib.agent_tool_config import validate_agent_access, AgentType\n\n# Runtime validation\ncan_commit = validate_agent_access(AgentType.CODE, \"Bash(git commit)\")  # \u2705 True\ncan_delete = validate_agent_access(AgentType.CODE, \"Bash(rm)\")          # \u274c False\n</code></pre>"},{"location":"advanced/security-implementation/#data-protection","title":"Data Protection","text":""},{"location":"advanced/security-implementation/#1-state-management-security","title":"1. State Management Security","text":"<ul> <li>No Sensitive Data: State files contain only workflow metadata</li> <li>Local Storage: State persisted locally in <code>.orch-state/</code></li> <li>Project Isolation: Independent state per project</li> <li>Access Control: File system permissions protect state</li> </ul>"},{"location":"advanced/security-implementation/#2-environment-security","title":"2. Environment Security","text":"<pre><code># Required environment variables\nexport DISCORD_BOT_TOKEN=\"your_token_here\"\n\n# Optional: Restrict Claude Code directory access\nclaude --add-dir ./project-dir\n</code></pre>"},{"location":"advanced/security-implementation/#3-secret-management","title":"3. Secret Management","text":"<ul> <li>Environment Variables: All secrets stored as env vars</li> <li>No Hardcoded Secrets: Code contains no embedded credentials</li> <li>Token Rotation: Support for rotating API tokens</li> <li>Audit Logging: All credential usage logged</li> </ul>"},{"location":"advanced/security-implementation/#authentication-authorization","title":"Authentication &amp; Authorization","text":""},{"location":"advanced/security-implementation/#1-discord-bot-security","title":"1. Discord Bot Security","text":"<pre><code># Role-based access control\n@app_commands.command()\n@requires_role(\"developer\")\nasync def sensitive_command(self, interaction):\n    # Only users with 'developer' role can execute\n    pass\n</code></pre>"},{"location":"advanced/security-implementation/#2-project-level-permissions","title":"2. Project-Level Permissions","text":"<ul> <li>Channel Isolation: Each project has dedicated Discord channel</li> <li>User Permissions: Discord role-based access control</li> <li>Command Restrictions: Sensitive commands require elevated roles</li> </ul>"},{"location":"advanced/security-implementation/#input-validation-sanitization","title":"Input Validation &amp; Sanitization","text":""},{"location":"advanced/security-implementation/#1-command-validation","title":"1. Command Validation","text":"<pre><code>def validate_epic_command(description: str) -&gt; bool:\n    \"\"\"Validate epic description input\"\"\"\n    if len(description) &gt; 500:\n        raise ValueError(\"Epic description too long\")\n\n    # Prevent command injection\n    dangerous_chars = [';', '&amp;&amp;', '||', '`', '$']\n    if any(char in description for char in dangerous_chars):\n        raise ValueError(\"Invalid characters in description\")\n\n    return True\n</code></pre>"},{"location":"advanced/security-implementation/#2-state-machine-validation","title":"2. State Machine Validation","text":"<ul> <li>Command Sequencing: Only valid commands allowed per state</li> <li>Parameter Validation: All inputs validated before processing</li> <li>Error Handling: Graceful failure with helpful error messages</li> </ul>"},{"location":"advanced/security-implementation/#audit-monitoring","title":"Audit &amp; Monitoring","text":""},{"location":"advanced/security-implementation/#1-security-logging","title":"1. Security Logging","text":"<pre><code># Security-relevant events logged\nlogger.security(\"Agent access granted\", extra={\n    \"agent_type\": \"CodeAgent\",\n    \"tool\": \"git commit\",\n    \"user\": interaction.user.id,\n    \"project\": project_name\n})\n</code></pre>"},{"location":"advanced/security-implementation/#2-access-monitoring","title":"2. Access Monitoring","text":"<ul> <li>Tool Usage Tracking: All agent tool usage logged</li> <li>Failed Access Attempts: Blocked commands logged</li> <li>User Activity: Discord command usage tracked</li> <li>Anomaly Detection: Unusual usage patterns flagged</li> </ul>"},{"location":"advanced/security-implementation/#threat-model-mitigations","title":"Threat Model &amp; Mitigations","text":""},{"location":"advanced/security-implementation/#1-identified-threats","title":"1. Identified Threats","text":"Threat Impact Likelihood Mitigation Malicious Agent Commands High Medium Tool access restrictions Privilege Escalation High Low Command filtering Code Injection Medium Low Input validation Data Exfiltration Medium Low Network restrictions Unauthorized Access Medium Low Discord role permissions"},{"location":"advanced/security-implementation/#2-security-controls","title":"2. Security Controls","text":""},{"location":"advanced/security-implementation/#preventive-controls","title":"Preventive Controls","text":"<ul> <li>Agent tool restrictions</li> <li>Input validation</li> <li>Role-based access control</li> <li>Environment isolation</li> </ul>"},{"location":"advanced/security-implementation/#detective-controls","title":"Detective Controls","text":"<ul> <li>Comprehensive audit logging</li> <li>Access monitoring</li> <li>Anomaly detection</li> <li>Failed attempt tracking</li> </ul>"},{"location":"advanced/security-implementation/#corrective-controls","title":"Corrective Controls","text":"<ul> <li>Automatic command blocking</li> <li>Error recovery procedures</li> <li>State rollback capabilities</li> <li>Alert escalation</li> </ul>"},{"location":"advanced/security-implementation/#security-testing","title":"Security Testing","text":""},{"location":"advanced/security-implementation/#1-automated-security-tests","title":"1. Automated Security Tests","text":"<pre><code># Example security test\ndef test_code_agent_cannot_delete_files(self):\n    \"\"\"Verify code agent cannot use rm command\"\"\"\n    access_granted = validate_agent_access(AgentType.CODE, \"Bash(rm)\")\n    self.assertFalse(access_granted)\n</code></pre>"},{"location":"advanced/security-implementation/#2-security-test-categories","title":"2. Security Test Categories","text":"<ul> <li>Access Control Tests: Verify agent restrictions work</li> <li>Input Validation Tests: Test command injection prevention</li> <li>Authentication Tests: Verify Discord role enforcement</li> <li>State Security Tests: Ensure state tampering protection</li> </ul>"},{"location":"advanced/security-implementation/#security-configuration","title":"Security Configuration","text":""},{"location":"advanced/security-implementation/#1-agent-security-profiles","title":"1. Agent Security Profiles","text":"<p>Create custom security profiles by modifying <code>AGENT_TOOL_CONFIG</code>:</p> <pre><code>CUSTOM_AGENT_CONFIG = {\n    AgentType.CUSTOM: {\n        \"allowed_tools\": [\n            \"Read\", \"Write\",\n            \"Bash(custom_tool)\"\n        ],\n        \"disallowed_tools\": [\n            \"Edit\", \"Bash(dangerous_command)\"\n        ]\n    }\n}\n</code></pre>"},{"location":"advanced/security-implementation/#2-environment-security-settings","title":"2. Environment Security Settings","text":"<pre><code># Restrict Claude Code to specific directories\nexport CLAUDE_ALLOWED_DIRS=\"/workspace/safe-dir\"\n\n# Enable additional security logging\nexport SECURITY_LOG_LEVEL=\"DEBUG\"\n\n# Require explicit permission for network access\nexport REQUIRE_NETWORK_APPROVAL=\"true\"\n</code></pre>"},{"location":"advanced/security-implementation/#best-practices","title":"Best Practices","text":""},{"location":"advanced/security-implementation/#1-development-security","title":"1. Development Security","text":"<ul> <li>Code Review: All security-related changes require review</li> <li>Principle of Least Privilege: Grant minimal necessary permissions</li> <li>Defense in Depth: Multiple security layers</li> <li>Fail Secure: Default to deny for unknown operations</li> </ul>"},{"location":"advanced/security-implementation/#2-operational-security","title":"2. Operational Security","text":"<ul> <li>Regular Audits: Periodic review of agent permissions</li> <li>Security Updates: Keep dependencies updated</li> <li>Incident Response: Clear procedures for security events</li> <li>Backup &amp; Recovery: Secure backup of critical data</li> </ul>"},{"location":"advanced/security-implementation/#3-monitoring-alerting","title":"3. Monitoring &amp; Alerting","text":"<pre><code># Security alert example\nif failed_access_attempts &gt; 5:\n    alert_security_team(\n        \"Multiple failed access attempts\",\n        agent_type=agent.name,\n        user=user_id,\n        timestamp=datetime.now()\n    )\n</code></pre>"},{"location":"advanced/security-implementation/#compliance-considerations","title":"Compliance Considerations","text":""},{"location":"advanced/security-implementation/#1-data-privacy","title":"1. Data Privacy","text":"<ul> <li>No PII Storage: System avoids storing personal information</li> <li>Data Minimization: Only necessary data collected</li> <li>Retention Policies: Automatic log rotation and cleanup</li> </ul>"},{"location":"advanced/security-implementation/#2-access-controls","title":"2. Access Controls","text":"<ul> <li>Role Separation: Clear separation of duties</li> <li>Audit Trail: Complete audit trail of all actions</li> <li>Access Reviews: Regular review of user permissions</li> </ul> <p>Security Updates</p> <p>Security configurations should be reviewed regularly and updated as new threats emerge. Monitor security advisories for all dependencies.</p> <p>Incident Response</p> <p>In case of suspected security incident, immediately disable affected agents and review audit logs. Contact security team for investigation procedures.</p>"},{"location":"advanced/testing/","title":"Testing Plan - AI Agent TDD-Scrum Workflow","text":""},{"location":"advanced/testing/#testing-strategy","title":"Testing Strategy","text":""},{"location":"advanced/testing/#test-pyramid","title":"Test Pyramid","text":"<ol> <li>Unit Tests (70%) - Individual component testing</li> <li>Integration Tests (20%) - Component interaction testing  </li> <li>End-to-End Tests (10%) - Full workflow testing</li> </ol>"},{"location":"advanced/testing/#test-categories","title":"Test Categories","text":""},{"location":"advanced/testing/#1-state-machine-tests","title":"1. State Machine Tests","text":"<ul> <li>File: <code>tests/unit/test_state_machine.py</code></li> <li>Coverage: All state transitions and command validations</li> <li>Approach: Table-driven tests with (current_state, command) \u2192 expected_result</li> </ul> <pre><code>test_cases = [\n    (\"IDLE\", \"/epic\", \"BACKLOG_READY\", True),\n    (\"IDLE\", \"/sprint start\", \"IDLE\", False),  # Invalid transition\n    (\"SPRINT_ACTIVE\", \"/sprint pause\", \"SPRINT_PAUSED\", True),\n    # ... comprehensive matrix\n]\n</code></pre>"},{"location":"advanced/testing/#2-agent-library-tests","title":"2. Agent Library Tests","text":"<ul> <li>Files: </li> <li><code>tests/unit/test_base_agent.py</code></li> <li><code>tests/unit/test_design_agent.py</code></li> <li><code>tests/unit/test_code_agent.py</code></li> <li><code>tests/unit/test_qa_agent.py</code></li> <li><code>tests/unit/test_data_agent.py</code></li> <li><code>tests/unit/test_agent_tool_config.py</code> \u2705</li> <li>Coverage: </li> <li>Agent initialization and configuration</li> <li>Task execution with dry-run mode</li> <li>Error handling and retry logic</li> <li>Agent Security: Tool access control and command restrictions</li> <li>Claude Code integration (mocked)</li> </ul>"},{"location":"advanced/testing/#3-discord-bot-tests","title":"3. Discord Bot Tests","text":"<ul> <li>Files:</li> <li><code>tests/unit/test_discord_bot.py</code></li> <li><code>tests/unit/test_command_parser.py</code></li> <li><code>tests/unit/test_state_visualizer.py</code></li> <li>Coverage:</li> <li>Slash command parsing and validation</li> <li>Interactive state visualization</li> <li>Button handling and user interactions</li> <li>Channel management (create project channels)</li> <li>Error message formatting</li> </ul>"},{"location":"advanced/testing/#4-orchestrator-tests","title":"4. Orchestrator Tests","text":"<ul> <li>Files:</li> <li><code>tests/unit/test_orchestrator.py</code></li> <li><code>tests/unit/test_project_manager.py</code></li> <li><code>tests/unit/test_approval_gate.py</code></li> <li>Coverage:</li> <li>Multi-project coordination</li> <li>HITL approval workflow</li> <li>Task dispatch and retry logic</li> <li>State persistence and recovery</li> </ul>"},{"location":"advanced/testing/#5-integration-tests","title":"5. Integration Tests","text":"<ul> <li>Files:</li> <li><code>tests/integration/test_discord_orchestrator.py</code></li> <li><code>tests/integration/test_agent_coordination.py</code></li> <li><code>tests/integration/test_state_persistence.py</code></li> <li>Coverage:</li> <li>Discord \u2192 Orchestrator \u2192 Agent workflows</li> <li>State machine integration with Discord UI</li> <li>Multi-agent task coordination</li> <li>Project state persistence across restarts</li> </ul>"},{"location":"advanced/testing/#6-end-to-end-tests","title":"6. End-to-End Tests","text":"<ul> <li>Files:</li> <li><code>tests/e2e/test_complete_workflow.py</code></li> <li><code>tests/e2e/test_approval_scenarios.py</code></li> <li>Coverage:</li> <li>Complete epic \u2192 sprint \u2192 implementation workflow</li> <li>HITL approval gates and escalation</li> <li>Multi-project orchestration scenarios</li> <li>Error recovery and retry scenarios</li> </ul>"},{"location":"advanced/testing/#test-implementation-structure","title":"Test Implementation Structure","text":""},{"location":"advanced/testing/#mock-strategy","title":"Mock Strategy","text":"<ul> <li>Discord API: Mock discord.py interactions</li> <li>Anthropic API: Mock AI model responses with realistic outputs</li> <li>GitHub API: Mock repository operations and CI results</li> <li>File System: Use temporary directories for state persistence</li> </ul>"},{"location":"advanced/testing/#test-data","title":"Test Data","text":"<ul> <li>Fixtures: <code>tests/fixtures/</code></li> <li>Sample project configurations</li> <li>Mock Discord interactions</li> <li>Predefined AI responses</li> <li>Test state machine configurations</li> </ul>"},{"location":"advanced/testing/#performance-tests","title":"Performance Tests","text":"<ul> <li>Load Testing: Multiple concurrent projects</li> <li>Stress Testing: High-frequency command processing  </li> <li>Memory Testing: Long-running orchestrator instances</li> </ul>"},{"location":"advanced/testing/#test-execution","title":"Test Execution","text":""},{"location":"advanced/testing/#continuous-testing","title":"Continuous Testing","text":"<pre><code># Unit tests (fast feedback)\npytest tests/unit/ -v\n\n# Integration tests (moderate speed)\npytest tests/integration/ -v\n\n# Full test suite (comprehensive)\npytest tests/ -v --cov=lib --cov=scripts\n\n# Performance tests (separate run)\npytest tests/performance/ -v\n</code></pre>"},{"location":"advanced/testing/#test-coverage-targets","title":"Test Coverage Targets","text":"<ul> <li>Unit Tests: \u226595% line coverage</li> <li>Integration Tests: \u226590% feature coverage</li> <li>E2E Tests: 100% critical path coverage</li> </ul>"},{"location":"advanced/testing/#test-environment-setup","title":"Test Environment Setup","text":"<pre><code># Test dependencies\npip install pytest pytest-cov pytest-asyncio pytest-mock\n\n# Discord testing with mock bot\nexport DISCORD_BOT_TOKEN=\"test_token\"\nexport ANTHROPIC_API_KEY=\"test_key\"\n\n# Test database setup\nmkdir -p tests/tmp\n</code></pre>"},{"location":"advanced/testing/#quality-gates","title":"Quality Gates","text":""},{"location":"advanced/testing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<ul> <li>Run unit tests</li> <li>Check code coverage</li> <li>Lint code style</li> <li>Validate type hints</li> </ul>"},{"location":"advanced/testing/#cicd-pipeline","title":"CI/CD Pipeline","text":"<ol> <li>Fast Tests: Unit tests on every commit</li> <li>Integration Tests: On pull request</li> <li>E2E Tests: On main branch merge</li> <li>Performance Tests: Nightly runs</li> </ol>"},{"location":"advanced/testing/#test-driven-development-process","title":"Test-Driven Development Process","text":"<ol> <li>Write failing test for new feature</li> <li>Implement minimal code to pass test  </li> <li>Refactor while maintaining test coverage</li> <li>Add integration tests for feature interactions</li> <li>Add E2E test for user-facing workflows</li> </ol>"},{"location":"advanced/testing/#test-scenarios-priority","title":"Test Scenarios Priority","text":""},{"location":"advanced/testing/#high-priority-must-test","title":"High Priority (Must Test)","text":"<ul> <li>State machine command validation</li> <li>HITL approval workflows</li> <li>Agent task execution</li> <li>Agent security and tool restrictions \u2705</li> <li>Discord command parsing</li> <li>Project state persistence</li> </ul>"},{"location":"advanced/testing/#medium-priority-should-test","title":"Medium Priority (Should Test)","text":"<ul> <li>Multi-project coordination</li> <li>Error handling and recovery</li> <li>Performance under load</li> <li>State visualization</li> <li>Configuration management</li> </ul>"},{"location":"advanced/testing/#low-priority-nice-to-test","title":"Low Priority (Nice to Test)","text":"<ul> <li>Edge case error scenarios</li> <li>Stress testing beyond normal limits</li> <li>UI polish and formatting</li> <li>Advanced Discord features</li> </ul>"},{"location":"concepts/overview/","title":"System Overview","text":"<p>The AI Agent TDD-Scrum Workflow system is a Human-In-The-Loop orchestration framework that coordinates specialized AI agents for software development tasks.</p>"},{"location":"concepts/overview/#core-concepts","title":"Core Concepts","text":""},{"location":"concepts/overview/#multi-agent-coordination","title":"Multi-Agent Coordination","text":"<p>The system manages four specialized AI agents: - DesignAgent: Architecture and technical specifications - CodeAgent: Feature implementation and bug fixes - QAAgent: Testing and quality validation - DataAgent: Data analysis and visualization</p>"},{"location":"concepts/overview/#human-in-the-loop-control","title":"Human-In-The-Loop Control","text":"<p>Strategic decisions require human approval: - Epic and story creation - Sprint planning and execution - Code review and deployment - Error handling and escalation</p>"},{"location":"concepts/overview/#state-driven-workflow","title":"State-Driven Workflow","text":"<p>A finite state machine enforces proper development sequences: - <code>IDLE</code> \u2192 <code>BACKLOG_READY</code> \u2192 <code>SPRINT_PLANNED</code> \u2192 <code>SPRINT_ACTIVE</code> - Invalid commands are rejected with helpful guidance - Current state determines available actions</p>"},{"location":"concepts/overview/#two-repository-architecture","title":"Two-Repository Architecture","text":""},{"location":"concepts/overview/#orchestration-repository","title":"Orchestration Repository","text":"<p>Purpose: Central coordination framework - Agent definitions and capabilities - Workflow engine and state machine - Discord bot and user interface - Security policies and tool restrictions</p>"},{"location":"concepts/overview/#project-repositories","title":"Project Repositories","text":"<p>Purpose: Individual development projects - Project source code - Embedded workflow data (<code>.orch-state/</code> directory) - Sprint plans, backlogs, and progress tracking - Architecture decisions and documentation</p> <p>Benefits: - Project data stays with project code - Version control for management artifacts - Easy project migration between orchestrator instances - Clear security boundaries</p>"},{"location":"concepts/overview/#key-components","title":"Key Components","text":""},{"location":"concepts/overview/#discord-interface","title":"Discord Interface","text":"<p>Primary user interaction through slash commands: - <code>/epic \"description\"</code> - Define high-level initiatives - <code>/sprint plan|start|status</code> - Manage development cycles - <code>/approve [ID...]</code> - Authorize agent actions - <code>/state</code> - Interactive system inspection</p>"},{"location":"concepts/overview/#state-machine","title":"State Machine","text":"<p>Enforces proper workflow sequences: - Prevents invalid operations - Guides users through correct command sequences - Provides clear error messages - Visual state diagrams for understanding</p>"},{"location":"concepts/overview/#agent-security","title":"Agent Security","text":"<p>Tool access control ensures safe operation: - DesignAgent: Read-only documentation creation - CodeAgent: Code editing and version control - QAAgent: Testing and quality analysis only - DataAgent: Data processing and visualization</p>"},{"location":"concepts/overview/#project-management","title":"Project Management","text":"<p>Integrated development lifecycle: - Epic and story hierarchies - Sprint planning and execution - Progress tracking and reporting - Automated task escalation</p>"},{"location":"concepts/overview/#workflow-philosophy","title":"Workflow Philosophy","text":"<p>The system follows research-mode Scrum principles: - Minimal ceremony, maximum momentum - Solo engineer optimization - AI-assisted task execution - Human oversight for strategic decisions - Continuous learning and adaptation</p> <p>This approach balances automation benefits with human control, ensuring high-quality output while reducing manual effort.</p>"},{"location":"concepts/security/","title":"Security Model","text":"<p>The AI Agent system implements comprehensive security controls to ensure safe operation in development environments.</p>"},{"location":"concepts/security/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<p>Each agent type has specific tool access restrictions based on their function:</p>"},{"location":"concepts/security/#agent-access-levels","title":"Agent Access Levels","text":"<p>DesignAgent - Allowed: File reading, documentation creation, web research - Restricted: Code editing, version control, system commands - Purpose: Architecture design and specifications</p> <p>CodeAgent - Allowed: File editing, git add/commit, testing tools, package management - Restricted: File deletion, git push, system administration - Purpose: Feature implementation and code changes</p> <p>QAAgent - Allowed: Test execution, code quality tools, coverage analysis - Restricted: Code modification, version control, file creation - Purpose: Quality validation and testing</p> <p>DataAgent - Allowed: Data file access, notebook creation, visualization tools - Restricted: Source code modification, version control - Purpose: Data analysis and reporting</p>"},{"location":"concepts/security/#security-boundaries","title":"Security Boundaries","text":""},{"location":"concepts/security/#command-access-control","title":"Command Access Control","text":"<p>The system enforces tool restrictions through: - Claude Code CLI flags (<code>--allowedTools</code>/<code>--disallowedTools</code>) - Automatic security boundary application - Runtime validation of agent actions - Comprehensive audit logging</p>"},{"location":"concepts/security/#human-approval-gates","title":"Human Approval Gates","text":"<p>Critical operations require explicit approval: - Code deployment and publishing - System configuration changes - Security-sensitive code modifications - External service integrations</p>"},{"location":"concepts/security/#safe-defaults","title":"Safe Defaults","text":"<p>The system operates with secure defaults: - Agents cannot execute dangerous system commands - Version control operations are limited by agent type - File system access is scoped appropriately - Network access follows least-privilege principles</p>"},{"location":"concepts/security/#data-protection","title":"Data Protection","text":""},{"location":"concepts/security/#project-isolation","title":"Project Isolation","text":"<p>Each project maintains separate: - State files and configuration - Agent execution contexts - Access permissions and policies - Audit trails and logs</p>"},{"location":"concepts/security/#sensitive-information-handling","title":"Sensitive Information Handling","text":"<p>The system protects: - API keys and tokens (never committed to repositories) - Database credentials and connection strings - User personal information and preferences - Proprietary code and business logic</p>"},{"location":"concepts/security/#compliance-and-auditing","title":"Compliance and Auditing","text":""},{"location":"concepts/security/#activity-logging","title":"Activity Logging","text":"<p>All agent actions are logged: - Command execution and results - File modifications and version control - Human approval decisions - Error conditions and escalations</p>"},{"location":"concepts/security/#security-testing","title":"Security Testing","text":"<p>The security model is validated through: - Automated test suite for access controls - Integration tests for boundary enforcement - Manual security review processes - Regular security policy updates</p>"},{"location":"concepts/security/#best-practices","title":"Best Practices","text":""},{"location":"concepts/security/#for-users","title":"For Users","text":"<ul> <li>Review agent actions before approval</li> <li>Use appropriate agent types for tasks</li> <li>Monitor system logs for unusual activity</li> <li>Keep orchestrator software updated</li> </ul>"},{"location":"concepts/security/#for-developers","title":"For Developers","text":"<ul> <li>Follow security testing requirements</li> <li>Document new agent capabilities</li> <li>Implement proper error handling</li> <li>Validate all security boundary changes</li> </ul> <p>The security model ensures that AI agents operate safely within defined boundaries while maintaining the flexibility needed for effective development assistance.</p>"},{"location":"deployment/discord-setup/","title":"Discord Setup","text":"<p>Complete guide to setting up Discord for the AI Agent TDD-Scrum workflow system.</p>"},{"location":"deployment/discord-setup/#overview","title":"Overview","text":"<p>The Discord bot provides the primary Human-In-The-Loop interface for controlling the orchestrator and AI agents. This guide walks through the complete setup process.</p>"},{"location":"deployment/discord-setup/#step-1-create-discord-application","title":"Step 1: Create Discord Application","text":""},{"location":"deployment/discord-setup/#11-access-developer-portal","title":"1.1 Access Developer Portal","text":"<ol> <li>Go to the Discord Developer Portal</li> <li>Click \"New Application\"</li> <li>Enter a name: <code>AI Agent Workflow</code> (or your preferred name)</li> <li>Click \"Create\"</li> </ol>"},{"location":"deployment/discord-setup/#12-configure-application","title":"1.2 Configure Application","text":"<ol> <li>General Information tab:</li> <li>Add a description: \"AI Agent TDD-Scrum workflow orchestrator\"</li> <li>Upload an icon (optional)</li> <li> <p>Add tags: \"productivity\", \"development\" (optional)</p> </li> <li> <p>OAuth2 tab:</p> </li> <li>Copy the Client ID (you'll need this later)</li> </ol>"},{"location":"deployment/discord-setup/#step-2-create-bot","title":"Step 2: Create Bot","text":""},{"location":"deployment/discord-setup/#21-bot-configuration","title":"2.1 Bot Configuration","text":"<ol> <li>Navigate to the \"Bot\" tab</li> <li>Click \"Add Bot\"</li> <li>Confirm by clicking \"Yes, do it!\"</li> </ol>"},{"location":"deployment/discord-setup/#22-bot-settings","title":"2.2 Bot Settings","text":"<p>Configure the following settings:</p> <p>Public Bot: \u274c Disabled (keep private) Requires OAuth2 Code Grant: \u274c Disabled Presence Intent: \u2705 Enabled Server Members Intent: \u2705 Enabled Message Content Intent: \u2705 Enabled</p>"},{"location":"deployment/discord-setup/#23-get-bot-token","title":"2.3 Get Bot Token","text":"<ol> <li>In the Token section, click \"Reset Token\"</li> <li>Copy the token immediately (you won't see it again)</li> <li>Store securely - this is your <code>DISCORD_BOT_TOKEN</code></li> </ol> <p>Security Note: Never share your bot token publicly or commit it to version control.</p>"},{"location":"deployment/discord-setup/#step-3-bot-permissions","title":"Step 3: Bot Permissions","text":""},{"location":"deployment/discord-setup/#31-required-permissions","title":"3.1 Required Permissions","text":"<p>The bot needs these permissions: - Send Messages - Basic communication - Use Slash Commands - Primary command interface - Embed Links - Rich message formatting - Read Message History - Context awareness - Manage Threads - Organize discussions - Create Public Threads - Project discussions</p>"},{"location":"deployment/discord-setup/#32-calculate-permission-integer","title":"3.2 Calculate Permission Integer","text":"<p>Permission integer: <code>2147484736</code></p> <p>Or use the Discord Permissions Calculator: 1. Go to Discord Permissions Calculator 2. Select the permissions listed above 3. Copy the generated integer</p>"},{"location":"deployment/discord-setup/#step-4-invite-bot-to-server","title":"Step 4: Invite Bot to Server","text":""},{"location":"deployment/discord-setup/#41-generate-invite-url","title":"4.1 Generate Invite URL","text":"<p>Using OAuth2 URL Generator in the Developer Portal:</p> <ol> <li>OAuth2 \u2192 URL Generator</li> <li>Scopes: Select <code>bot</code> and <code>applications.commands</code></li> <li>Bot Permissions: Select required permissions (or paste permission integer)</li> <li>Copy the generated URL</li> </ol>"},{"location":"deployment/discord-setup/#42-alternative-invite-url","title":"4.2 Alternative Invite URL","text":"<p>Replace <code>YOUR_CLIENT_ID</code> with your actual Client ID:</p> <pre><code>https://discord.com/api/oauth2/authorize?client_id=YOUR_CLIENT_ID&amp;permissions=2147484736&amp;scope=bot%20applications.commands\n</code></pre>"},{"location":"deployment/discord-setup/#43-complete-invitation","title":"4.3 Complete Invitation","text":"<ol> <li>Open the invite URL in your browser</li> <li>Select the Discord server for testing</li> <li>Click \"Continue\"</li> <li>Verify permissions and click \"Authorize\"</li> <li>Complete any CAPTCHA if prompted</li> </ol>"},{"location":"deployment/discord-setup/#step-5-environment-configuration","title":"Step 5: Environment Configuration","text":""},{"location":"deployment/discord-setup/#51-set-environment-variable","title":"5.1 Set Environment Variable","text":"<p>Linux/Mac: <pre><code>export DISCORD_BOT_TOKEN=\"your_bot_token_here\"\necho 'export DISCORD_BOT_TOKEN=\"your_bot_token_here\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> <p>Windows (PowerShell): <pre><code>$env:DISCORD_BOT_TOKEN=\"your_bot_token_here\"\n[System.Environment]::SetEnvironmentVariable(\"DISCORD_BOT_TOKEN\", \"your_bot_token_here\", \"User\")\n</code></pre></p> <p>Windows (Command Prompt): <pre><code>set DISCORD_BOT_TOKEN=your_bot_token_here\nsetx DISCORD_BOT_TOKEN \"your_bot_token_here\"\n</code></pre></p>"},{"location":"deployment/discord-setup/#52-using-env-file-development","title":"5.2 Using .env File (Development)","text":"<p>Create a <code>.env</code> file in your project root:</p> <pre><code># .env\nDISCORD_BOT_TOKEN=your_bot_token_here\nANTHROPIC_API_KEY=your_anthropic_key  # Optional\nGITHUB_TOKEN=your_github_token        # Optional\n</code></pre> <p>Add to <code>.gitignore</code>: <pre><code>echo \".env\" &gt;&gt; .gitignore\n</code></pre></p>"},{"location":"deployment/discord-setup/#step-6-test-bot-connection","title":"Step 6: Test Bot Connection","text":""},{"location":"deployment/discord-setup/#61-start-the-bot","title":"6.1 Start the Bot","text":"<pre><code># From project root\npython lib/discord_bot.py\n</code></pre>"},{"location":"deployment/discord-setup/#62-verify-connection","title":"6.2 Verify Connection","text":"<p>Look for these success messages: <pre><code>INFO - Discord bot started successfully\nINFO - Slash commands registered\nINFO - Bot is ready and listening for commands\n</code></pre></p>"},{"location":"deployment/discord-setup/#63-test-commands","title":"6.3 Test Commands","text":"<p>In your Discord server, try these commands:</p> <pre><code>/state\n/epic \"Test epic creation\"\n</code></pre> <p>If the bot responds, your setup is successful!</p>"},{"location":"deployment/discord-setup/#step-7-production-configuration","title":"Step 7: Production Configuration","text":""},{"location":"deployment/discord-setup/#71-server-setup","title":"7.1 Server Setup","text":"<p>For production deployment:</p> <ol> <li>Create a dedicated Discord server for the workflow</li> <li>Set up project-specific channels (auto-created by bot)</li> <li>Configure user roles and permissions</li> <li>Set up logging channels for monitoring</li> </ol>"},{"location":"deployment/discord-setup/#72-channel-organization","title":"7.2 Channel Organization","text":"<p>The bot automatically creates channels with this pattern: - <code>hostname-projectname-general</code> - Main project discussion - <code>hostname-projectname-alerts</code> - System notifications - <code>hostname-projectname-logs</code> - Detailed operation logs</p>"},{"location":"deployment/discord-setup/#73-user-management","title":"7.3 User Management","text":"<p>Grant appropriate permissions: - Workflow Manager: Full access to all commands - Developer: Access to project-specific commands - Observer: Read-only access to status commands</p>"},{"location":"deployment/discord-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/discord-setup/#common-issues","title":"Common Issues","text":"<p>Bot doesn't appear online: - Verify bot token is correct - Check network connectivity - Ensure intents are enabled in Developer Portal</p> <p>Slash commands not appearing: - Wait up to 1 hour for global command registration - Try in a different server to test guild vs global commands - Check bot permissions in server settings</p> <p>Bot responds with \"Unknown interaction\": - Restart the bot application - Verify slash command registration in logs - Check Discord API status</p> <p>Permission errors: - Verify bot has required permissions in server - Check channel-specific permission overrides - Ensure bot role is positioned correctly in hierarchy</p>"},{"location":"deployment/discord-setup/#debug-commands","title":"Debug Commands","text":"<p>Test bot functionality:</p> <pre><code># Test Discord connection only\npython -c \"\nimport discord\nimport os\nclient = discord.Client()\n@client.event\nasync def on_ready():\n    print(f'Connected as {client.user}')\n    await client.close()\nclient.run(os.environ['DISCORD_BOT_TOKEN'])\n\"\n\n# Test slash command registration\npython scripts/test-discord-commands.py\n</code></pre>"},{"location":"deployment/discord-setup/#log-analysis","title":"Log Analysis","text":"<p>Monitor these log files: - <code>logs/discord-bot.log</code> - Bot operation logs - <code>logs/orchestrator.log</code> - System coordination logs - <code>logs/agents/*.log</code> - Individual agent logs</p>"},{"location":"deployment/discord-setup/#security-best-practices","title":"Security Best Practices","text":""},{"location":"deployment/discord-setup/#token-management","title":"Token Management","text":"<ul> <li>Never commit tokens to version control</li> <li>Use environment variables for production</li> <li>Rotate tokens regularly (quarterly recommended)</li> <li>Limit bot scope to necessary servers only</li> </ul>"},{"location":"deployment/discord-setup/#server-security","title":"Server Security","text":"<ul> <li>Enable 2FA for server administrators</li> <li>Audit permissions regularly</li> <li>Monitor bot activity through logs</li> <li>Use private servers for sensitive projects</li> </ul>"},{"location":"deployment/discord-setup/#access-control","title":"Access Control","text":"<ul> <li>Restrict command access using Discord roles</li> <li>Monitor user activity in workflow channels</li> <li>Log all workflow decisions for audit trails</li> <li>Regular security reviews of bot permissions</li> </ul>"},{"location":"deployment/discord-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/discord-setup/#custom-command-prefix","title":"Custom Command Prefix","text":"<p>To use traditional prefix commands alongside slash commands:</p> <pre><code># In lib/discord_bot.py\n@bot.command(name='status')\nasync def status_command(ctx):\n    await ctx.send(\"Bot is running!\")\n</code></pre>"},{"location":"deployment/discord-setup/#webhook-integration","title":"Webhook Integration","text":"<p>For external system integration:</p> <pre><code># Webhook setup for external notifications\nwebhook_url = \"https://discord.com/api/webhooks/...\"\nasync def send_webhook_notification(message):\n    async with aiohttp.ClientSession() as session:\n        await session.post(webhook_url, json={\"content\": message})\n</code></pre>"},{"location":"deployment/discord-setup/#custom-embeds","title":"Custom Embeds","text":"<p>For rich message formatting:</p> <pre><code>import discord\n\nembed = discord.Embed(\n    title=\"Sprint Status\",\n    description=\"Current sprint progress\",\n    color=0x00ff00\n)\nembed.add_field(name=\"Stories Complete\", value=\"3/5\", inline=True)\nembed.add_field(name=\"Time Remaining\", value=\"2 days\", inline=True)\nawait ctx.send(embed=embed)\n</code></pre> <p>Your Discord bot is now ready to orchestrate AI agents through an intuitive chat interface!</p>"},{"location":"deployment/github-pages/","title":"GitHub Pages Deployment","text":"<p>Deploy the documentation to GitHub Pages for easy access and sharing.</p>"},{"location":"deployment/github-pages/#prerequisites","title":"Prerequisites","text":"<ul> <li>GitHub repository with the documentation</li> <li>Admin access to the repository</li> <li>MkDocs installed locally for testing</li> </ul>"},{"location":"deployment/github-pages/#quick-setup","title":"Quick Setup","text":""},{"location":"deployment/github-pages/#1-configure-mkdocs-for-github-pages","title":"1. Configure MkDocs for GitHub Pages","text":"<p>The <code>mkdocs.yml</code> file is already configured with the correct site URL:</p> <pre><code>site_url: https://jmontp.github.io/agent-workflow/\nrepo_url: https://github.com/jmontp/agent-workflow\nrepo_name: jmontp/agent-workflow\n</code></pre>"},{"location":"deployment/github-pages/#2-deploy-using-mkdocs-command","title":"2. Deploy Using MkDocs Command","text":"<p>From the repository root:</p> <pre><code># Build and deploy to GitHub Pages\nmkdocs gh-deploy --clean\n</code></pre> <p>This command will: - Build the documentation site - Create/update the <code>gh-pages</code> branch - Push the generated site to GitHub</p>"},{"location":"deployment/github-pages/#3-enable-github-pages","title":"3. Enable GitHub Pages","text":"<ol> <li>Go to your repository on GitHub</li> <li>Navigate to Settings \u2192 Pages</li> <li>Under Source, select Deploy from a branch</li> <li>Choose gh-pages branch and / (root) folder</li> <li>Click Save</li> </ol> <p>The documentation will be available at: <code>https://jmontp.github.io/agent-workflow/</code></p>"},{"location":"deployment/github-pages/#automated-deployment","title":"Automated Deployment","text":""},{"location":"deployment/github-pages/#github-actions-workflow","title":"GitHub Actions Workflow","text":"<p>Create <code>.github/workflows/docs.yml</code> for automatic deployment:</p> <pre><code>name: Deploy Documentation\n\non:\n  push:\n    branches: [main, master]\n    paths:\n      - 'docs_src/**'\n      - 'mkdocs.yml'\n  workflow_dispatch:\n\npermissions:\n  contents: read\n  pages: write\n  id-token: write\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          fetch-depth: 0\n\n      - name: Setup Python\n        uses: actions/setup-python@v4\n        with:\n          python-version: '3.x'\n\n      - name: Install dependencies\n        run: |\n          pip install mkdocs-material\n          pip install pymdown-extensions\n\n      - name: Build and deploy\n        run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"deployment/github-pages/#manual-deployment-commands","title":"Manual Deployment Commands","text":"<p>For local development and testing:</p> <pre><code># Preview locally\nmkdocs serve\n\n# Build static site\nmkdocs build\n\n# Deploy to GitHub Pages\nmkdocs gh-deploy --clean\n\n# Deploy with custom commit message\nmkdocs gh-deploy -m \"Update documentation\"\n</code></pre>"},{"location":"deployment/github-pages/#custom-domain-optional","title":"Custom Domain (Optional)","text":""},{"location":"deployment/github-pages/#1-configure-dns","title":"1. Configure DNS","text":"<p>If you have a custom domain, add a <code>CNAME</code> file:</p> <pre><code># Add to docs_src/CNAME\necho \"docs.yourdomain.com\" &gt; docs_src/CNAME\n</code></pre>"},{"location":"deployment/github-pages/#2-update-mkdocs-configuration","title":"2. Update MkDocs Configuration","text":"<pre><code>site_url: https://docs.yourdomain.com/\n</code></pre>"},{"location":"deployment/github-pages/#3-configure-github-pages","title":"3. Configure GitHub Pages","text":"<ol> <li>Go to Settings \u2192 Pages</li> <li>Enter your custom domain</li> <li>Enable Enforce HTTPS</li> </ol>"},{"location":"deployment/github-pages/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/github-pages/#common-issues","title":"Common Issues","text":"<p>Pages not updating: - Check the Actions tab for deployment status - Ensure the <code>gh-pages</code> branch exists - Wait up to 10 minutes for changes to propagate</p> <p>404 errors: - Verify the site URL in <code>mkdocs.yml</code> - Check that GitHub Pages is enabled - Ensure the correct branch is selected</p> <p>Build failures: - Check that all plugins are installed - Verify markdown syntax in documentation files - Review GitHub Actions logs for errors</p>"},{"location":"deployment/github-pages/#branch-protection","title":"Branch Protection","text":"<p>If your repository has branch protection rules:</p> <ol> <li>Allow the GitHub Actions bot to push to <code>gh-pages</code></li> <li>Or create the branch manually and exempt it from protection</li> <li>Use a personal access token with appropriate permissions</li> </ol>"},{"location":"deployment/github-pages/#best-practices","title":"Best Practices","text":""},{"location":"deployment/github-pages/#content-organization","title":"Content Organization","text":"<ul> <li>Keep documentation source in <code>docs_src/</code></li> <li>Use clear, descriptive filenames</li> <li>Maintain consistent navigation structure</li> <li>Include relative links between pages</li> </ul>"},{"location":"deployment/github-pages/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Optimize images and media files</li> <li>Use MkDocs caching for faster builds</li> <li>Consider using a CDN for better global performance</li> </ul>"},{"location":"deployment/github-pages/#seo-and-accessibility","title":"SEO and Accessibility","text":"<ul> <li>Include meta descriptions in frontmatter</li> <li>Use proper heading hierarchy</li> <li>Add alt text for images</li> <li>Test with screen readers</li> </ul>"},{"location":"deployment/github-pages/#maintenance","title":"Maintenance","text":"<ul> <li>Set up automated link checking</li> <li>Regular review and updates</li> <li>Monitor GitHub Pages usage limits</li> <li>Keep dependencies updated</li> </ul>"},{"location":"deployment/github-pages/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"deployment/github-pages/#custom-themes","title":"Custom Themes","text":"<p>Customize the Material theme:</p> <pre><code>theme:\n  name: material\n  custom_dir: overrides\n  palette:\n    - scheme: default\n      primary: custom-color\n  logo: assets/logo.png\n  favicon: assets/favicon.ico\n</code></pre>"},{"location":"deployment/github-pages/#analytics-integration","title":"Analytics Integration","text":"<p>Add Google Analytics:</p> <pre><code>extra:\n  analytics:\n    provider: google\n    property: GA_MEASUREMENT_ID\n</code></pre>"},{"location":"deployment/github-pages/#social-media-cards","title":"Social Media Cards","text":"<p>Configure Open Graph metadata:</p> <pre><code>extra:\n  social:\n    - icon: fontawesome/brands/github\n      link: https://github.com/jmontp/agent-workflow\n    - icon: fontawesome/brands/twitter\n      link: https://twitter.com/username\n</code></pre>"},{"location":"deployment/github-pages/#monitoring-and-analytics","title":"Monitoring and Analytics","text":"<ul> <li>Use GitHub repository insights</li> <li>Monitor page views in GitHub Pages settings</li> <li>Set up Google Analytics for detailed metrics</li> <li>Track user engagement and popular content</li> </ul> <p>The documentation site will automatically update whenever changes are pushed to the main branch, ensuring the published docs stay current with development.</p>"},{"location":"deployment/production/","title":"Production Deployment","text":"<p>Guide for deploying the AI Agent TDD-Scrum workflow system to production environments.</p>"},{"location":"deployment/production/#overview","title":"Overview","text":"<p>This guide covers production deployment strategies for running the orchestrator reliably in various environments, from small teams to enterprise scale.</p>"},{"location":"deployment/production/#deployment-options","title":"Deployment Options","text":""},{"location":"deployment/production/#option-1-self-hosted-server","title":"Option 1: Self-Hosted Server","text":"<p>Best for: Small to medium teams with dedicated infrastructure.</p> <p>Requirements: - Linux server (Ubuntu 20.04+ or CentOS 8+) - Python 3.8+  - 4GB RAM minimum, 8GB recommended - 20GB disk space minimum - Stable internet connection</p> <p>Setup: <pre><code># Create dedicated user\nsudo useradd -m -s /bin/bash agent-workflow\nsudo su - agent-workflow\n\n# Clone and setup\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n</code></pre></p>"},{"location":"deployment/production/#option-2-docker-deployment","title":"Option 2: Docker Deployment","text":"<p>Best for: Containerized environments and easier scaling.</p> <p>Dockerfile: <pre><code>FROM python:3.9-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    git \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements and install Python dependencies\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd -m -u 1001 agent-workflow\nUSER agent-workflow\n\n# Expose port for health checks\nEXPOSE 8080\n\nCMD [\"python\", \"scripts/orchestrator.py\"]\n</code></pre></p> <p>Docker Compose: <pre><code>version: '3.8'\n\nservices:\n  orchestrator:\n    build: .\n    environment:\n      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}\n      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}\n      - ENVIRONMENT=production\n    volumes:\n      - ./config:/app/config\n      - ./logs:/app/logs\n      - ./projects:/app/projects\n    restart: unless-stopped\n    healthcheck:\n      test: [\"CMD\", \"python\", \"scripts/health-check.py\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/ssl\n    depends_on:\n      - orchestrator\n    restart: unless-stopped\n</code></pre></p>"},{"location":"deployment/production/#option-3-cloud-deployment","title":"Option 3: Cloud Deployment","text":""},{"location":"deployment/production/#aws-deployment","title":"AWS Deployment","text":"<p>EC2 Instance: <pre><code># Launch EC2 instance (t3.medium recommended)\n# Install Docker and Docker Compose\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\nsudo usermod -aG docker ubuntu\n\n# Deploy with docker-compose\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\ncp .env.example .env\n# Edit .env with production values\ndocker-compose up -d\n</code></pre></p> <p>ECS Deployment: <pre><code>{\n  \"family\": \"agent-workflow\",\n  \"taskRoleArn\": \"arn:aws:iam::ACCOUNT:role/agent-workflow-task-role\",\n  \"executionRoleArn\": \"arn:aws:iam::ACCOUNT:role/agent-workflow-execution-role\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"1024\",\n  \"memory\": \"2048\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"orchestrator\",\n      \"image\": \"your-registry/agent-workflow:latest\",\n      \"essential\": true,\n      \"environment\": [\n        {\"name\": \"ENVIRONMENT\", \"value\": \"production\"}\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"DISCORD_BOT_TOKEN\",\n          \"valueFrom\": \"arn:aws:secretsmanager:region:account:secret:discord-token\"\n        }\n      ]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"deployment/production/#google-cloud-platform","title":"Google Cloud Platform","text":"<p>Cloud Run Deployment: <pre><code># cloudbuild.yaml\nsteps:\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['build', '-t', 'gcr.io/$PROJECT_ID/agent-workflow:$COMMIT_SHA', '.']\n  - name: 'gcr.io/cloud-builders/docker'\n    args: ['push', 'gcr.io/$PROJECT_ID/agent-workflow:$COMMIT_SHA']\n  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'\n    entrypoint: 'gcloud'\n    args:\n      - 'run'\n      - 'deploy'\n      - 'agent-workflow'\n      - '--image=gcr.io/$PROJECT_ID/agent-workflow:$COMMIT_SHA'\n      - '--region=us-central1'\n      - '--platform=managed'\n      - '--memory=2Gi'\n      - '--cpu=1'\n</code></pre></p>"},{"location":"deployment/production/#configuration-management","title":"Configuration Management","text":""},{"location":"deployment/production/#environment-variables","title":"Environment Variables","text":"<p>Production Environment Variables: <pre><code># Core Configuration\nENVIRONMENT=production\nDISCORD_BOT_TOKEN=your_production_token\nLOG_LEVEL=INFO\n\n# AI Integration\nANTHROPIC_API_KEY=your_anthropic_key\nOPENAI_API_KEY=your_openai_key  # If using OpenAI\n\n# Database (if using external storage)\nDATABASE_URL=postgresql://user:pass@host:5432/dbname\n\n# Monitoring\nSENTRY_DSN=your_sentry_dsn\nDATADOG_API_KEY=your_datadog_key\n\n# Security\nJWT_SECRET=your_jwt_secret\nENCRYPTION_KEY=your_encryption_key\n</code></pre></p>"},{"location":"deployment/production/#configuration-files","title":"Configuration Files","text":"<p>Production config.yml: <pre><code>orchestrator:\n  mode: blocking\n  max_concurrent_projects: 10\n  state_save_interval: 30\n  backup_interval: 3600\n\ndiscord:\n  command_timeout: 300\n  max_commands_per_minute: 60\n  error_channel_id: \"123456789\"\n\nagents:\n  timeout_minutes: 45\n  max_retries: 5\n  claude_model: \"claude-3-sonnet\"\n\nlogging:\n  level: INFO\n  format: json\n  rotation: daily\n  retention_days: 30\n\nmonitoring:\n  health_check_interval: 60\n  metrics_collection: true\n  alert_thresholds:\n    error_rate: 0.05\n    response_time: 30\n</code></pre></p>"},{"location":"deployment/production/#process-management","title":"Process Management","text":""},{"location":"deployment/production/#systemd-service-linux","title":"Systemd Service (Linux)","text":"<p><code>/etc/systemd/system/agent-workflow.service</code>: <pre><code>[Unit]\nDescription=AI Agent Workflow Orchestrator\nAfter=network.target\nWants=network.target\n\n[Service]\nType=simple\nUser=agent-workflow\nGroup=agent-workflow\nWorkingDirectory=/home/agent-workflow/agent-workflow\nEnvironment=PATH=/home/agent-workflow/agent-workflow/venv/bin\nExecStart=/home/agent-workflow/agent-workflow/venv/bin/python scripts/orchestrator.py\nExecReload=/bin/kill -HUP $MAINPID\nRestart=always\nRestartSec=10\n\n# Environment variables\nEnvironmentFile=/home/agent-workflow/.env\n\n# Security\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/home/agent-workflow/agent-workflow/logs\nReadWritePaths=/home/agent-workflow/agent-workflow/projects\n\n[Install]\nWantedBy=multi-user.target\n</code></pre></p> <p>Service Management: <pre><code># Enable and start service\nsudo systemctl enable agent-workflow\nsudo systemctl start agent-workflow\n\n# Check status\nsudo systemctl status agent-workflow\n\n# View logs\nsudo journalctl -u agent-workflow -f\n</code></pre></p>"},{"location":"deployment/production/#supervisor-alternative","title":"Supervisor (Alternative)","text":"<p><code>/etc/supervisor/conf.d/agent-workflow.conf</code>: <pre><code>[program:agent-workflow]\ncommand=/home/agent-workflow/agent-workflow/venv/bin/python scripts/orchestrator.py\ndirectory=/home/agent-workflow/agent-workflow\nuser=agent-workflow\nautostart=true\nautorestart=true\nstderr_logfile=/var/log/agent-workflow/error.log\nstdout_logfile=/var/log/agent-workflow/output.log\nenvironment=DISCORD_BOT_TOKEN=\"your_token\"\n</code></pre></p>"},{"location":"deployment/production/#security","title":"Security","text":""},{"location":"deployment/production/#ssltls-configuration","title":"SSL/TLS Configuration","text":"<p>Nginx SSL Configuration: <pre><code>server {\n    listen 443 ssl http2;\n    server_name workflow.yourdomain.com;\n\n    ssl_certificate /etc/ssl/certs/workflow.crt;\n    ssl_certificate_key /etc/ssl/private/workflow.key;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS;\n    ssl_prefer_server_ciphers off;\n\n    location /health {\n        proxy_pass http://127.0.0.1:8080/health;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre></p>"},{"location":"deployment/production/#secret-management","title":"Secret Management","text":"<p>Using HashiCorp Vault: <pre><code>import hvac\n\n# vault_client.py\nclass VaultClient:\n    def __init__(self, vault_url, vault_token):\n        self.client = hvac.Client(url=vault_url, token=vault_token)\n\n    def get_secret(self, path):\n        response = self.client.secrets.kv.v2.read_secret_version(path=path)\n        return response['data']['data']\n\n# Usage in orchestrator\nvault = VaultClient(os.environ['VAULT_URL'], os.environ['VAULT_TOKEN'])\ndiscord_token = vault.get_secret('agent-workflow/discord')['token']\n</code></pre></p> <p>Using AWS Secrets Manager: <pre><code>import boto3\n\ndef get_secret(secret_name, region='us-east-1'):\n    session = boto3.session.Session()\n    client = session.client('secretsmanager', region_name=region)\n    response = client.get_secret_value(SecretId=secret_name)\n    return json.loads(response['SecretString'])\n</code></pre></p>"},{"location":"deployment/production/#firewall-configuration","title":"Firewall Configuration","text":"<p>UFW (Ubuntu): <pre><code># Basic firewall setup\nsudo ufw default deny incoming\nsudo ufw default allow outgoing\nsudo ufw allow ssh\nsudo ufw allow 80\nsudo ufw allow 443\nsudo ufw enable\n</code></pre></p> <p>Security Groups (AWS): <pre><code>{\n  \"GroupName\": \"agent-workflow-sg\",\n  \"Description\": \"Security group for Agent Workflow\",\n  \"IpPermissions\": [\n    {\n      \"IpProtocol\": \"tcp\",\n      \"FromPort\": 22,\n      \"ToPort\": 22,\n      \"IpRanges\": [{\"CidrIp\": \"your.office.ip/32\"}]\n    },\n    {\n      \"IpProtocol\": \"tcp\", \n      \"FromPort\": 443,\n      \"ToPort\": 443,\n      \"IpRanges\": [{\"CidrIp\": \"0.0.0.0/0\"}]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"deployment/production/#monitoring","title":"Monitoring","text":""},{"location":"deployment/production/#health-checks","title":"Health Checks","text":"<p>Health Check Script: <pre><code>#!/usr/bin/env python3\n# scripts/health-check.py\n\nimport asyncio\nimport sys\nfrom lib.orchestrator import Orchestrator\n\nasync def health_check():\n    try:\n        orchestrator = Orchestrator()\n        state = await orchestrator.get_state()\n\n        # Check if orchestrator is responsive\n        if state is None:\n            return False\n\n        # Check Discord connection\n        if not orchestrator.discord_bot.is_ready():\n            return False\n\n        return True\n    except Exception as e:\n        print(f\"Health check failed: {e}\")\n        return False\n\nif __name__ == \"__main__\":\n    healthy = asyncio.run(health_check())\n    sys.exit(0 if healthy else 1)\n</code></pre></p>"},{"location":"deployment/production/#logging","title":"Logging","text":"<p>Structured Logging Configuration: <pre><code>import logging\nimport json\nfrom datetime import datetime\n\nclass JSONFormatter(logging.Formatter):\n    def format(self, record):\n        log_entry = {\n            'timestamp': datetime.utcnow().isoformat(),\n            'level': record.levelname,\n            'logger': record.name,\n            'message': record.getMessage(),\n            'module': record.module,\n            'function': record.funcName,\n            'line': record.lineno\n        }\n\n        if record.exc_info:\n            log_entry['exception'] = self.formatException(record.exc_info)\n\n        return json.dumps(log_entry)\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(message)s',\n    handlers=[\n        logging.FileHandler('/var/log/agent-workflow/app.log'),\n        logging.StreamHandler()\n    ]\n)\n\nfor handler in logging.root.handlers:\n    handler.setFormatter(JSONFormatter())\n</code></pre></p>"},{"location":"deployment/production/#metrics-collection","title":"Metrics Collection","text":"<p>Prometheus Metrics: <pre><code>from prometheus_client import Counter, Histogram, Gauge, start_http_server\n\n# Define metrics\ncommands_total = Counter('discord_commands_total', 'Total Discord commands processed', ['command', 'status'])\nagent_execution_duration = Histogram('agent_execution_seconds', 'Agent task execution time', ['agent_type'])\nactive_sprints = Gauge('active_sprints_total', 'Number of active sprints')\n\n# Usage in code\ncommands_total.labels(command='epic', status='success').inc()\nagent_execution_duration.labels(agent_type='CodeAgent').observe(task_duration)\nactive_sprints.set(len(active_sprint_list))\n\n# Start metrics server\nstart_http_server(8000)\n</code></pre></p>"},{"location":"deployment/production/#backup-and-recovery","title":"Backup and Recovery","text":""},{"location":"deployment/production/#data-backup","title":"Data Backup","text":"<p>Backup Script: <pre><code>#!/bin/bash\n# scripts/backup.sh\n\nBACKUP_DIR=\"/backup/agent-workflow\"\nDATE=$(date +%Y%m%d_%H%M%S)\nPROJECT_DIR=\"/home/agent-workflow/agent-workflow\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/$DATE\n\n# Backup configuration\ncp -r $PROJECT_DIR/config $BACKUP_DIR/$DATE/\n\n# Backup project data\ncp -r $PROJECT_DIR/projects $BACKUP_DIR/$DATE/\n\n# Backup logs (last 7 days)\nfind $PROJECT_DIR/logs -mtime -7 -type f -exec cp {} $BACKUP_DIR/$DATE/logs/ \\;\n\n# Compress backup\ntar -czf $BACKUP_DIR/agent-workflow-$DATE.tar.gz -C $BACKUP_DIR $DATE\nrm -rf $BACKUP_DIR/$DATE\n\n# Clean old backups (keep 30 days)\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: agent-workflow-$DATE.tar.gz\"\n</code></pre></p>"},{"location":"deployment/production/#database-backup-if-using-external-db","title":"Database Backup (if using external DB)","text":"<p>PostgreSQL Backup: <pre><code>#!/bin/bash\n# Automated database backup\npg_dump -h localhost -U agent_workflow -d agent_workflow_prod &gt; backup_$(date +%Y%m%d_%H%M%S).sql\n\n# Upload to S3\naws s3 cp backup_*.sql s3://your-backup-bucket/database/\n</code></pre></p>"},{"location":"deployment/production/#scaling","title":"Scaling","text":""},{"location":"deployment/production/#horizontal-scaling","title":"Horizontal Scaling","text":"<p>Multiple Orchestrator Instances: <pre><code># Load balancer configuration for multiple instances\n# Use Redis for shared state management\n\nimport redis\nimport json\n\nclass SharedStateManager:\n    def __init__(self, redis_url):\n        self.redis = redis.from_url(redis_url)\n\n    def save_state(self, project_id, state):\n        self.redis.set(f\"project:{project_id}:state\", json.dumps(state))\n\n    def load_state(self, project_id):\n        data = self.redis.get(f\"project:{project_id}:state\")\n        return json.loads(data) if data else None\n</code></pre></p>"},{"location":"deployment/production/#resource-optimization","title":"Resource Optimization","text":"<p>Memory and CPU Optimization: <pre><code># Optimize agent execution\nimport asyncio\nfrom concurrent.futures import ThreadPoolExecutor\n\nclass OptimizedOrchestrator:\n    def __init__(self, max_workers=4):\n        self.executor = ThreadPoolExecutor(max_workers=max_workers)\n        self.semaphore = asyncio.Semaphore(max_workers)\n\n    async def execute_agent_task(self, agent, task):\n        async with self.semaphore:\n            loop = asyncio.get_event_loop()\n            return await loop.run_in_executor(\n                self.executor, \n                agent.run, \n                task\n            )\n</code></pre></p>"},{"location":"deployment/production/#troubleshooting","title":"Troubleshooting","text":""},{"location":"deployment/production/#common-production-issues","title":"Common Production Issues","text":"<p>High Memory Usage: <pre><code># Monitor memory usage\nps aux | grep python | head -10\nfree -h\n\n# Tune Python garbage collection\nexport PYTHONGC=1  # Enable garbage collection debug\n</code></pre></p> <p>Discord Rate Limiting: <pre><code># Implement exponential backoff\nimport asyncio\nfrom discord.errors import HTTPException\n\nasync def send_with_retry(channel, message, max_retries=3):\n    for attempt in range(max_retries):\n        try:\n            return await channel.send(message)\n        except HTTPException as e:\n            if e.status == 429:  # Rate limited\n                retry_after = e.response.headers.get('Retry-After', 1)\n                await asyncio.sleep(float(retry_after))\n            else:\n                raise\n    raise Exception(\"Max retries exceeded\")\n</code></pre></p>"},{"location":"deployment/production/#log-analysis","title":"Log Analysis","text":"<p>Common Log Patterns: <pre><code># Find errors in last hour\ngrep -i error /var/log/agent-workflow/app.log | tail -100\n\n# Monitor agent failures\ngrep \"AgentExecutionError\" /var/log/agent-workflow/app.log\n\n# Check Discord connection issues\ngrep \"discord\" /var/log/agent-workflow/app.log | grep -i \"error\\|timeout\"\n</code></pre></p> <p>Your production deployment is now ready for reliable, scalable operation!</p>"},{"location":"development/api-reference/","title":"API Reference","text":"<p>Complete API reference for the AI Agent TDD-Scrum workflow system.</p>"},{"location":"development/api-reference/#core-classes","title":"Core Classes","text":""},{"location":"development/api-reference/#orchestrator","title":"Orchestrator","text":"<p>Main coordination engine for the workflow system.</p> <pre><code>from lib.orchestrator import Orchestrator\n\norchestrator = Orchestrator(config_path=\"config.yml\")\n</code></pre>"},{"location":"development/api-reference/#methods","title":"Methods","text":"<p><code>async create_epic(description: str, priority: str = \"medium\") -&gt; Epic</code></p> <p>Create a new epic with the given description.</p> <p>Parameters: - <code>description</code> (str): Human-readable description of the epic - <code>priority</code> (str, optional): Priority level (\"low\", \"medium\", \"high\"). Defaults to \"medium\"</p> <p>Returns: - <code>Epic</code>: The created epic instance</p> <p>Raises: - <code>ValueError</code>: If description is empty or invalid</p> <p>Example: <pre><code>epic = await orchestrator.create_epic(\"Build authentication system\", \"high\")\nprint(f\"Created epic: {epic.id}\")\n</code></pre></p> <p><code>async plan_sprint(story_ids: List[str]) -&gt; Sprint</code></p> <p>Plan a new sprint with the specified stories.</p> <p><code>async start_sprint() -&gt; bool</code></p> <p>Start the currently planned sprint.</p> <p><code>async get_state() -&gt; OrchestratorState</code></p> <p>Get the current orchestrator state.</p>"},{"location":"development/api-reference/#state-machine","title":"State Machine","text":"<p>Finite state machine managing workflow transitions.</p> <pre><code>from lib.state_machine import StateMachine, OrchestratorState\n\nstate_machine = StateMachine()\n</code></pre>"},{"location":"development/api-reference/#states","title":"States","text":"<ul> <li><code>IDLE</code>: Initial state, ready for epic creation</li> <li><code>BACKLOG_READY</code>: Epic created, ready for sprint planning</li> <li><code>SPRINT_PLANNED</code>: Sprint planned, ready to start</li> <li><code>SPRINT_ACTIVE</code>: Sprint in progress</li> <li><code>SPRINT_PAUSED</code>: Sprint temporarily paused</li> <li><code>SPRINT_REVIEW</code>: Sprint completed, awaiting review</li> <li><code>BLOCKED</code>: System blocked, requires intervention</li> </ul>"},{"location":"development/api-reference/#methods_1","title":"Methods","text":"<p><code>transition(current_state: OrchestratorState, command: str) -&gt; OrchestratorState</code></p> <p>Execute a state transition based on the current state and command.</p> <p><code>get_allowed_commands(state: OrchestratorState) -&gt; List[str]</code></p> <p>Get the list of commands allowed in the given state.</p>"},{"location":"development/api-reference/#data-models","title":"Data Models","text":""},{"location":"development/api-reference/#epic","title":"Epic","text":"<p>High-level initiative or feature area.</p> <pre><code>from lib.data_models import Epic\n\nepic = Epic(\n    id=\"AUTH-EPIC-001\",\n    description=\"Build comprehensive authentication system\",\n    priority=\"high\",\n    status=\"active\"\n)\n</code></pre>"},{"location":"development/api-reference/#attributes","title":"Attributes","text":"<ul> <li><code>id</code> (str): Unique identifier</li> <li><code>description</code> (str): Human-readable description</li> <li><code>priority</code> (str): Priority level (\"low\", \"medium\", \"high\")</li> <li><code>status</code> (str): Current status (\"pending\", \"active\", \"completed\")</li> <li><code>created_at</code> (datetime): Creation timestamp</li> <li><code>stories</code> (List[Story]): Associated stories</li> </ul>"},{"location":"development/api-reference/#methods_2","title":"Methods","text":"<p><code>add_story(story: Story) -&gt; None</code></p> <p>Add a story to this epic.</p> <p><code>to_dict() -&gt; dict</code></p> <p>Serialize epic to dictionary.</p> <p><code>from_dict(data: dict) -&gt; Epic</code> (classmethod)</p> <p>Create epic from dictionary.</p>"},{"location":"development/api-reference/#story","title":"Story","text":"<p>Specific, actionable task within an epic.</p> <pre><code>from lib.data_models import Story\n\nstory = Story(\n    id=\"AUTH-001\",\n    description=\"Create user registration form\",\n    epic_id=\"AUTH-EPIC-001\",\n    priority=\"high\"\n)\n</code></pre>"},{"location":"development/api-reference/#attributes_1","title":"Attributes","text":"<ul> <li><code>id</code> (str): Unique identifier</li> <li><code>description</code> (str): Detailed task description</li> <li><code>epic_id</code> (str): Parent epic identifier</li> <li><code>priority</code> (str): Priority level</li> <li><code>status</code> (str): Current status</li> <li><code>assigned_agent</code> (str, optional): Agent type assigned</li> <li><code>created_at</code> (datetime): Creation timestamp</li> </ul>"},{"location":"development/api-reference/#sprint","title":"Sprint","text":"<p>Time-boxed development iteration.</p> <pre><code>from lib.data_models import Sprint\n\nsprint = Sprint(\n    id=\"SPRINT-001\",\n    stories=[\"AUTH-001\", \"AUTH-002\"],\n    start_date=datetime.now(),\n    duration_days=7\n)\n</code></pre>"},{"location":"development/api-reference/#attributes_2","title":"Attributes","text":"<ul> <li><code>id</code> (str): Unique identifier</li> <li><code>stories</code> (List[str]): Story IDs included in sprint</li> <li><code>start_date</code> (datetime): Sprint start date</li> <li><code>duration_days</code> (int): Sprint length in days</li> <li><code>status</code> (str): Current status (\"planned\", \"active\", \"completed\")</li> </ul>"},{"location":"development/api-reference/#agent-system","title":"Agent System","text":""},{"location":"development/api-reference/#baseagent","title":"BaseAgent","text":"<p>Abstract base class for all agents.</p> <pre><code>from lib.agents.base_agent import BaseAgent\n\nclass CustomAgent(BaseAgent):\n    async def run(self, task: str, dry_run: bool = False) -&gt; str:\n        # Implementation\n        pass\n</code></pre>"},{"location":"development/api-reference/#methods_3","title":"Methods","text":"<p><code>async run(task: str, dry_run: bool = False) -&gt; str</code> (abstract)</p> <p>Execute the given task.</p> <p><code>get_capabilities() -&gt; List[str]</code></p> <p>Return list of agent capabilities.</p>"},{"location":"development/api-reference/#designagent","title":"DesignAgent","text":"<p>Specialized agent for architecture and design tasks.</p> <pre><code>from lib.agents.design_agent import DesignAgent\n\nagent = DesignAgent()\nresult = await agent.run(\"Create API specification for user authentication\")\n</code></pre>"},{"location":"development/api-reference/#capabilities","title":"Capabilities","text":"<ul> <li>System architecture design</li> <li>API specification creation</li> <li>Component interface design</li> <li>Technical documentation</li> <li>Design review and validation</li> </ul>"},{"location":"development/api-reference/#codeagent","title":"CodeAgent","text":"<p>Specialized agent for code implementation tasks.</p> <pre><code>from lib.agents.code_agent import CodeAgent\n\nagent = CodeAgent()\nresult = await agent.run(\"Implement user registration endpoint\")\n</code></pre>"},{"location":"development/api-reference/#capabilities_1","title":"Capabilities","text":"<ul> <li>Feature implementation</li> <li>Bug fixing and debugging</li> <li>Code refactoring</li> <li>Performance optimization</li> <li>Integration development</li> </ul>"},{"location":"development/api-reference/#qaagent","title":"QAAgent","text":"<p>Specialized agent for testing and quality assurance.</p> <pre><code>from lib.agents.qa_agent import QAAgent\n\nagent = QAAgent()\nresult = await agent.run(\"Create unit tests for authentication module\")\n</code></pre>"},{"location":"development/api-reference/#capabilities_2","title":"Capabilities","text":"<ul> <li>Test suite creation</li> <li>Quality validation</li> <li>Coverage analysis</li> <li>Performance testing</li> <li>Security testing</li> </ul>"},{"location":"development/api-reference/#dataagent","title":"DataAgent","text":"<p>Specialized agent for data analysis and visualization.</p> <pre><code>from lib.agents.data_agent import DataAgent\n\nagent = DataAgent()\nresult = await agent.run(\"Analyze user registration patterns\")\n</code></pre>"},{"location":"development/api-reference/#capabilities_3","title":"Capabilities","text":"<ul> <li>Data analysis and insights</li> <li>Pipeline creation</li> <li>Metrics reporting</li> <li>Visualization generation</li> <li>Statistical analysis</li> </ul>"},{"location":"development/api-reference/#discord-bot","title":"Discord Bot","text":"<p>Discord interface for Human-In-The-Loop control.</p> <pre><code>from lib.discord_bot import DiscordBot\n\nbot = DiscordBot(orchestrator=orchestrator)\n</code></pre>"},{"location":"development/api-reference/#commands","title":"Commands","text":"<p>All Discord commands are implemented as slash commands:</p> <ul> <li><code>/epic \"description\"</code> - Create new epic</li> <li><code>/approve [ID...]</code> - Approve pending items</li> <li><code>/sprint plan|start|status|pause|resume</code> - Sprint management</li> <li><code>/backlog view|add_story|prioritize</code> - Backlog operations</li> <li><code>/state</code> - Interactive state inspection</li> </ul>"},{"location":"development/api-reference/#storage-system","title":"Storage System","text":""},{"location":"development/api-reference/#projectstorage","title":"ProjectStorage","text":"<p>File-based persistence for project data.</p> <pre><code>from lib.project_storage import ProjectStorage\n\nstorage = ProjectStorage(project_path=\"/path/to/project\")\n</code></pre>"},{"location":"development/api-reference/#methods_4","title":"Methods","text":"<p><code>save_epic(epic: Epic) -&gt; None</code></p> <p>Persist epic to storage.</p> <p><code>load_epic(epic_id: str) -&gt; Epic</code></p> <p>Load epic from storage.</p> <p><code>save_sprint(sprint: Sprint) -&gt; None</code></p> <p>Persist sprint to storage.</p> <p><code>get_project_state() -&gt; dict</code></p> <p>Get complete project state.</p>"},{"location":"development/api-reference/#security-system","title":"Security System","text":""},{"location":"development/api-reference/#agent-tool-configuration","title":"Agent Tool Configuration","text":"<p>Security controls for agent capabilities.</p> <pre><code>from lib.agent_tool_config import get_agent_security_profile\n\nprofile = get_agent_security_profile(\"CodeAgent\")\nallowed_tools = profile[\"allowed_tools\"]\nblocked_tools = profile[\"blocked_tools\"]\n</code></pre>"},{"location":"development/api-reference/#security-profiles","title":"Security Profiles","text":"<p>Each agent type has specific tool restrictions:</p> <ul> <li>DesignAgent: Read-only access, documentation creation</li> <li>CodeAgent: Code editing, version control (limited)</li> <li>QAAgent: Testing tools only</li> <li>DataAgent: Data processing and visualization</li> </ul>"},{"location":"development/api-reference/#error-handling","title":"Error Handling","text":""},{"location":"development/api-reference/#custom-exceptions","title":"Custom Exceptions","text":"<pre><code>from lib.exceptions import (\n    InvalidStateTransitionError,\n    AgentExecutionError,\n    ConfigurationError\n)\n\ntry:\n    await orchestrator.start_sprint()\nexcept InvalidStateTransitionError as e:\n    print(f\"Invalid state transition: {e}\")\n</code></pre>"},{"location":"development/api-reference/#exception-types","title":"Exception Types","text":"<ul> <li><code>InvalidStateTransitionError</code>: Illegal state machine transition</li> <li><code>AgentExecutionError</code>: Agent task execution failure</li> <li><code>ConfigurationError</code>: Invalid configuration settings</li> <li><code>StorageError</code>: File system or data persistence error</li> </ul>"},{"location":"development/api-reference/#configuration","title":"Configuration","text":""},{"location":"development/api-reference/#config-schema","title":"Config Schema","text":"<pre><code>from lib.config import Config\n\nconfig = Config.from_file(\"config.yml\")\n</code></pre>"},{"location":"development/api-reference/#configuration-structure","title":"Configuration Structure","text":"<pre><code>orchestrator:\n  mode: \"blocking\"  # blocking, partial, autonomous\n  max_concurrent_projects: 3\n  state_save_interval: 60\n\ndiscord:\n  bot_token: \"your_token_here\"\n  command_prefix: \"/\"\n  max_commands_per_minute: 20\n\nagents:\n  timeout_minutes: 30\n  max_retries: 3\n\nprojects:\n  - name: \"web-app\"\n    path: \"/path/to/project\"\n    mode: \"partial\"\n</code></pre>"},{"location":"development/api-reference/#utilities","title":"Utilities","text":""},{"location":"development/api-reference/#logging","title":"Logging","text":"<pre><code>from lib.utils.logging import get_logger\n\nlogger = get_logger(__name__)\nlogger.info(\"Orchestrator started\")\n</code></pre>"},{"location":"development/api-reference/#async-helpers","title":"Async Helpers","text":"<pre><code>from lib.utils.async_helpers import run_with_timeout\n\nresult = await run_with_timeout(agent.run(task), timeout=300)\n</code></pre>"},{"location":"development/api-reference/#examples","title":"Examples","text":""},{"location":"development/api-reference/#complete-workflow-example","title":"Complete Workflow Example","text":"<pre><code>import asyncio\nfrom lib.orchestrator import Orchestrator\n\nasync def main():\n    # Initialize orchestrator\n    orchestrator = Orchestrator(\"config.yml\")\n\n    # Create epic\n    epic = await orchestrator.create_epic(\n        \"Build user authentication system\", \n        priority=\"high\"\n    )\n\n    # Plan sprint\n    sprint = await orchestrator.plan_sprint([\n        \"AUTH-001\", \"AUTH-002\", \"AUTH-003\"\n    ])\n\n    # Start sprint\n    success = await orchestrator.start_sprint()\n\n    if success:\n        print(\"Sprint started successfully!\")\n\n    # Monitor progress\n    while True:\n        state = await orchestrator.get_state()\n        if state == \"SPRINT_REVIEW\":\n            break\n        await asyncio.sleep(30)  # Check every 30 seconds\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"development/api-reference/#custom-agent-example","title":"Custom Agent Example","text":"<pre><code>from lib.agents.base_agent import BaseAgent\n\nclass DocumentationAgent(BaseAgent):\n    \"\"\"Agent specialized in creating and maintaining documentation.\"\"\"\n\n    def get_capabilities(self) -&gt; List[str]:\n        return [\n            \"markdown_generation\",\n            \"api_documentation\", \n            \"user_guide_creation\",\n            \"code_commenting\"\n        ]\n\n    async def run(self, task: str, dry_run: bool = False) -&gt; str:\n        if \"api documentation\" in task.lower():\n            return await self._generate_api_docs(task)\n        elif \"user guide\" in task.lower():\n            return await self._create_user_guide(task)\n        else:\n            return await self._general_documentation(task)\n\n    async def _generate_api_docs(self, task: str) -&gt; str:\n        # Implementation for API documentation\n        return \"Generated API documentation\"\n</code></pre> <p>This API reference provides comprehensive coverage of the system's public interfaces and usage patterns.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Welcome to the AI Agent TDD-Scrum Workflow project! We appreciate your interest in contributing.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":""},{"location":"development/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git for version control</li> <li>Discord account for testing bot functionality</li> <li>Basic understanding of async Python programming</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n</code></pre></p> </li> <li> <p>Create a virtual environment: <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# or\nvenv\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Install dependencies: <pre><code>pip install -r requirements.txt\npip install -r requirements-dev.txt  # Development dependencies\n</code></pre></p> </li> <li> <p>Set up environment variables: <pre><code>cp .env.example .env\n# Edit .env with your Discord bot token and other settings\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"development/contributing/#branch-strategy","title":"Branch Strategy","text":"<ul> <li><code>main</code>: Production-ready code</li> <li><code>develop</code>: Integration branch for features</li> <li><code>feature/*</code>: Individual feature development</li> <li><code>hotfix/*</code>: Critical bug fixes</li> </ul>"},{"location":"development/contributing/#making-changes","title":"Making Changes","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes:</p> </li> <li>Follow existing code style and patterns</li> <li>Add tests for new functionality</li> <li> <p>Update documentation as needed</p> </li> <li> <p>Test your changes: <pre><code># Run the full test suite\npytest\n\n# Run specific test categories\npytest tests/unit/\npytest tests/integration/\npytest -m \"not slow\"\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"Add feature: description of your changes\"\n</code></pre></p> </li> <li> <p>Push and create a pull request: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"development/contributing/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"development/contributing/#python-code-style","title":"Python Code Style","text":"<p>We follow PEP 8 with some modifications:</p> <ul> <li>Line length: 88 characters (Black formatter default)</li> <li>Import ordering: Use <code>isort</code> for consistent import organization</li> <li>Type hints: Required for public methods and complex functions</li> <li>Docstrings: Use Google-style docstrings</li> </ul>"},{"location":"development/contributing/#example-code-style","title":"Example Code Style","text":"<pre><code>from typing import List, Optional\nimport asyncio\n\nfrom lib.data_models import Epic, Story\n\n\nclass EpicManager:\n    \"\"\"Manages epic creation and lifecycle.\n\n    This class handles the creation, modification, and deletion of epics\n    within the workflow system.\n    \"\"\"\n\n    def __init__(self, storage_path: str) -&gt; None:\n        \"\"\"Initialize the epic manager.\n\n        Args:\n            storage_path: Path to the storage directory for epics.\n        \"\"\"\n        self.storage_path = storage_path\n\n    async def create_epic(\n        self, \n        description: str, \n        priority: str = \"medium\"\n    ) -&gt; Epic:\n        \"\"\"Create a new epic with the given description.\n\n        Args:\n            description: Human-readable description of the epic.\n            priority: Priority level (low, medium, high).\n\n        Returns:\n            The created Epic instance.\n\n        Raises:\n            ValueError: If description is empty or invalid.\n        \"\"\"\n        if not description.strip():\n            raise ValueError(\"Epic description cannot be empty\")\n\n        # Implementation here...\n</code></pre>"},{"location":"development/contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/contributing/#test-organization","title":"Test Organization","text":"<ul> <li>Unit tests: <code>tests/unit/</code> - Test individual components in isolation</li> <li>Integration tests: <code>tests/integration/</code> - Test component interactions</li> <li>End-to-end tests: <code>tests/e2e/</code> - Test complete user workflows</li> </ul>"},{"location":"development/contributing/#test-patterns","title":"Test Patterns","text":"<pre><code>import pytest\nfrom unittest.mock import AsyncMock, patch\n\nfrom lib.orchestrator import Orchestrator\n\n\nclass TestOrchestrator:\n    \"\"\"Test suite for the Orchestrator class.\"\"\"\n\n    @pytest.fixture\n    def orchestrator(self):\n        \"\"\"Create a test orchestrator instance.\"\"\"\n        return Orchestrator(config_path=\"test_config.yml\")\n\n    @pytest.mark.asyncio\n    async def test_create_epic_success(self, orchestrator):\n        \"\"\"Test successful epic creation.\"\"\"\n        # Given\n        description = \"Build authentication system\"\n\n        # When\n        epic = await orchestrator.create_epic(description)\n\n        # Then\n        assert epic.description == description\n        assert epic.status == \"pending\"\n\n    @pytest.mark.asyncio\n    async def test_create_epic_with_empty_description_raises_error(self, orchestrator):\n        \"\"\"Test that empty description raises ValueError.\"\"\"\n        # Given\n        description = \"\"\n\n        # When/Then\n        with pytest.raises(ValueError, match=\"Epic description cannot be empty\"):\n            await orchestrator.create_epic(description)\n</code></pre>"},{"location":"development/contributing/#architecture-guidelines","title":"Architecture Guidelines","text":""},{"location":"development/contributing/#adding-new-agents","title":"Adding New Agents","text":"<p>When adding a new agent type:</p> <ol> <li> <p>Inherit from BaseAgent: <pre><code>from lib.agents.base_agent import BaseAgent\n\nclass NewAgent(BaseAgent):\n    async def run(self, task: str, dry_run: bool = False) -&gt; str:\n        # Implementation\n</code></pre></p> </li> <li> <p>Define security profile:    Add to <code>lib/agent_tool_config.py</code>:    <pre><code>\"NewAgent\": {\n    \"allowed_tools\": [\"read\", \"specific_tool\"],\n    \"blocked_tools\": [\"edit\", \"system\"]\n}\n</code></pre></p> </li> <li> <p>Add comprehensive tests:</p> </li> <li>Unit tests for agent logic</li> <li>Security boundary tests</li> <li>Integration tests with orchestrator</li> </ol>"},{"location":"development/contributing/#state-machine-extensions","title":"State Machine Extensions","text":"<p>When modifying the state machine:</p> <ol> <li>Update state definitions in <code>lib/state_machine.py</code></li> <li>Add transition logic with proper validation</li> <li>Update command mappings in the Discord bot</li> <li>Add comprehensive tests for all new transitions</li> </ol>"},{"location":"development/contributing/#documentation","title":"Documentation","text":""},{"location":"development/contributing/#documentation-requirements","title":"Documentation Requirements","text":"<ul> <li>API documentation: Update docstrings for any public methods</li> <li>User documentation: Update relevant user guides</li> <li>Architecture documentation: Update design docs for significant changes</li> </ul>"},{"location":"development/contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install documentation dependencies\npip install mkdocs-material\n\n# Serve locally for development\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":""},{"location":"development/contributing/#running-tests","title":"Running Tests","text":"<pre><code># Full test suite\npytest\n\n# With coverage report\npytest --cov=lib --cov-report=html\n\n# Specific test categories\npytest tests/unit/\npytest tests/integration/\npytest -m \"not slow\"\n\n# Security tests\npytest tests/unit/test_agent_tool_config.py\n</code></pre>"},{"location":"development/contributing/#test-requirements","title":"Test Requirements","text":"<ul> <li>Coverage: Aim for &gt;90% code coverage</li> <li>Security tests: Required for any security-related changes</li> <li>Integration tests: Required for cross-component changes</li> <li>Performance tests: For changes affecting system performance</li> </ul>"},{"location":"development/contributing/#review-process","title":"Review Process","text":""},{"location":"development/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ol> <li>Clear description: Explain what and why</li> <li>Link issues: Reference related GitHub issues</li> <li>Include tests: All changes must include appropriate tests</li> <li>Update documentation: Keep docs in sync with code changes</li> <li>Security review: Highlight any security implications</li> </ol>"},{"location":"development/contributing/#review-checklist","title":"Review Checklist","text":"<ul> <li> Code follows style guidelines</li> <li> Tests pass and coverage is maintained</li> <li> Documentation is updated</li> <li> Security implications are considered</li> <li> Breaking changes are documented</li> <li> Performance impact is assessed</li> </ul>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":""},{"location":"development/contributing/#resources","title":"Resources","text":"<ul> <li>GitHub Issues: Report bugs and request features</li> <li>GitHub Discussions: Ask questions and share ideas</li> <li>Discord: Join our development Discord server (link in README)</li> </ul>"},{"location":"development/contributing/#common-issues","title":"Common Issues","text":"<p>Tests failing locally: - Ensure all dependencies are installed - Check environment variable configuration - Run <code>pytest -v</code> for detailed error output</p> <p>Import errors: - Verify virtual environment is activated - Run <code>pip install -e .</code> to install in development mode</p> <p>Discord bot not responding: - Check bot token configuration - Verify bot permissions in test server - Review Discord API rate limits</p>"},{"location":"development/contributing/#release-process","title":"Release Process","text":""},{"location":"development/contributing/#version-management","title":"Version Management","text":"<p>We use semantic versioning (SemVer): - Major: Breaking changes - Minor: New features, backward compatible - Patch: Bug fixes, backward compatible</p>"},{"location":"development/contributing/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update version numbers</li> <li>Update CHANGELOG.md</li> <li>Run full test suite</li> <li>Update documentation</li> <li>Create release PR</li> <li>Tag release after merge</li> <li>Deploy to production</li> </ol> <p>Thank you for contributing to the AI Agent TDD-Scrum Workflow project!</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configure the AI Agent TDD-Scrum workflow system for your development environment.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"getting-started/configuration/#required-configuration","title":"Required Configuration","text":"<p><code>DISCORD_BOT_TOKEN</code> Your Discord bot token for the HITL interface. <pre><code>export DISCORD_BOT_TOKEN=\"your_discord_bot_token_here\"\n</code></pre></p>"},{"location":"getting-started/configuration/#optional-configuration","title":"Optional Configuration","text":"<p><code>ANTHROPIC_API_KEY</code> (for Claude integration) <pre><code>export ANTHROPIC_API_KEY=\"your_anthropic_api_key\"\n</code></pre></p> <p><code>GITHUB_TOKEN</code> (for enhanced GitHub integration) <pre><code>export GITHUB_TOKEN=\"your_github_personal_access_token\"\n</code></pre></p>"},{"location":"getting-started/configuration/#project-configuration","title":"Project Configuration","text":""},{"location":"getting-started/configuration/#single-project-setup","title":"Single Project Setup","text":"<p>For managing a single project, create a simple configuration:</p> <pre><code># config.yml\norchestrator:\n  mode: blocking  # blocking, partial, or autonomous\n  project_path: \"/path/to/your/project\"\n  project_name: \"my-project\"\n</code></pre>"},{"location":"getting-started/configuration/#multi-project-setup","title":"Multi-Project Setup","text":"<p>For managing multiple projects simultaneously:</p> <pre><code># config.yml\norchestrator:\n  mode: blocking\n  projects:\n    - name: \"web-app\"\n      path: \"/path/to/web-app\"\n      mode: partial\n    - name: \"api-service\" \n      path: \"/path/to/api-service\"\n      mode: autonomous\n    - name: \"mobile-app\"\n      path: \"/path/to/mobile-app\"\n      mode: blocking\n</code></pre>"},{"location":"getting-started/configuration/#orchestration-modes","title":"Orchestration Modes","text":""},{"location":"getting-started/configuration/#blocking-mode","title":"Blocking Mode","text":"<ul> <li>Human approval required for all strategic decisions</li> <li>Safest option for critical projects</li> <li>Recommended for learning the system</li> </ul>"},{"location":"getting-started/configuration/#partial-mode","title":"Partial Mode","text":"<ul> <li>Agents execute with quarantined output for review</li> <li>Balanced automation with oversight</li> <li>Good for established workflows</li> </ul>"},{"location":"getting-started/configuration/#autonomous-mode","title":"Autonomous Mode","text":"<ul> <li>Full execution with monitoring and alerts</li> <li>Highest automation level</li> <li>Use only for well-tested processes</li> </ul>"},{"location":"getting-started/configuration/#discord-configuration","title":"Discord Configuration","text":""},{"location":"getting-started/configuration/#bot-setup","title":"Bot Setup","text":"<ol> <li>Create a Discord application at Discord Developer Portal</li> <li>Create a bot and copy the token</li> <li>Invite the bot to your server with these permissions:</li> <li>Use Slash Commands</li> <li>Send Messages</li> <li>Embed Links</li> <li>Read Message History</li> </ol>"},{"location":"getting-started/configuration/#channel-configuration","title":"Channel Configuration","text":"<p>The system automatically creates project-specific channels: - Format: <code>hostname-projectname</code> - Example: <code>macbook-web-app</code>, <code>ubuntu-api-service</code></p>"},{"location":"getting-started/configuration/#agent-configuration","title":"Agent Configuration","text":""},{"location":"getting-started/configuration/#ai-integration","title":"AI Integration","text":"<p>Claude Code Integration: <pre><code># Install Claude Code CLI\npip install claude-code\n\n# Verify installation\nclaude --version\n</code></pre></p> <p>Alternative AI Services: The system supports pluggable AI integrations. Implement the <code>BaseAgent</code> interface for custom AI services.</p>"},{"location":"getting-started/configuration/#security-settings","title":"Security Settings","text":"<p>Agent tool access is configured in <code>lib/agent_tool_config.py</code>:</p> <pre><code>AGENT_SECURITY_PROFILES = {\n    \"DesignAgent\": {\n        \"allowed_tools\": [\"read\", \"web_search\", \"documentation\"],\n        \"blocked_tools\": [\"edit\", \"git\", \"system\"]\n    },\n    \"CodeAgent\": {\n        \"allowed_tools\": [\"read\", \"edit\", \"git_add\", \"git_commit\", \"test\"],\n        \"blocked_tools\": [\"git_push\", \"system\", \"delete\"]\n    }\n    # ... other agents\n}\n</code></pre>"},{"location":"getting-started/configuration/#file-locations","title":"File Locations","text":""},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":"<ul> <li>Main config: <code>config.yml</code> (repository root)</li> <li>User preferences: <code>~/.agent-workflow/preferences.yml</code></li> <li>Project state: <code>&lt;project&gt;/.orch-state/status.json</code></li> </ul>"},{"location":"getting-started/configuration/#log-files","title":"Log Files","text":"<ul> <li>System logs: <code>logs/orchestrator.log</code></li> <li>Agent logs: <code>logs/agents/&lt;agent-type&gt;.log</code></li> <li>Discord logs: <code>logs/discord-bot.log</code></li> </ul>"},{"location":"getting-started/configuration/#performance-tuning","title":"Performance Tuning","text":""},{"location":"getting-started/configuration/#resource-limits","title":"Resource Limits","text":"<pre><code>orchestrator:\n  max_concurrent_projects: 3\n  agent_timeout_minutes: 30\n  state_save_interval_seconds: 60\n</code></pre>"},{"location":"getting-started/configuration/#discord-rate-limiting","title":"Discord Rate Limiting","text":"<pre><code>discord:\n  max_commands_per_minute: 20\n  response_timeout_seconds: 30\n</code></pre>"},{"location":"getting-started/configuration/#troubleshooting-configuration","title":"Troubleshooting Configuration","text":""},{"location":"getting-started/configuration/#common-issues","title":"Common Issues","text":"<p>Environment variables not recognized: <pre><code># Check current environment\nenv | grep -E \"(DISCORD|ANTHROPIC|GITHUB)\"\n\n# Set in shell profile for persistence\necho 'export DISCORD_BOT_TOKEN=\"your_token\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre></p> <p>Configuration file not found: <pre><code># Create default configuration\ncp config.example.yml config.yml\n# Edit with your settings\n</code></pre></p> <p>Permission errors: <pre><code># Ensure proper file permissions\nchmod 600 config.yml  # Restrict access to config file\nchmod +x scripts/orchestrator.py  # Make scripts executable\n</code></pre></p>"},{"location":"getting-started/configuration/#validation","title":"Validation","text":"<p>Test your configuration: <pre><code># Validate configuration syntax\npython -c \"import yaml; yaml.safe_load(open('config.yml'))\"\n\n# Test Discord connection\npython scripts/test-discord.py\n\n# Test AI integration\npython scripts/test-agents.py\n</code></pre></p>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>After configuration: 1. Run the quick start guide 2. Set up your first project 3. Learn the HITL commands</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Detailed installation instructions for the AI Agent TDD-Scrum Workflow system.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#python-environment","title":"Python Environment","text":"<ul> <li>Python 3.8 or higher</li> <li>pip package manager</li> <li>Virtual environment (recommended)</li> </ul>"},{"location":"getting-started/installation/#external-services","title":"External Services","text":"<ul> <li>Discord Application with bot token</li> <li>Git for repository management</li> <li>Optional: AI service integration</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-direct-installation-recommended","title":"Method 1: Direct Installation (Recommended)","text":"<pre><code># Clone repository\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n\n# Create virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\nmake install\n</code></pre>"},{"location":"getting-started/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>For contributors and developers:</p> <pre><code># Clone repository\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n\n# Set up development environment\nmake dev-setup\n\n# This installs additional development tools:\n# - black (code formatting)\n# - flake8 (linting)\n# - pytest plugins\n</code></pre>"},{"location":"getting-started/installation/#method-3-manual-installation","title":"Method 3: Manual Installation","text":"<p>If Make is not available:</p> <pre><code># Install core dependencies\npip install discord.py&gt;=2.3.0\npip install pygithub&gt;=1.59.0  \npip install pyyaml&gt;=6.0\npip install anthropic&gt;=0.3.0\n\n# Install testing dependencies\npip install pytest&gt;=7.4.0\npip install pytest-asyncio&gt;=0.21.0\npip install pytest-mock&gt;=3.11.0\npip install pytest-cov&gt;=4.1.0\n</code></pre>"},{"location":"getting-started/installation/#documentation-setup-optional","title":"Documentation Setup (Optional)","text":"<p>To build and serve documentation locally:</p> <pre><code># Install MkDocs and dependencies\npip install mkdocs\npip install mkdocs-material\npip install mkdocs-mermaid2-plugin\n\n# Serve documentation locally\nmkdocs serve\n</code></pre> <p>Access documentation at: <code>http://localhost:8000</code></p>"},{"location":"getting-started/installation/#verification","title":"Verification","text":""},{"location":"getting-started/installation/#1-check-installation","title":"1. Check Installation","text":"<pre><code># Verify Python modules\npython -c \"import discord, yaml, anthropic; print('All modules imported successfully')\"\n\n# Run basic tests\nmake test-unit\n</code></pre>"},{"location":"getting-started/installation/#2-environment-setup","title":"2. Environment Setup","text":"<pre><code># Check required environment variables\necho $DISCORD_BOT_TOKEN\n</code></pre>"},{"location":"getting-started/installation/#3-system-test","title":"3. System Test","text":"<pre><code># Run orchestrator in test mode\npython scripts/orchestrator.py --help\n\n# Run Discord bot in test mode  \npython lib/discord_bot.py --help\n</code></pre>"},{"location":"getting-started/installation/#configuration-files","title":"Configuration Files","text":"<p>The system expects certain configuration files:</p>"},{"location":"getting-started/installation/#project-configuration-optional","title":"Project Configuration (Optional)","text":"<p>Create <code>config/projects.yaml</code>: <pre><code>projects:\n  - name: \"my_project\"\n    path: \"/path/to/project\"\n    orchestration: \"blocking\"\n</code></pre></p>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Required variables: <pre><code>export DISCORD_BOT_TOKEN=\"your_discord_bot_token\"\n</code></pre></p> <p>Optional variables: <pre><code>export HOSTNAME=\"your_hostname\"  # For Discord channel naming\nexport LOG_LEVEL=\"INFO\"          # Logging level\n</code></pre></p>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#windows","title":"Windows","text":"<pre><code># Use Windows paths\nset DISCORD_BOT_TOKEN=your_token\n\n# Activate virtual environment\nvenv\\Scripts\\activate\n\n# Run with Python\npython lib/discord_bot.py\n</code></pre>"},{"location":"getting-started/installation/#macoslinux","title":"macOS/Linux","text":"<pre><code># Use Unix paths\nexport DISCORD_BOT_TOKEN=\"your_token\"\n\n# Activate virtual environment\nsource venv/bin/activate\n\n# Run with Make\nmake run\n</code></pre>"},{"location":"getting-started/installation/#wsl-windows-subsystem-for-linux","title":"WSL (Windows Subsystem for Linux)","text":"<p>The system is fully compatible with WSL. Follow Linux instructions above.</p>"},{"location":"getting-started/installation/#docker-installation-alternative","title":"Docker Installation (Alternative)","text":"<p>For containerized deployment:</p> <pre><code>FROM python:3.9-slim\n\nWORKDIR /app\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n\nCOPY . .\nCMD [\"python\", \"lib/discord_bot.py\"]\n</code></pre> <pre><code># Build and run\ndocker build -t agent-workflow .\ndocker run -e DISCORD_BOT_TOKEN=\"your_token\" agent-workflow\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Permission Errors: <pre><code># Use user installation\npip install --user -r requirements.txt\n</code></pre></p> <p>Version Conflicts: <pre><code># Create clean virtual environment\npython -m venv fresh_venv\nsource fresh_venv/bin/activate\npip install -r requirements.txt\n</code></pre></p> <p>Discord.py Installation Issues: <pre><code># Update pip first\npip install --upgrade pip\n\n# Install with specific version\npip install discord.py==2.3.0\n</code></pre></p> <p>Import Errors: - Ensure virtual environment is activated - Check Python path includes project directory - Verify all dependencies installed correctly</p>"},{"location":"getting-started/installation/#dependency-issues","title":"Dependency Issues","text":"<p>If you encounter dependency conflicts:</p> <pre><code># Check installed packages\npip list\n\n# Create requirements lock file\npip freeze &gt; requirements-lock.txt\n\n# Clean install from lock file\npip install -r requirements-lock.txt\n</code></pre>"},{"location":"getting-started/installation/#performance-optimization","title":"Performance Optimization","text":"<p>For better performance:</p> <pre><code># Install with optimizations\npip install --upgrade pip setuptools wheel\n\n# Use faster package resolution\npip install --use-feature=fast-deps -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>After successful installation:</p> <ol> <li>Configure Discord Bot</li> <li>Set up Project Configuration </li> <li>Try Quick Start Guide</li> <li>Read User Guide</li> </ol> <p>Installation Complete</p> <p>Your AI Agent TDD-Scrum Workflow system is now installed and ready for configuration!</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>Get the AI Agent TDD-Scrum Workflow system running in under 5 minutes.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+ installed</li> <li>Discord Bot Token (see Discord Setup)</li> <li>Git for cloning the repository</li> </ul>"},{"location":"getting-started/quick-start/#1-clone-and-install","title":"1. Clone and Install","text":"<pre><code># Clone the repository\ngit clone https://github.com/jmontp/agent-workflow.git\ncd agent-workflow\n\n# Install dependencies\nmake install\n</code></pre> <p>Or manually: <pre><code>pip install -r requirements.txt\n</code></pre></p>"},{"location":"getting-started/quick-start/#2-configure-environment","title":"2. Configure Environment","text":"<p>Set up your Discord bot token:</p> <pre><code>export DISCORD_BOT_TOKEN=\"your_discord_bot_token_here\"\n</code></pre> <p>Note: The system works without AI integration for testing. For full AI capabilities, you can integrate with Claude Code or other AI services.</p>"},{"location":"getting-started/quick-start/#3-run-the-system","title":"3. Run the System","text":""},{"location":"getting-started/quick-start/#option-a-discord-bot-recommended","title":"Option A: Discord Bot (Recommended)","text":"<pre><code>make run\n</code></pre> <p>This starts the Discord bot with the orchestrator backend.</p>"},{"location":"getting-started/quick-start/#option-b-orchestrator-only","title":"Option B: Orchestrator Only","text":"<pre><code>make orchestrator\n</code></pre> <p>This runs the orchestrator without Discord integration (useful for testing).</p>"},{"location":"getting-started/quick-start/#4-test-in-discord","title":"4. Test in Discord","text":"<ol> <li>Invite your bot to a Discord server</li> <li>Try basic commands:    <pre><code>/state\n/epic \"Build a todo app\"\n/approve\n/sprint plan\n/sprint start\n</code></pre></li> </ol>"},{"location":"getting-started/quick-start/#5-verify-installation","title":"5. Verify Installation","text":"<p>Run the test suite to ensure everything works:</p> <pre><code>make test\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Read the User Guide for complete command reference</li> <li>Configure Projects for multi-project setups</li> <li>Explore Workflows for common usage patterns</li> </ul>"},{"location":"getting-started/quick-start/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/quick-start/#common-issues","title":"Common Issues","text":"<p>Bot doesn't respond to commands: - Verify <code>DISCORD_BOT_TOKEN</code> is set correctly - Check bot permissions in Discord server - Ensure bot is invited with appropriate scopes</p> <p>Import errors: - Run <code>make install</code> to ensure all dependencies are installed - Check Python version is 3.8+</p> <p>Tests failing: - Some tests require Discord token for integration tests - Use <code>make test-unit</code> to run only unit tests</p>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<ul> <li>Check the <code>/state</code> command in Discord to see system status</li> <li>Review logs for error messages</li> <li>See Contributing Guide for support options</li> </ul> <p>Success! Your AI Agent TDD-Scrum Workflow system is now running. Start with <code>/epic \"Your first project\"</code> in Discord.</p>"},{"location":"user-guide/faq/","title":"Frequently Asked Questions","text":"<p>Common questions about the AI Agent TDD-Scrum workflow system.</p>"},{"location":"user-guide/faq/#general-questions","title":"General Questions","text":""},{"location":"user-guide/faq/#what-is-the-ai-agent-tdd-scrum-workflow-system","title":"What is the AI Agent TDD-Scrum workflow system?","text":"<p>It's a Human-In-The-Loop (HITL) orchestration framework that coordinates multiple specialized AI agents through Discord. The system follows a research-mode Scrum methodology optimized for solo engineers working with AI assistance.</p>"},{"location":"user-guide/faq/#do-i-need-ai-integration-to-use-the-system","title":"Do I need AI integration to use the system?","text":"<p>No, the system works without AI integration for testing and learning the workflow. However, you'll need AI capabilities (like Claude Code) for the agents to actually perform development tasks.</p>"},{"location":"user-guide/faq/#can-i-use-this-with-multiple-projects","title":"Can I use this with multiple projects?","text":"<p>Yes, the orchestrator supports multi-project management. Each project gets its own Discord channel and independent state machine.</p>"},{"location":"user-guide/faq/#setup-and-installation","title":"Setup and Installation","text":""},{"location":"user-guide/faq/#what-are-the-minimum-requirements","title":"What are the minimum requirements?","text":"<ul> <li>Python 3.8 or higher</li> <li>Discord bot token</li> <li>Git for cloning the repository</li> <li>Optional: Claude Code or other AI integration for full functionality</li> </ul>"},{"location":"user-guide/faq/#how-do-i-get-a-discord-bot-token","title":"How do I get a Discord bot token?","text":"<ol> <li>Go to the Discord Developer Portal</li> <li>Create a new application</li> <li>Go to the \"Bot\" section</li> <li>Click \"Reset Token\" and copy the token</li> <li>Invite the bot to your server with appropriate permissions</li> </ol>"},{"location":"user-guide/faq/#can-i-run-this-on-windowsmaclinux","title":"Can I run this on Windows/Mac/Linux?","text":"<p>Yes, the system is cross-platform and works on all major operating systems. It's been tested on Windows (including WSL), macOS, and various Linux distributions.</p>"},{"location":"user-guide/faq/#workflow-and-commands","title":"Workflow and Commands","text":""},{"location":"user-guide/faq/#whats-the-difference-between-an-epic-and-a-story","title":"What's the difference between an epic and a story?","text":"<ul> <li>Epic: A high-level initiative or feature area (e.g., \"Build authentication system\")</li> <li>Story: A specific, actionable task within an epic (e.g., \"Create user login form\")</li> </ul>"},{"location":"user-guide/faq/#why-cant-i-run-certain-commands","title":"Why can't I run certain commands?","text":"<p>The system uses a finite state machine that enforces proper workflow sequences. Use the <code>/state</code> command to see which commands are currently available.</p>"},{"location":"user-guide/faq/#how-do-i-know-what-state-im-in","title":"How do I know what state I'm in?","text":"<p>Use the <code>/state</code> command anytime to see: - Current state (e.g., SPRINT_ACTIVE) - Allowed commands for that state - Visual state diagram - Command matrix</p>"},{"location":"user-guide/faq/#can-i-pause-a-sprint-mid-execution","title":"Can I pause a sprint mid-execution?","text":"<p>Yes, use <code>/sprint pause</code> to halt agent work. Resume with <code>/sprint resume</code> when ready to continue.</p>"},{"location":"user-guide/faq/#agents-and-ai-integration","title":"Agents and AI Integration","text":""},{"location":"user-guide/faq/#what-do-the-different-agents-do","title":"What do the different agents do?","text":"<ul> <li>DesignAgent: Creates architecture, designs components, writes specifications</li> <li>CodeAgent: Implements features, fixes bugs, refactors code</li> <li>QAAgent: Creates tests, validates quality, analyzes coverage</li> <li>DataAgent: Analyzes data, creates reports, generates visualizations</li> </ul>"},{"location":"user-guide/faq/#how-do-agents-know-what-to-work-on","title":"How do agents know what to work on?","text":"<p>Agents receive tasks from the orchestrator based on: - Stories in the current sprint - Their specialized capabilities - Human-provided context and requirements</p>"},{"location":"user-guide/faq/#can-i-give-direct-instructions-to-agents","title":"Can I give direct instructions to agents?","text":"<p>Yes, use commands like: - <code>/suggest_fix \"description\"</code> to guide a stuck agent - <code>/request_changes \"description\"</code> to modify agent output - <code>/feedback \"description\"</code> to provide general improvement notes</p>"},{"location":"user-guide/faq/#what-happens-if-an-agent-gets-stuck","title":"What happens if an agent gets stuck?","text":"<p>The system has escalation policies: - After 3 failed attempts, tasks escalate to human review - You can use <code>/suggest_fix</code> to provide guidance - Use <code>/skip_task</code> to abandon problematic tasks</p>"},{"location":"user-guide/faq/#security-and-permissions","title":"Security and Permissions","text":""},{"location":"user-guide/faq/#are-there-security-restrictions-on-agents","title":"Are there security restrictions on agents?","text":"<p>Yes, each agent type has specific tool access controls: - DesignAgent: Read-only access, can create documentation - CodeAgent: Can edit code and commit changes - QAAgent: Can run tests and quality tools only - DataAgent: Can access data files and create visualizations</p>"},{"location":"user-guide/faq/#can-agents-modify-any-file-in-my-project","title":"Can agents modify any file in my project?","text":"<p>Agents respect security boundaries and can only access files within their permitted scope. The system uses principle of least privilege.</p>"},{"location":"user-guide/faq/#is-my-code-sent-to-external-ai-services","title":"Is my code sent to external AI services?","text":"<p>This depends on your AI integration choice. The framework itself doesn't send code externally, but integrated AI services (like Claude Code) may process code according to their terms of service.</p>"},{"location":"user-guide/faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/faq/#the-bot-doesnt-respond-to-my-commands","title":"The bot doesn't respond to my commands","text":"<p>Check these common issues: 1. Verify the Discord bot token is set correctly 2. Ensure the bot has proper permissions in your server 3. Make sure you're using slash commands (type <code>/</code> to see available commands)</p>"},{"location":"user-guide/faq/#my-tests-are-failing","title":"My tests are failing","text":"<p>Try these solutions: 1. Run unit tests only: <code>pytest tests/unit/</code> 2. Ensure all dependencies are installed: <code>pip install -r requirements.txt</code> 3. Check that environment variables are set properly</p>"},{"location":"user-guide/faq/#the-system-seems-slow","title":"The system seems slow","text":"<p>Performance can be affected by: - Network connectivity to Discord and AI services - Size and complexity of tasks - System resources (CPU, memory) - Number of concurrent projects</p>"},{"location":"user-guide/faq/#advanced-usage","title":"Advanced Usage","text":""},{"location":"user-guide/faq/#can-i-customize-the-workflow-states","title":"Can I customize the workflow states?","text":"<p>The state machine is designed to be extensible, but modifications require code changes. The current states cover most common development workflows.</p>"},{"location":"user-guide/faq/#how-do-i-integrate-with-other-tools","title":"How do I integrate with other tools?","text":"<p>The system is designed to be modular. You can: - Add new agent types - Integrate additional AI services - Connect to different project management tools - Extend the Discord bot with custom commands</p>"},{"location":"user-guide/faq/#can-i-run-this-in-production","title":"Can I run this in production?","text":"<p>The system is suitable for development workflows. For production use, consider: - Proper error handling and monitoring - Backup and recovery procedures - Security review of AI integrations - Performance optimization for your scale</p>"},{"location":"user-guide/faq/#how-do-i-contribute-to-the-project","title":"How do I contribute to the project?","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Implement changes with tests</li> <li>Submit a pull request</li> <li>Follow the contributing guidelines in the repository</li> </ol>"},{"location":"user-guide/faq/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/faq/#how-should-i-structure-my-epics-and-stories","title":"How should I structure my epics and stories?","text":"<ul> <li>Keep epics focused on specific feature areas</li> <li>Write stories as user-focused requirements</li> <li>Break large stories into smaller, manageable tasks</li> <li>Prioritize stories based on business value</li> </ul>"},{"location":"user-guide/faq/#whats-the-optimal-sprint-length","title":"What's the optimal sprint length?","text":"<p>For solo development with AI assistance: - Start with 1-2 week sprints - Adjust based on task complexity and AI performance - Consider shorter sprints for learning and experimentation</p>"},{"location":"user-guide/faq/#how-do-i-get-the-best-results-from-ai-agents","title":"How do I get the best results from AI agents?","text":"<ul> <li>Provide clear, specific requirements</li> <li>Include context about existing code and patterns</li> <li>Use descriptive names for features and stories</li> <li>Give feedback regularly to improve agent performance</li> </ul>"},{"location":"user-guide/hitl-commands/","title":"HITL Commands","text":"<p>Command reference for the AI Agent TDD-Scrum workflow system. These commands provide Human-In-The-Loop control over the multi-agent orchestration process.</p>"},{"location":"user-guide/hitl-commands/#command-quick-reference","title":"Command Quick-Reference","text":""},{"location":"user-guide/hitl-commands/#core-commands","title":"Core Commands","text":""},{"location":"user-guide/hitl-commands/#project-management","title":"Project Management","text":"<p><code>/epic \"&lt;description&gt;\"</code> Define a new high-level initiative.</p> <p><code>/approve [ID ...]</code> Approve proposed stories or epics so they can enter a sprint.</p>"},{"location":"user-guide/hitl-commands/#sprint-management","title":"Sprint Management","text":"<p><code>/sprint plan [ID ...]</code> Plan next sprint with specified story IDs.</p> <p><code>/sprint start</code> Kick off the planned sprint.</p> <p><code>/sprint status</code> Get a progress snapshot of the current sprint.</p> <p><code>/sprint pause</code> Halt agent work temporarily.</p> <p><code>/sprint resume</code> Continue paused sprint work.</p>"},{"location":"user-guide/hitl-commands/#backlog-operations","title":"Backlog Operations","text":"<p><code>/backlog view product</code> List all product backlog items.</p> <p><code>/backlog view sprint</code> List current sprint backlog items.</p> <p><code>/backlog view &lt;ITEM_ID&gt;</code> Show full details for a specific item.</p> <p><code>/backlog add_story \"&lt;description&gt;\" --feature &lt;FEATURE_ID&gt;</code> Create a new story under a feature.</p> <p><code>/backlog remove &lt;ITEM_ID&gt;</code> Delete an item from the backlog.</p> <p><code>/backlog prioritize &lt;STORY_ID&gt; &lt;top|high|med|low&gt;</code> Set priority level for a story.</p>"},{"location":"user-guide/hitl-commands/#development-control","title":"Development Control","text":"<p><code>/request_changes \"&lt;description&gt;\"</code> Request modifications on a pull request.</p> <p><code>/suggest_fix \"&lt;description&gt;\"</code> Provide hints to the Code Agent when stuck.</p> <p><code>/skip_task</code> Abandon the currently blocked task and move on.</p> <p><code>/feedback \"&lt;description&gt;\"</code> Provide improvement notes after a sprint.</p> <p><code>/state</code> Inspect current orchestrator state with interactive controls.</p>"},{"location":"user-guide/hitl-commands/#examples","title":"Examples","text":""},{"location":"user-guide/hitl-commands/#1-strategic-planning","title":"1. Strategic Planning","text":"<pre><code>/epic \"Build a modular authentication system\"\n</code></pre> <p>Orchestrator returns proposed stories <code>AUTH-1</code>, <code>AUTH-2</code>.</p> <pre><code>/approve AUTH-1 AUTH-2\n</code></pre>"},{"location":"user-guide/hitl-commands/#2-sprint-lifecycle","title":"2. Sprint Lifecycle","text":"<pre><code>/sprint plan AUTH-1 AUTH-2\n/sprint start\n</code></pre> <p>At any time: <pre><code>/sprint status\n/sprint pause   # emergency halt\n/sprint resume  # continue work\n</code></pre></p>"},{"location":"user-guide/hitl-commands/#3-backlog-grooming","title":"3. Backlog Grooming","text":"<pre><code>/backlog view product\n/backlog add_story \"As a user I can reset my password\" --feature AUTH\n/backlog prioritize AUTH-3 high\n</code></pre>"},{"location":"user-guide/hitl-commands/#4-review-debug","title":"4. Review &amp; Debug","text":"<pre><code>/request_changes \"Add duplicate-email guard in registration API\"\n/suggest_fix \"Database URL is wrong in config.py\"\n/skip_task   # after three failed CI attempts\n</code></pre>"},{"location":"user-guide/hitl-commands/#escalation-policy-research-mode","title":"Escalation Policy (Research Mode)","text":"<ol> <li>The Orchestrator escalates after three consecutive CI failures.</li> <li>Security-critical code requires explicit human approval.</li> <li>Agents time-box tasks to 30 min; longer tasks trigger a status ping.</li> </ol> <p>This lightweight command set keeps you focused on big-picture direction while agents handle the details.</p>"},{"location":"user-guide/hitl-commands/#state-awareness-invalid-commands","title":"State Awareness &amp; Invalid Commands","text":"<p>The orchestrator enforces a finite-state machine (see <code>command_state_machine.md</code>).</p> <ul> <li>Use <code>/state</code> at any time to:</li> <li>View the current state (e.g., <code>SPRINT_ACTIVE</code>).</li> <li>Click Allowed Commands \u2013 shows only the verbs valid right now.</li> <li>Click Diagram \u2013 in-chat SVG of the full state chart.</li> <li>Click Matrix \u2013 raw command\u2192state table.</li> </ul> <p>If you issue a command that is not legal for the current state, the bot replies with an error message:</p> <p>Warning: Command <code>/sprint plan</code> is not allowed now (state: SPRINT_ACTIVE). Try <code>/sprint status</code>.</p> <p>No action is taken until a valid command is sent. </p>"},{"location":"user-guide/project-setup/","title":"Project Setup Guide","text":"<p>This guide explains how to set up and register new project repositories with the AI Agent TDD-Scrum workflow system.</p>"},{"location":"user-guide/project-setup/#prerequisites","title":"Prerequisites","text":"<ol> <li>Git Repository: Your project must be a valid git repository</li> <li>Discord Access: Access to the Discord server with the workflow bot</li> <li>Project Permissions: Write access to the project repository</li> </ol>"},{"location":"user-guide/project-setup/#registration-process","title":"Registration Process","text":""},{"location":"user-guide/project-setup/#step-1-prepare-your-project-repository","title":"Step 1: Prepare Your Project Repository","text":"<p>Ensure your project is a valid git repository:</p> <pre><code># Navigate to your project\ncd /path/to/your/project\n\n# Verify git repository\ngit status\n\n# Ensure you have at least one commit\ngit log --oneline -1\n</code></pre>"},{"location":"user-guide/project-setup/#step-2-register-with-discord-bot","title":"Step 2: Register with Discord Bot","text":"<p>Use the <code>/project register</code> command in Discord:</p> <pre><code>/project register path:/path/to/your/project\n</code></pre> <p>Optional: Specify a custom project name: <pre><code>/project register path:/path/to/your/project name:my-custom-name\n</code></pre></p>"},{"location":"user-guide/project-setup/#step-3-verify-registration","title":"Step 3: Verify Registration","text":"<p>The bot will: 1. \u2705 Validate the path exists and is a git repository 2. \u2705 Check for naming conflicts 3. \u2705 Create a Discord channel <code>{hostname}-{projectname}</code> 4. \u2705 Initialize the <code>.orch-state/</code> directory structure 5. \u2705 Add the project to the orchestration system</p>"},{"location":"user-guide/project-setup/#project-structure-after-registration","title":"Project Structure After Registration","text":"<p>After successful registration, your project will have:</p> <pre><code>your-project/\n\u251c\u2500\u2500 .git/                   # Existing git repository\n\u251c\u2500\u2500 src/                    # Your existing code\n\u251c\u2500\u2500 .orch-state/           # New: AI workflow state\n\u2502   \u251c\u2500\u2500 backlog.json       # Empty project management data\n\u2502   \u251c\u2500\u2500 sprints/           # Directory for sprint history\n\u2502   \u2502   \u2514\u2500\u2500 .gitkeep       # Placeholder file\n\u2502   \u251c\u2500\u2500 architecture.md    # Template architecture decisions\n\u2502   \u251c\u2500\u2500 best-practices.md  # Template project conventions\n\u2502   \u2514\u2500\u2500 status.json        # Current workflow state\n\u2514\u2500\u2500 [your existing files]\n</code></pre>"},{"location":"user-guide/project-setup/#initial-configuration","title":"Initial Configuration","text":""},{"location":"user-guide/project-setup/#architecture-documentation","title":"Architecture Documentation","text":"<p>Edit <code>.orch-state/architecture.md</code> to document your project's architecture:</p> <pre><code># Project Architecture\n\n## Overview\nBrief description of your project's architecture and purpose.\n\n## Components\n- Component 1: Description\n- Component 2: Description\n\n## Design Decisions\n- Decision 1: Rationale\n- Decision 2: Rationale\n\n## Dependencies\n- External APIs and services\n- Key libraries and frameworks\n\n## Future Considerations\n- Planned improvements\n- Technical debt items\n</code></pre>"},{"location":"user-guide/project-setup/#best-practices","title":"Best Practices","text":"<p>Update <code>.orch-state/best-practices.md</code> with project-specific guidelines:</p> <pre><code># Project Best Practices\n\n## Code Standards\n- Coding conventions specific to your project\n- Style guidelines and formatting rules\n\n## Testing Strategy\n- Testing frameworks and approaches\n- Coverage requirements\n\n## Git Workflow\n- Branching strategy\n- Commit message conventions\n\n## AI Agent Guidelines\n- Project-specific instructions for AI agents\n- Patterns and conventions to follow\n\n## Review Process\n- Code review requirements\n- Approval workflows\n</code></pre>"},{"location":"user-guide/project-setup/#discord-channel-usage","title":"Discord Channel Usage","text":""},{"location":"user-guide/project-setup/#channel-naming-convention","title":"Channel Naming Convention","text":"<p>Channels are automatically created with the pattern: <pre><code>{hostname}-{projectname}\n</code></pre></p> <p>For example: - <code>devbox-myproject</code> - <code>laptop-ecommerce-site</code> - <code>server-api-gateway</code></p>"},{"location":"user-guide/project-setup/#available-commands","title":"Available Commands","text":"<p>Once registered, use these commands in your project channel:</p>"},{"location":"user-guide/project-setup/#epic-management","title":"Epic Management","text":"<pre><code>/epic \"Implement user authentication system\"\n</code></pre>"},{"location":"user-guide/project-setup/#backlog-management","title":"Backlog Management","text":"<pre><code>/backlog view\n/backlog add_story title:\"User login\" description:\"Login functionality\"\n/backlog prioritize story_id:story-123 priority:1\n</code></pre>"},{"location":"user-guide/project-setup/#sprint-management","title":"Sprint Management","text":"<pre><code>/sprint plan\n/sprint start\n/sprint status\n/sprint pause\n/sprint resume\n</code></pre>"},{"location":"user-guide/project-setup/#workflow-control","title":"Workflow Control","text":"<pre><code>/approve\n/request_changes \"Need better error handling\"\n/state\n</code></pre>"},{"location":"user-guide/project-setup/#common-setup-scenarios","title":"Common Setup Scenarios","text":""},{"location":"user-guide/project-setup/#new-project-setup","title":"New Project Setup","text":"<p>For a brand new project:</p> <ol> <li> <p>Create and initialize git repository:    <pre><code>mkdir my-new-project\ncd my-new-project\ngit init\ngit commit --allow-empty -m \"Initial commit\"\n</code></pre></p> </li> <li> <p>Register with Discord bot:    <pre><code>/project register path:/path/to/my-new-project\n</code></pre></p> </li> <li> <p>Start with epic definition:    <pre><code>/epic \"Build MVP for user management system\"\n</code></pre></p> </li> </ol>"},{"location":"user-guide/project-setup/#existing-project-integration","title":"Existing Project Integration","text":"<p>For an existing project with code:</p> <ol> <li> <p>Ensure git repository is current:    <pre><code>cd /path/to/existing/project\ngit status\ngit add .\ngit commit -m \"Prepare for AI workflow integration\"\n</code></pre></p> </li> <li> <p>Register project:    <pre><code>/project register path:/path/to/existing/project\n</code></pre></p> </li> <li> <p>Document current architecture:</p> </li> <li>Edit <code>.orch-state/architecture.md</code></li> <li> <p>Update <code>.orch-state/best-practices.md</code></p> </li> <li> <p>Create initial epic for next phase:    <pre><code>/epic \"Modernize authentication system\"\n</code></pre></p> </li> </ol>"},{"location":"user-guide/project-setup/#multiple-environment-setup","title":"Multiple Environment Setup","text":"<p>For projects with different environments:</p> <ol> <li> <p>Register each environment separately:    <pre><code>/project register path:/path/to/project-dev name:myproject-dev\n/project register path:/path/to/project-staging name:myproject-staging\n/project register path:/path/to/project-prod name:myproject-prod\n</code></pre></p> </li> <li> <p>Each gets its own Discord channel:</p> </li> <li><code>#hostname-myproject-dev</code></li> <li><code>#hostname-myproject-staging</code></li> <li><code>#hostname-myproject-prod</code></li> </ol>"},{"location":"user-guide/project-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/project-setup/#registration-failures","title":"Registration Failures","text":"<p>Error: \"Path does not exist\" - Verify the path is correct and accessible - Use absolute paths, not relative paths</p> <p>Error: \"Path is not a git repository\" - Run <code>git init</code> in the directory - Ensure <code>.git</code> directory exists</p> <p>Error: \"Project already registered\" - Use a different project name - Check existing projects with <code>/state</code></p> <p>Error: \"Channel already exists\" - Another project may be using the same name - This could indicate a naming conflict or duplicate registration</p>"},{"location":"user-guide/project-setup/#post-registration-issues","title":"Post-Registration Issues","text":"<p>Cannot find project channel - Check channel naming: <code>{hostname}-{projectname}</code> - Verify you have permission to see the channel - Bot may need time to create the channel</p> <p>Commands not working - Ensure you're in the correct project channel - Check bot permissions - Verify project is in correct state with <code>/state</code></p>"},{"location":"user-guide/project-setup/#best-practices_1","title":"Best Practices","text":""},{"location":"user-guide/project-setup/#project-organization","title":"Project Organization","text":"<ol> <li>Clear Naming: Use descriptive project names</li> <li>Consistent Structure: Follow established patterns</li> <li>Documentation: Keep architecture and practices current</li> <li>Git Hygiene: Regular commits and clean history</li> </ol>"},{"location":"user-guide/project-setup/#workflow-integration","title":"Workflow Integration","text":"<ol> <li>Start Small: Begin with simple epics and stories</li> <li>Iterative Approach: Use short sprints initially</li> <li>Regular Reviews: Conduct sprint retrospectives</li> <li>Continuous Improvement: Update practices based on experience</li> </ol>"},{"location":"user-guide/project-setup/#team-coordination","title":"Team Coordination","text":"<ol> <li>Channel Discipline: Use project-specific channels</li> <li>Clear Communication: Document decisions in architecture.md</li> <li>Approval Process: Establish clear approval workflows</li> <li>Regular Standups: Coordinate with team members</li> </ol>"},{"location":"user-guide/project-setup/#security-considerations","title":"Security Considerations","text":""},{"location":"user-guide/project-setup/#repository-access","title":"Repository Access","text":"<ul> <li>Workflow bot requires read/write access to <code>.orch-state/</code> directory</li> <li>Bot cannot access other project files without explicit permissions</li> <li>Standard git permissions model applies</li> </ul>"},{"location":"user-guide/project-setup/#data-privacy","title":"Data Privacy","text":"<ul> <li>Project management data stored in project repository</li> <li>No external data storage or transmission</li> <li>Audit trail maintained in git history</li> </ul>"},{"location":"user-guide/project-setup/#discord-permissions","title":"Discord Permissions","text":"<ul> <li>Project channels provide access control</li> <li>Bot permissions scoped to workflow operations</li> <li>Team members need appropriate Discord roles</li> </ul>"},{"location":"user-guide/state-machine/","title":"Orchestrator Command State Machine","text":"<p>This document formalises when each slash-command is legal, how it changes the orchestrator's state, and the feedback pattern when a command is issued in an improper state.</p>"},{"location":"user-guide/state-machine/#1-top-level-states","title":"1. Top-Level States","text":"Key State Name Description IDLE Idle / Awaiting Vision No epic defined; waiting for <code>/epic</code> or backlog grooming. BACKLOG_READY Backlog Ready Stories exist in the product backlog, none selected for sprint. SPRINT_PLANNED Sprint Planned A sprint backlog has been drafted but not started. SPRINT_ACTIVE Sprint Active Agents are working on tasks. SPRINT_PAUSED Sprint Paused Active sprint is temporarily halted. SPRINT_REVIEW Sprint Review Sprint tasks done; PR awaiting user review. BLOCKED Blocked Task Sprint task failed CI 3\u00d7 and awaits user input. (Sub-state of <code>SPRINT_ACTIVE</code>.)"},{"location":"user-guide/state-machine/#2-command-state-matrix","title":"2. Command \u2192 State Matrix","text":"Command Allowed in States Resulting State <code>/epic</code> IDLE, BACKLOG_READY BACKLOG_READY <code>/approve</code> BACKLOG_READY BACKLOG_READY <code>/backlog *</code> Any (except SPRINT_REVIEW locked) (no change) <code>/sprint plan</code> BACKLOG_READY SPRINT_PLANNED <code>/sprint start</code> SPRINT_PLANNED SPRINT_ACTIVE <code>/sprint status</code> SPRINT_ACTIVE, SPRINT_PAUSED, BLOCKED (no change) <code>/sprint pause</code> SPRINT_ACTIVE SPRINT_PAUSED <code>/sprint resume</code> SPRINT_PAUSED SPRINT_ACTIVE <code>/request_changes</code> SPRINT_REVIEW BACKLOG_READY <code>/suggest_fix</code> BLOCKED SPRINT_ACTIVE <code>/skip_task</code> BLOCKED SPRINT_ACTIVE (next task) <code>/feedback</code> SPRINT_REVIEW IDLE <p>Commands issued outside their Allowed States trigger an error response (see \u00a74). <code>/backlog</code> commands are always safe but may show different context (product vs sprint). <code>BLOCKED</code> is transient: once the user responds the orchestrator returns to <code>SPRINT_ACTIVE</code> or skips forward.</p>"},{"location":"user-guide/state-machine/#3-mermaid-state-diagram","title":"3. Mermaid State Diagram","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nstateDiagram-v2\n    [*] --&gt; IDLE\n    IDLE --&gt; BACKLOG_READY : /epic\n    BACKLOG_READY --&gt; BACKLOG_READY : /approve\n    BACKLOG_READY --&gt; SPRINT_PLANNED : /sprint plan\n    SPRINT_PLANNED --&gt; SPRINT_ACTIVE : /sprint start\n    SPRINT_ACTIVE --&gt; SPRINT_PAUSED : /sprint pause\n    SPRINT_PAUSED --&gt; SPRINT_ACTIVE : /sprint resume\n    SPRINT_ACTIVE --&gt; BLOCKED : CI fails 3\u00d7\n    BLOCKED --&gt; SPRINT_ACTIVE : /suggest_fix | /skip_task\n    SPRINT_ACTIVE --&gt; SPRINT_REVIEW : all tasks done\n    SPRINT_REVIEW --&gt; BACKLOG_READY : /request_changes\n    SPRINT_REVIEW --&gt; IDLE : /feedback (retrospective complete)</code></pre>"},{"location":"user-guide/state-machine/#4-standardised-error-hint-response","title":"4. Standardised Error &amp; Hint Response","text":"<p>When a user issues an invalid command for the current state, the orchestrator must reply with:</p> <pre><code>{\n  \"type\": \"error\",\n  \"code\": \"INVALID_STATE\",\n  \"current_state\": \"SPRINT_ACTIVE\",\n  \"command\": \"/sprint plan\",\n  \"allowed_in\": [\"BACKLOG_READY\"],\n  \"hint\": \"Sprint already active. Use /sprint status or /sprint pause instead.\"\n}\n</code></pre> <p>In Discord this is rendered as:</p> <p>\u26a0\ufe0f Command <code>/sprint plan</code> is not allowed now (state: SPRINT_ACTIVE). Try <code>/sprint status</code> or <code>/sprint pause</code>.</p>"},{"location":"user-guide/state-machine/#5-implementation-notes","title":"5. Implementation Notes","text":"<ol> <li>Maintain state in orchestrator memory / lightweight DB keyed by guild or workspace.</li> <li>Expose a <code>/state</code> debug command (admin-only) to dump current finite-state and backlog summary.</li> <li>Unit-test the state machine with a table-driven test: <code>(state, command) \u2192 expected</code>.</li> <li>Extend easily: add columns/rows to matrix and diagram.</li> </ol> <p>This state machine keeps user interactions predictable and provides immediate, actionable feedback when mis-ordered commands occur. </p>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and solutions for the AI Agent TDD-Scrum workflow system.</p>"},{"location":"user-guide/troubleshooting/#discord-bot-issues","title":"Discord Bot Issues","text":""},{"location":"user-guide/troubleshooting/#bot-doesnt-respond-to-commands","title":"Bot doesn't respond to commands","text":"<p>Symptoms: Commands are sent but no response from the bot.</p> <p>Solutions: 1. Verify the Discord bot token is set correctly:    <pre><code>echo $DISCORD_BOT_TOKEN\n</code></pre> 2. Check bot permissions in your Discord server:    - Use Slash Commands    - Send Messages    - Embed Links    - Read Message History 3. Ensure the bot was invited with the correct OAuth2 scopes:    - <code>bot</code>    - <code>applications.commands</code></p>"},{"location":"user-guide/troubleshooting/#commands-return-unknown-interaction","title":"Commands return \"Unknown interaction\"","text":"<p>Symptoms: Discord shows \"This interaction failed\" message.</p> <p>Solutions: 1. Restart the bot to refresh slash command registration 2. Wait up to 1 hour for global commands to sync 3. Use guild-specific commands for faster testing</p>"},{"location":"user-guide/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"user-guide/troubleshooting/#import-errors-or-missing-dependencies","title":"Import errors or missing dependencies","text":"<p>Symptoms: <code>ModuleNotFoundError</code> when running the system.</p> <p>Solutions: 1. Install all dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre> 2. Verify Python version (3.8+ required):    <pre><code>python --version\n</code></pre> 3. Use a virtual environment to avoid conflicts:    <pre><code>python -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# or\nvenv\\Scripts\\activate     # Windows\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#tests-failing","title":"Tests failing","text":"<p>Symptoms: <code>pytest</code> command shows failures.</p> <p>Solutions: 1. Run unit tests only (skip integration tests):    <pre><code>pytest tests/unit/ -v\n</code></pre> 2. Install test dependencies:    <pre><code>pip install pytest pytest-asyncio\n</code></pre> 3. Set required environment variables for integration tests:    <pre><code>export DISCORD_BOT_TOKEN=\"test_token\"\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#state-machine-issues","title":"State Machine Issues","text":""},{"location":"user-guide/troubleshooting/#invalid-command-errors","title":"Invalid command errors","text":"<p>Symptoms: \"Command not allowed in current state\" messages.</p> <p>Solutions: 1. Check current state:    <pre><code>/state\n</code></pre> 2. Follow the proper command sequence:    - <code>IDLE</code> \u2192 <code>/epic</code> \u2192 <code>BACKLOG_READY</code>    - <code>BACKLOG_READY</code> \u2192 <code>/sprint plan</code> \u2192 <code>SPRINT_PLANNED</code>    - <code>SPRINT_PLANNED</code> \u2192 <code>/sprint start</code> \u2192 <code>SPRINT_ACTIVE</code> 3. Use <code>/state</code> to see allowed commands for your current state</p>"},{"location":"user-guide/troubleshooting/#stuck-in-blocked-state","title":"Stuck in blocked state","text":"<p>Symptoms: System shows <code>BLOCKED</code> state and won't accept commands.</p> <p>Solutions: 1. Use <code>/suggest_fix</code> to provide guidance to agents 2. Use <code>/skip_task</code> to abandon the current task 3. Restart the orchestrator if the state becomes corrupted</p>"},{"location":"user-guide/troubleshooting/#agent-issues","title":"Agent Issues","text":""},{"location":"user-guide/troubleshooting/#agents-not-executing-tasks","title":"Agents not executing tasks","text":"<p>Symptoms: Sprint starts but no progress is made.</p> <p>Solutions: 1. Verify Claude Code integration is working:    <pre><code>claude --version\n</code></pre> 2. Check agent permissions and tool access 3. Review orchestrator logs for error messages 4. Ensure project repository is properly configured</p>"},{"location":"user-guide/troubleshooting/#ai-responses-are-too-verbose-or-incorrect","title":"AI responses are too verbose or incorrect","text":"<p>Symptoms: Agents produce low-quality output.</p> <p>Solutions: 1. Provide more specific task descriptions 2. Use <code>/request_changes</code> to guide agent improvements 3. Check that agents have appropriate context about the project 4. Verify the AI model configuration</p>"},{"location":"user-guide/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"user-guide/troubleshooting/#multi-project-setup-not-working","title":"Multi-project setup not working","text":"<p>Symptoms: Only one project is managed, others are ignored.</p> <p>Solutions: 1. Verify project configuration YAML syntax 2. Ensure each project has a unique identifier 3. Check that project paths are accessible 4. Review orchestrator logs for configuration errors</p>"},{"location":"user-guide/troubleshooting/#environment-variables-not-recognized","title":"Environment variables not recognized","text":"<p>Symptoms: \"Environment variable not set\" errors.</p> <p>Solutions: 1. Set variables in your shell profile:    <pre><code>echo 'export DISCORD_BOT_TOKEN=\"your_token\"' &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n</code></pre> 2. Use a <code>.env</code> file for development:    <pre><code>echo 'DISCORD_BOT_TOKEN=your_token' &gt; .env\n</code></pre> 3. Verify variables are set in the current session:    <pre><code>env | grep DISCORD\n</code></pre></p>"},{"location":"user-guide/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"user-guide/troubleshooting/#slow-response-times","title":"Slow response times","text":"<p>Symptoms: Commands take longer than 30 seconds to respond.</p> <p>Solutions: 1. Check network connectivity to Discord and AI services 2. Reduce the scope of tasks in sprints 3. Monitor system resources (CPU, memory) 4. Consider running fewer concurrent projects</p>"},{"location":"user-guide/troubleshooting/#memory-usage-growing-over-time","title":"Memory usage growing over time","text":"<p>Symptoms: System memory usage increases during operation.</p> <p>Solutions: 1. Restart the orchestrator periodically 2. Monitor for memory leaks in agent processes 3. Reduce the frequency of state saves 4. Clear old log files and temporary data</p>"},{"location":"user-guide/troubleshooting/#getting-additional-help","title":"Getting Additional Help","text":"<p>If these solutions don't resolve your issue:</p> <ol> <li>Check the logs: Look for error messages in the console output</li> <li>Use debug mode: Run with increased verbosity for more details</li> <li>Review state: Use <code>/state</code> command to understand system status</li> <li>Search documentation: Check the User Guide for command details</li> <li>Report issues: Create an issue on the project repository with:</li> <li>System information (OS, Python version)</li> <li>Complete error messages</li> <li>Steps to reproduce the problem</li> <li>Expected vs actual behavior</li> </ol>"},{"location":"user-guide/user-profile/","title":"User Profile Context: Solo Engineer \u2192 Technical Orchestrator","text":""},{"location":"user-guide/user-profile/#1-persona-snapshot","title":"1. Persona Snapshot","text":"<ul> <li>Name (alias): Solo-Engineer-Manager (SEM)</li> <li>Current Role: Senior individual contributor owning several products across personal and client repos.</li> <li>Aspired Role: Technical orchestrator who delegates low-level implementation to specialist AI agents while focusing on architecture, product direction, and quality.</li> <li>Daily Time Budget: \u2264 2 hrs deep focus + adhoc reviews.</li> <li>Preferred Communication: Concise, decision-ready summaries; markdown tables over long prose; mermaid diagrams for flows.</li> </ul>"},{"location":"user-guide/user-profile/#2-core-goals","title":"2. Core Goals","text":"<ol> <li>Strategic Alignment \u2013 Spend \u2265 70 % of effort on roadmap definition, architecture, and cross-project coherence.</li> <li>Quality Gateway \u2013 Establish rock-solid automated tests &amp; CI so that merged code is production-ready with minimal manual QA.</li> <li>Throughput, not Tickets \u2013 Keep WIP \u2264 2 concurrent initiatives per project; finish before starting new work.</li> <li>Knowledge Scaling \u2013 Capture design decisions &amp; ADRs once, reuse across projects.</li> </ol>"},{"location":"user-guide/user-profile/#3-decision-boundaries-what-the-agents-decide-vs-what-sem-decides","title":"3. Decision Boundaries (What the Agents Decide vs. What SEM Decides)","text":"Area AI Agents Own SEM Retains Task decomposition Break story \u2192 tasks; propose PR titles Approve sprint scope Implementation Write &amp; refactor code/tests Approve architecture-significant changes Debug loop \u2264 3 autonomous attempts Guide after repeated failure Documentation Tech/User docs generation Final voice &amp; tone check Release Draft releases, changelogs Hit publish button <p>Agents should escalate when: * CI fails 3\u00d7 consecutively * Architectural decision alters public contracts * Security-sensitive code is touched</p>"},{"location":"user-guide/user-profile/#4-workflow-principles","title":"4. Workflow Principles","text":"<ol> <li>Trunk-Based Development with short-lived feature branches.</li> <li>TDD First: tests precede production code.</li> <li>Continuous Deployment gated by green CI.</li> <li>Automated Linters &amp; Formatters enforce style; no manual reviews for cosmetics.</li> <li>Backlog \u2260 Dumping Ground: every item must map to a quarterly objective.</li> </ol>"},{"location":"user-guide/user-profile/#5-key-performance-indicators","title":"5. Key Performance Indicators","text":"<ul> <li>PR cycle time \u2264 1 day.</li> <li>Mean time-to-restore (failing main) &lt; 30 min.</li> <li>Test coverage \u2265 90 % critical paths.</li> <li>Zero P1 bugs escaping to production per quarter.</li> </ul>"},{"location":"user-guide/user-profile/#6-tooling-integrations","title":"6. Tooling &amp; Integrations","text":"<ul> <li>Version Control: GitHub.</li> <li>CI/CD: GitHub Actions.</li> <li>Issue Tracking: GitHub Projects, epics \u2192 features \u2192 stories.</li> <li>Communication: Discord bot (#orchestrator) for agent updates.</li> <li>Observability: Sentry + Prometheus (planned).</li> </ul>"},{"location":"user-guide/user-profile/#7-preferred-output-formats-for-agents","title":"7. Preferred Output Formats for Agents","text":"<ul> <li>Status updates: <code>\ud83d\udcc8 Sprint X \u2013 3/5 tasks done, ETA: 2 days</code>.</li> <li>Decisions needed: <code>\u26a0\ufe0f Decision \u2013 PR #42 alters auth schema. Approve?</code>.</li> <li>Reports: Markdown bullet lists; diagrams in Mermaid.</li> </ul> <p>This profile should be loaded at orchestration start-up so every specialist agent inherits the same context &amp; escalation rules. </p>"},{"location":"user-guide/workflow-sequences/","title":"AI Agent Scrum Workflows \u2013 Research Mode (v3)","text":"<p>This file documents the core interaction patterns between the Product Owner (single user) and the AI-powered Orchestrator + specialist agents.</p>"},{"location":"user-guide/workflow-sequences/#1-main-workflow-lightweight-scrum-cycle","title":"1. Main Workflow: Lightweight Scrum Cycle","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"AI Agent Research Scrum Workflow\"\n\n    participant U as \"User (Product Owner)\"\n    participant BOT as \"Orchestrator (Scrum Master)\"\n    box \"Specialist Agents\"\n        participant QA as \"QA Agent\"\n        participant DEV as \"Code Agent\"\n        participant DOC as \"Doc Agent\"\n    end\n    participant GH as \"GitHub Repo\"\n    participant CI as \"CI Runner\"\n\n    %% == 1. Vision &amp; Backlog ==\n    U-&gt;&gt;BOT: /epic \"Build auth system\"\n    BOT-&gt;&gt;BOT: Decompose into candidate stories (AUTH-1, AUTH-2)\n    BOT--&gt;&gt;U: \"Proposed stories ready: [AUTH-1, AUTH-2]\"\n\n    U-&gt;&gt;BOT: /approve AUTH-1 AUTH-2\n    BOT-&gt;&gt;BOT: Add stories to product backlog\n\n    %% == 2. Sprint Planning ==\n    U-&gt;&gt;BOT: /sprint plan AUTH-1 AUTH-2\n    BOT--&gt;&gt;U: \"Sprint drafted: Auth \u2011 Basic\"\n    U-&gt;&gt;BOT: /sprint start\n\n    %% == 3. Sprint Execution ==\n    loop each task in Sprint\n        BOT-&gt;&gt;QA: \"Write failing tests for TASK\"\n        QA--&gt;&gt;BOT: test_task.py\n\n        BOT-&gt;&gt;DEV: \"Implement code to pass tests\" + test_task.py\n        DEV--&gt;&gt;BOT: patch.diff\n\n        BOT-&gt;&gt;GH: Push branch feat/TASK\n        GH-&gt;&gt;CI: run pytest &amp; lint\n        CI--&gt;&gt;BOT: report \u2714 / \u2716\n\n        alt Tests pass\n            BOT-&gt;&gt;DOC: \"Add docs for TASK\"\n            DOC--&gt;&gt;BOT: docs_update.md\n            BOT-&gt;&gt;GH: Commit docs_update.md\n        else Tests fail &amp; attempt &lt; 3\n            BOT-&gt;&gt;DEV: \"CI failed \u2013 please fix\"\n        else Tests fail after 3 attempts\n            BOT--&gt;&gt;U: \"TASK blocked\"  \\nOptions: /suggest_fix, /skip_task\n        end\n    end\n\n    %% == 4. Sprint Review ==\n    BOT-&gt;&gt;GH: Open PR \"auth-sprint\"\n    BOT--&gt;&gt;U: \"Sprint ready \u2013 please review PR #123\"\n    U-&gt;&gt;BOT: /request_changes \"Guard against duplicate emails\"\n    note over BOT: Changes become new backlog item.</code></pre>"},{"location":"user-guide/workflow-sequences/#2-backlog-management-flow","title":"2. Backlog Management Flow","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"Backlog Commands\"\n\n    participant U as \"User\"\n    participant BOT as \"Orchestrator\"\n\n    U-&gt;&gt;BOT: /backlog view product\n    BOT--&gt;&gt;U: List stories [AUTH-1, AUTH-2]\n\n    U-&gt;&gt;BOT: /backlog view AUTH-1\n    BOT--&gt;&gt;U: Full details AUTH-1\n\n    U-&gt;&gt;BOT: /backlog add_story \"As a user I can reset my password\" --feature AUTH\n    BOT--&gt;&gt;U: \"Story AUTH-3 created\"\n\n    U-&gt;&gt;BOT: /backlog prioritize AUTH-3 high\n    BOT--&gt;&gt;U: \"AUTH-3 priority set to high\"</code></pre>"},{"location":"user-guide/workflow-sequences/#3-sprint-control-commands","title":"3. Sprint Control Commands","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"Sprint Control\"\n\n    participant U as \"User\"\n    participant BOT as \"Orchestrator\"\n\n    Note over U,BOT: During an active sprint...\n\n    U-&gt;&gt;BOT: /sprint status\n    BOT--&gt;&gt;U: \"Sprint 'Auth-Basic': 2/4 tasks complete\"\n\n    U-&gt;&gt;BOT: /sprint pause\n    BOT-&gt;&gt;BOT: Freeze agent tasks\n    BOT--&gt;&gt;U: \"Sprint paused\"\n\n    U-&gt;&gt;BOT: /sprint resume\n    BOT-&gt;&gt;BOT: Resume tasks\n    BOT--&gt;&gt;U: \"Sprint resumed\"</code></pre>"},{"location":"user-guide/workflow-sequences/#4-debug-rework-loop-condensed","title":"4. Debug &amp; Rework Loop (Condensed)","text":"<pre><code>%%{init: {'theme': 'dark'}}%%\nsequenceDiagram\n    title \"Debug Loop\"\n\n    participant BOT as \"Orchestrator\"\n    participant DEV as \"Code Agent\"\n    participant GH as \"GitHub\"\n    participant CI as \"CI Runner\"\n    participant U as \"User\"\n\n    BOT-&gt;&gt;DEV: \"Fix CI failure (attempt 1)\"\n    loop Up to 3 attempts\n        DEV--&gt;&gt;BOT: patch.diff\n        BOT-&gt;&gt;GH: push\n        GH-&gt;&gt;CI: test\n        CI--&gt;&gt;BOT: \u2716\n        BOT-&gt;&gt;DEV: \"Fix again\"\n    end\n\n    BOT--&gt;&gt;U: \"Task blocked after 3 attempts\"\\nChoose: /suggest_fix or /skip_task</code></pre>"}]}