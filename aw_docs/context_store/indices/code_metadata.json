{
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/app.py": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/app.py",
    "language": "python",
    "last_modified": "2025-07-05T00:50:23.181461",
    "description": "python source file with 26 functions.",
    "classes": [
      "WorkflowState",
      "ExecutionStatus",
      "StateMachine"
    ],
    "functions": [
      "index",
      "context_manager_ui",
      "get_state",
      "handle_connect",
      "handle_command",
      "add_context",
      "get_context",
      "query_contexts",
      "log_decision",
      "get_suggestions",
      "get_stats",
      "get_patterns",
      "analyze_doc",
      "learn_patterns",
      "init_project",
      "find_info",
      "collect_context",
      "project_status",
      "get_visualization_graph",
      "get_visualization_treemap",
      "get_visualization_directory_tree",
      "__post_init__",
      "can_transition",
      "transition",
      "get_diagram",
      "build_tree"
    ],
    "imports": [
      "flask",
      "flask_socketio",
      "enum",
      "dataclasses",
      "typing",
      "datetime",
      "pathlib",
      "context_manager"
    ],
    "exports": [],
    "docstrings": {
      "StateMachine": "Simple state machine with allowed transitions.",
      "index": "Serve main interface.",
      "context_manager_ui": "Serve Context Manager UI.",
      "get_state": "Get current state of both machines.",
      "handle_connect": "Handle client connection.",
      "handle_command": "Process commands from client.",
      "add_context": "Add a new context.",
      "get_context": "Get a specific context.",
      "query_contexts": "Query contexts with filters.",
      "log_decision": "Log a development decision.",
      "get_suggestions": "Get task suggestions.",
      "get_stats": "Get Context Manager statistics.",
      "get_patterns": "Get detected patterns.",
      "analyze_doc": "Analyze a documentation file.",
      "learn_patterns": "Learn documentation patterns.",
      "init_project": "Initialize project by scanning all files.",
      "find_info": "Find information in the project.",
      "collect_context": "Collect context for a specific task.",
      "project_status": "Get project initialization status.",
      "get_visualization_graph": "Get knowledge graph data for visualization.",
      "get_visualization_treemap": "Get treemap data for project structure visualization.",
      "get_visualization_directory_tree": "Get directory tree data with Claude-generated descriptions.",
      "can_transition": "Check if transition is allowed.",
      "transition": "Perform state transition if allowed.",
      "get_diagram": "Generate Mermaid diagram."
    },
    "comments": [],
    "lines_of_code": 701,
    "complexity_score": 0.0
  },
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/cm.py": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/cm.py",
    "language": "python",
    "last_modified": "2025-07-05T00:52:28.498920",
    "description": "python source file with 20 functions.",
    "classes": [],
    "functions": [
      "load_config",
      "save_config",
      "get_current_project",
      "set_current_project",
      "cmd_log_decision",
      "cmd_log_error",
      "cmd_suggest",
      "cmd_stats",
      "cmd_query",
      "cmd_list_projects",
      "cmd_use_project",
      "cmd_analyze_doc",
      "cmd_learn_patterns",
      "cmd_doc_quality",
      "cmd_init",
      "cmd_find",
      "cmd_status",
      "cmd_explain",
      "cmd_collect",
      "main"
    ],
    "imports": [
      "argparse",
      "sys",
      "json",
      "time",
      "datetime",
      "pathlib",
      "context_manager",
      "traceback"
    ],
    "exports": [],
    "docstrings": {
      "load_config": "Load CLI configuration.",
      "save_config": "Save CLI configuration.",
      "get_current_project": "Get current project ID.",
      "set_current_project": "Set current project ID.",
      "cmd_log_decision": "Log a development decision.",
      "cmd_log_error": "Log an error.",
      "cmd_suggest": "Get task suggestions.",
      "cmd_stats": "Show statistics.",
      "cmd_query": "Query contexts.",
      "cmd_list_projects": "List all projects.",
      "cmd_use_project": "Switch to a different project.",
      "cmd_analyze_doc": "Analyze a documentation file.",
      "cmd_learn_patterns": "Learn documentation patterns.",
      "cmd_doc_quality": "Check documentation quality.",
      "cmd_init": "Initialize project by scanning all files.",
      "cmd_find": "Find information in the project.",
      "cmd_status": "Show project initialization status.",
      "cmd_explain": "Explain a concept or answer a question using AI.",
      "cmd_collect": "Collect context for a specific task.",
      "main": "Main CLI entry point."
    },
    "comments": [],
    "lines_of_code": 555,
    "complexity_score": 0.0
  },
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/context_manager.py": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/context_manager.py",
    "language": "python",
    "last_modified": "2025-07-05T00:45:57.782726",
    "description": "python source file with 62 functions.",
    "classes": [
      "ContextType",
      "Context",
      "DocMetadata",
      "CodeMetadata",
      "ProjectIndex",
      "LocationResult",
      "DocPattern",
      "TaskAnalysis",
      "ContextItem",
      "ContextCollection",
      "ContextManager"
    ],
    "functions": [
      "to_dict",
      "from_dict",
      "needs_update",
      "__init__",
      "_init_storage",
      "_load_existing_data",
      "add_context",
      "get_context",
      "query_contexts",
      "log_decision",
      "log_error",
      "suggest_next_task",
      "_detect_patterns",
      "get_patterns",
      "_audit_operation",
      "_has_persistence",
      "get_stats",
      "analyze_doc",
      "learn_doc_patterns",
      "suggest_doc_updates",
      "calculate_doc_quality",
      "_infer_doc_type",
      "_calculate_quality_scores",
      "_check_staleness",
      "_find_related_docs",
      "_identify_affected_sections",
      "_save_doc_metadata",
      "_save_patterns",
      "initialize_project",
      "_scan_documentation",
      "_scan_code",
      "_analyze_code_file",
      "_analyze_python_file",
      "_analyze_js_file",
      "_detect_language",
      "_extract_concepts_from_text",
      "_build_concept_mappings",
      "_find_files_containing",
      "_extract_relationships",
      "_generate_folder_descriptions",
      "_save_project_index",
      "find_information",
      "_load_project_index",
      "get_project_status",
      "_analyze_task",
      "_infer_file_patterns",
      "collect_context_for_task",
      "_collect_relevant_items",
      "_calculate_context_relevance",
      "_calculate_name_match_relevance",
      "_should_include_item",
      "_convert_to_context_item",
      "_optimize_for_tokens",
      "_add_items_within_budget",
      "_truncate_item",
      "_estimate_tokens",
      "_get_item_content",
      "_get_item_path",
      "get_claude_tools",
      "explain_with_ai",
      "generate_doc_with_ai",
      "analyze_patterns_with_ai"
    ],
    "imports": [
      "dataclasses",
      "datetime",
      "typing",
      "enum",
      "pathlib",
      "json",
      "uuid",
      "os",
      "re",
      "collections",
      "ast",
      "sys",
      "time",
      "claude_tools"
    ],
    "exports": [],
    "docstrings": {
      "ContextType": "Types of context entries.",
      "Context": "Core context structure for all system interactions.",
      "DocMetadata": "Lightweight metadata for existing documentation files.",
      "CodeMetadata": "Metadata for source code files.",
      "ProjectIndex": "Complete project understanding.",
      "LocationResult": "Result of finding information in the project.",
      "DocPattern": "Learned patterns from existing documentation.",
      "TaskAnalysis": "Analysis of a task to determine what context is needed.",
      "ContextItem": "Individual item of context for an agent task.",
      "ContextCollection": "Complete context collection for a specific task.",
      "ContextManager": "Central context orchestration for agent-workflow system.",
      "to_dict": "Convert to dictionary for JSON serialization.",
      "from_dict": "Create Context from dictionary.",
      "needs_update": "Check if document likely needs updating.",
      "__init__": "Initialize Context Manager with storage directory.",
      "_init_storage": "Initialize directory structure.",
      "_load_existing_data": "Load existing contexts and metadata from storage.",
      "add_context": "Add new context to the system.",
      "get_context": "Retrieve context by ID.",
      "query_contexts": "Search contexts with filters.",
      "log_decision": "Track development decisions for self-improvement.",
      "log_error": "Log errors for pattern analysis.",
      "suggest_next_task": "Generate task suggestions based on patterns.",
      "_detect_patterns": "Simple pattern detection for v1.",
      "get_patterns": "Get significant patterns.",
      "_audit_operation": "Add audit log entry.",
      "_has_persistence": "Check if persistence is properly configured.",
      "get_stats": "Get current statistics.",
      "analyze_doc": "Analyze a documentation file and extract patterns.",
      "learn_doc_patterns": "Learn documentation patterns from existing files.",
      "suggest_doc_updates": "Suggest documentation updates based on context.",
      "calculate_doc_quality": "Calculate documentation quality metrics.",
      "_infer_doc_type": "Infer document type from path and name.",
      "_calculate_quality_scores": "Calculate quality scores for document content.",
      "_check_staleness": "Check for staleness indicators.",
      "_find_related_docs": "Find documentation related to a code file.",
      "_identify_affected_sections": "Identify which sections of a doc might need updating.",
      "_save_doc_metadata": "Save document metadata to disk.",
      "_save_patterns": "Save learned patterns to disk.",
      "initialize_project": "Initialize project by scanning all documentation and code.\nBuilds comprehensive metadata layer for intelligent routing.\n\nArgs:\n    project_root: Root directory of project to scan\n    skip_descriptions: Skip generating Claude descriptions for faster indexing\n    \nReturns:\n    Summary of initialization results",
      "_scan_documentation": "Scan all documentation files.",
      "_scan_code": "Scan all code files.",
      "_analyze_code_file": "Analyze a single code file.",
      "_analyze_python_file": "Extract Python-specific metadata.",
      "_analyze_js_file": "Extract JavaScript/TypeScript metadata.",
      "_detect_language": "Detect programming language from file extension.",
      "_extract_concepts_from_text": "Extract concepts from text content.",
      "_build_concept_mappings": "Build concept-to-location mappings.",
      "_find_files_containing": "Find files containing any of the keywords.",
      "_extract_relationships": "Extract relationships between files.",
      "_generate_folder_descriptions": "Generate descriptions for all directories in the project.",
      "_save_project_index": "Save project index to disk.",
      "find_information": "Find where specific information lives in the project.\nUses initialized metadata for fast lookups.\n\nArgs:\n    query: Natural language query\n    \nReturns:\n    Ranked list of file locations with confidence scores",
      "_load_project_index": "Load existing project index from disk.",
      "get_project_status": "Get current project initialization status.",
      "_analyze_task": "Analyze a task description to extract key information.",
      "_infer_file_patterns": "Infer likely file patterns based on task analysis.",
      "collect_context_for_task": "Intelligent context collection based on task description.\n\nThis method analyzes a task description and collects all relevant context \nfrom the project, including documentation, code files, and previous contexts.\nIt uses pattern matching and relevance scoring to prioritize the most useful\ninformation while staying within token limits.\n\nArgs:\n    task_description: Description of the task to collect context for\n    agent_type: Type of agent requesting context (affects prioritization)\n    max_tokens: Maximum tokens to include in context (default: 50000)\n    include_types: List of context types to include (default: ['all'])\n    exclude_patterns: List of file patterns to exclude (e.g., ['*.test.js'])\n    agent_template: Custom template for context organization\n    explain_selection: If True, include explanations for why items were selected\n    min_relevance: Minimum relevance score to include an item (0-1, default: 0.3)\n\nReturns:\n    ContextCollection: Complete context collection with items, analysis, and suggestions\n\nRaises:\n    ValueError: If task_description is empty or project not initialized\n    \nExample:\n    >>> cm = ContextManager()\n    >>> context = cm.collect_context_for_task(\n    ...     \"Fix the authentication bug in the login endpoint\",\n    ...     agent_type=\"code\",\n    ...     max_tokens=30000\n    ... )\n    >>> print(f\"Collected {len(context.items)} items totaling {context.total_tokens} tokens\")",
      "_collect_relevant_items": "Collect relevant context items based on task analysis.\n\nReturns:\n    List of tuples (item, relevance_score) where item can be:\n    - Context object\n    - DocMetadata object\n    - CodeMetadata object\n    - Tuple of (folder_path, description) for folders",
      "_calculate_context_relevance": "Calculate relevance score for a context based on task analysis.",
      "_calculate_name_match_relevance": "Calculate relevance score for function/class name matches.",
      "_should_include_item": "Check if an item should be included based on filters.",
      "_convert_to_context_item": "Convert various item types to ContextItem format.",
      "_optimize_for_tokens": "Sophisticated token optimization with balanced representation across types.\n\nGroups items by type and allocates proportional token budgets:\n- 30% for contexts (recent decisions, errors, patterns)\n- 40% for code (implementation details)\n- 20% for docs (specifications, guides)\n- 10% for folders (structural overview)\n\nSupports smart truncation for large high-relevance items and redistribution\nof unused budget between categories.\n\nArgs:\n    items: List of context items sorted by relevance\n    max_tokens: Maximum allowed tokens\n    \nReturns:\n    Tuple of (optimized items, whether truncation occurred)",
      "_add_items_within_budget": "Add items from a category while staying within budget.\n\nSupports smart truncation for large items with high relevance.\n\nArgs:\n    items: List of items in this category (already sorted by relevance)\n    budget: Token budget for this category\n    category: Category name for logging\n    \nReturns:\n    Tuple of (selected items, tokens used, whether any items were truncated)",
      "_truncate_item": "Intelligently truncate a context item to fit within token limit.\n\nArgs:\n    item: The item to truncate\n    max_tokens: Maximum tokens allowed\n    \nReturns:\n    Truncated ContextItem or None if truncation not possible",
      "_estimate_tokens": "Estimate token count for a piece of content.\n\nUses a simple heuristic of ~4 characters per token, which is\nreasonable for English text and code.\n\nArgs:\n    content: The content to estimate tokens for\n    \nReturns:\n    Estimated token count",
      "_get_item_content": "Extract content from different item types.\n\nArgs:\n    item: The item to extract content from\n    item_type: Type hint for the item\n    \nReturns:\n    String content or empty string if extraction fails",
      "_get_item_path": "Extract path or identifier from different item types.\n\nArgs:\n    item: The item to extract path from\n    item_type: Type hint for the item\n    \nReturns:\n    Path string or identifier",
      "get_claude_tools": "Get or initialize Claude tools for AI enhancements.",
      "explain_with_ai": "Use AI to explain a concept or answer a question.",
      "generate_doc_with_ai": "Generate documentation for a file using AI.",
      "analyze_patterns_with_ai": "Deep pattern analysis using AI."
    },
    "comments": [],
    "lines_of_code": 2391,
    "complexity_score": 0.0
  },
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/aw_docs/claude_tools.py": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/aw_docs/claude_tools.py",
    "language": "python",
    "last_modified": "2025-07-04T23:06:46.753196",
    "description": "python source file with 19 functions.",
    "classes": [
      "ClaudeTools"
    ],
    "functions": [
      "__init__",
      "explain_with_context",
      "generate_documentation",
      "suggest_refactoring",
      "analyze_patterns_deep",
      "explain_concept",
      "_format_explanation",
      "_generate_doc_template",
      "_format_concept_explanation",
      "_analyze_decisions",
      "_analyze_errors",
      "_analyze_workflow",
      "_extract_keywords",
      "_count_error_types",
      "generate_file_description",
      "generate_folder_description",
      "generate_folder_descriptions_batch",
      "_fallback_to_individual",
      "_create_batches"
    ],
    "imports": [
      "typing",
      "pathlib",
      "json",
      "subprocess",
      "subprocess",
      "subprocess",
      "json",
      "re",
      "re"
    ],
    "exports": [],
    "docstrings": {
      "ClaudeTools": "AI-powered tools for Context Manager enhancement.",
      "__init__": "Initialize with a Context Manager instance.",
      "explain_with_context": "Use project context for AI-powered explanations.\nCombines deterministic search with AI understanding.\n\nArgs:\n    query: Natural language question\n    \nReturns:\n    AI-generated explanation with project context",
      "generate_documentation": "Generate documentation for a code file using AI.\n\nArgs:\n    file_path: Path to code file\n    \nReturns:\n    Generated documentation in markdown",
      "suggest_refactoring": "Suggest refactoring improvements for a file.\n\nArgs:\n    file_path: Path to analyze\n    \nReturns:\n    List of refactoring suggestions",
      "analyze_patterns_deep": "Deep pattern analysis using AI to find non-obvious patterns.\n\nReturns:\n    Dictionary of discovered patterns and insights",
      "explain_concept": "Explain a concept using project context and AI understanding.\n\nArgs:\n    concept: Concept to explain\n    \nReturns:\n    AI-generated explanation",
      "_format_explanation": "Format explanation from search results.",
      "_generate_doc_template": "Generate basic documentation template.",
      "_format_concept_explanation": "Format concept explanation.",
      "_analyze_decisions": "Analyze decision patterns.",
      "_analyze_errors": "Analyze error patterns.",
      "_analyze_workflow": "Analyze workflow patterns.",
      "_extract_keywords": "Extract common keywords from texts.",
      "_count_error_types": "Count error types.",
      "generate_file_description": "Generate a 1-2 sentence description of what a file does.\n\nArgs:\n    file_path: Path to the file\n    content: File content (first 500 lines)\n    file_type: Either \"code\" or \"doc\"\n    \nReturns:\n    Concise description of file purpose",
      "generate_folder_description": "Generate a 1-2 sentence description of what a folder contains.\n\nArgs:\n    folder_path: Path to the folder\n    contents: List of dicts with 'name', 'type', and 'description' of items in folder\n    \nReturns:\n    Concise description of folder purpose",
      "generate_folder_descriptions_batch": "Generate descriptions for all files in a folder with a single Claude call.\n\nArgs:\n    folder_path: Path to the folder being processed\n    files: List of file info dicts with 'path', 'content', 'type' keys\n    \nReturns:\n    Dictionary mapping file paths to descriptions",
      "_fallback_to_individual": "Fallback to individual file processing.",
      "_create_batches": "Create batches of files for processing, respecting limits.\n\nArgs:\n    files: List of file info dicts\n    max_files: Maximum files per batch\n    max_chars: Maximum total characters per batch\n    \nReturns:\n    List of batches (each batch is a list of file info dicts)"
    },
    "comments": [],
    "lines_of_code": 726,
    "complexity_score": 0.0
  },
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/static/app.js": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/static/app.js",
    "language": "javascript",
    "last_modified": "2025-07-04T18:12:52.943213",
    "description": "javascript source file with 5 functions.",
    "classes": [],
    "functions": [
      "loadInitialState",
      "updateDiagram",
      "updateStateDisplay",
      "sendCommand",
      "addToHistory"
    ],
    "imports": [],
    "exports": [],
    "docstrings": {},
    "comments": [],
    "lines_of_code": 118,
    "complexity_score": 0.0
  },
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/static/context_manager.js": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/static/context_manager.js",
    "language": "javascript",
    "last_modified": "2025-07-04T20:56:05.388752",
    "description": "javascript source file with 30 functions.",
    "classes": [],
    "functions": [
      "initializeChart",
      "loadStats",
      "loadRecentContexts",
      "loadSuggestions",
      "loadPatterns",
      "logDecision",
      "logError",
      "queryContexts",
      "analyzeDoc",
      "learnPatterns",
      "refreshSuggestions",
      "formatTime",
      "formatContextData",
      "showStatus",
      "checkProjectStatus",
      "initializeProject",
      "findInformation",
      "checkAndLoadVisualization",
      "loadKnowledgeGraph",
      "renderGraph",
      "dragstarted",
      "dragged",
      "dragended",
      "highlightConnections",
      "resetHighlight",
      "showNodeInfo",
      "toggleNodeType",
      "updateVisibility",
      "resetZoom",
      "switchVisualization"
    ],
    "imports": [],
    "exports": [],
    "docstrings": {},
    "comments": [],
    "lines_of_code": 822,
    "complexity_score": 0.0
  },
  "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/static/context_visualizations.js": {
    "path": "/mnt/c/Users/jmontp/Documents/workspace/agent-workflow/static/context_visualizations.js",
    "language": "javascript",
    "last_modified": "2025-07-04T20:55:49.805508",
    "description": "javascript source file with 0 functions.",
    "classes": [
      "DirectoryTreeView",
      "ProjectTreemap"
    ],
    "functions": [],
    "imports": [],
    "exports": [],
    "docstrings": {},
    "comments": [],
    "lines_of_code": 285,
    "complexity_score": 0.0
  }
}