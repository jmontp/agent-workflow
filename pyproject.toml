[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-workflow"
version = "1.0.0"
description = "AI Agent TDD-Scrum Orchestration Framework"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Agent-Workflow Contributors", email = "contact@agent-workflow.dev"}
]
keywords = ["ai", "agents", "tdd", "scrum", "orchestration", "workflow", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Version Control",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = [
    "discord.py>=2.3.0,<3.0.0",
    "PyGithub>=1.59.0,<2.0.0",
    "PyYAML>=6.0,<7.0",
    "cryptography>=41.0.0,<42.0.0",
    "click>=8.1.0,<9.0.0",
    "rich>=13.0.0,<14.0.0",
    "tabulate>=0.9.0,<1.0.0",
    "python-dotenv>=1.0.0,<2.0.0",
    "aiofiles>=23.0.0,<24.0.0",
    "aiohttp>=3.8.0,<4.0.0",
    "requests>=2.31.0,<3.0.0",
    "websockets>=11.0.0,<12.0.0",
    "watchdog>=3.0.0,<4.0.0",
    "psutil>=5.9.0,<6.0.0",
    "python-dateutil>=2.8.0,<3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.11.0,<4.0.0",
    "pytest-xdist>=3.3.0,<4.0.0",
    "pytest-timeout>=2.1.0,<3.0.0",
    "black>=23.0.0,<24.0.0",
    "flake8>=6.0.0,<7.0.0",
    "mypy>=1.5.0,<2.0.0",
    "pre-commit>=3.4.0,<4.0.0",
]
docs = [
    "mkdocs>=1.5.0,<2.0.0",
    "mkdocs-material>=9.4.0,<10.0.0",
    "mkdocs-mermaid2-plugin>=1.1.0,<2.0.0",
]
web = [
    "Flask>=2.3.0,<3.0.0",
    "Flask-SocketIO>=5.3.0,<6.0.0",
]
ai = [
    "anthropic>=0.7.0,<1.0.0",
    "openai>=1.0.0,<2.0.0",
]

[project.urls]
Homepage = "https://github.com/agent-workflow/agent-workflow"
Documentation = "https://agent-workflow.readthedocs.io"
Repository = "https://github.com/agent-workflow/agent-workflow"
"Bug Reports" = "https://github.com/agent-workflow/agent-workflow/issues"
Changelog = "https://github.com/agent-workflow/agent-workflow/blob/main/CHANGELOG.md"

[project.scripts]
agent-orch = "agent_workflow.cli.main:main"
aw = "agent_workflow.cli.main:main"

[project.entry-points."agent_workflow.commands"]
init = "agent_workflow.cli.init:init_command"
"register-project" = "agent_workflow.cli.project:register_command"
projects = "agent_workflow.cli.project:projects_command"
"setup-discord" = "agent_workflow.cli.setup:setup_discord_command"
"setup-api" = "agent_workflow.cli.setup:setup_api_command"
configure = "agent_workflow.cli.setup:configure_command"
start = "agent_workflow.cli.orchestrator:start_command"
stop = "agent_workflow.cli.orchestrator:stop_command"
status = "agent_workflow.cli.orchestrator:status_command"
version = "agent_workflow.cli.info:version_command"
health = "agent_workflow.cli.info:health_command"
migrate = "agent_workflow.cli.migrate:migrate_command"

[tool.setuptools.packages.find]
where = ["."]
include = ["agent_workflow*"]

[tool.setuptools.package-data]
agent_workflow = [
    "templates/*.yaml",
    "templates/*.yml",
    "templates/*.json",
    "config/*.yaml",
    "config/*.yml",
    "static/*",
    "static/**/*",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[[tool.mypy.overrides]]
module = [
    "discord.*",
    "github.*",
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.coverage.run]
source = ["agent_workflow"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]