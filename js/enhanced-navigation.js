/**
 * Enhanced Navigation System
 * Breadcrumbs, quick access toolbar, and mobile navigation improvements
 */

(function() {
    'use strict';
    
    // Configuration
    const NAV_CONFIG = {
        breadcrumbSeparator: '/',
        quickActions: [
            { name: 'Search', icon: '🔍', shortcut: 'Cmd+K', action: () => window.UniversalSearch?.open() },
            { name: 'Home', icon: '🏠', url: '/' },
            { name: 'Quick Start', icon: '⚡', url: '/getting-started/quick-start/' },
            { name: 'Commands', icon: '📋', url: '/user-guide/hitl-commands/' },
            { name: 'GitHub', icon: '💻', url: 'https://github.com/jmontp/agent-workflow', external: true }
        ],
        sectionIcons: {
            'getting-started': '⚡',
            'user-guide': '📊', 
            'concepts': '🎯',
            'architecture': '🔥',
            'advanced': '⚡',
            'development': '📊',
            'deployment': '🔥'
        }
    };
    
    let mobileNavOpen = false;
    let currentPath = window.location.pathname;
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }
    
    function init() {
        enhanceMainNavigation();\n        createBreadcrumbNavigation();\n        createQuickAccessToolbar();\n        enhanceMobileNavigation();\n        setupNavigationEventListeners();\n        updateActiveNavigation();\n    }\n    \n    function enhanceMainNavigation() {\n        const navItems = document.querySelectorAll('.md-nav__item > .md-nav__link');\n        \n        navItems.forEach(link => {\n            const text = link.textContent.trim();\n            const href = link.getAttribute('href') || '';\n            const section = extractSectionFromUrl(href);\n            const icon = NAV_CONFIG.sectionIcons[section];\n            \n            // Add icons to main navigation items\n            if (icon && !link.querySelector('.nav-icon')) {\n                const iconSpan = document.createElement('span');\n                iconSpan.className = 'nav-icon';\n                iconSpan.textContent = icon;\n                link.insertBefore(iconSpan, link.firstChild);\n            }\n            \n            // Add tooltips for better UX\n            if (!link.title) {\n                link.title = `Navigate to ${text}`;\n            }\n        });\n        \n        // Enhance submenu indicators\n        const expandableItems = document.querySelectorAll('.md-nav__item--nested');\n        expandableItems.forEach(item => {\n            const link = item.querySelector('.md-nav__link');\n            if (link && !link.querySelector('.expand-indicator')) {\n                const indicator = document.createElement('span');\n                indicator.className = 'expand-indicator';\n                indicator.innerHTML = `\n                    <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                        <polyline points=\"6,9 12,15 18,9\"></polyline>\n                    </svg>\n                `;\n                link.appendChild(indicator);\n            }\n        });\n    }\n    \n    function createBreadcrumbNavigation() {\n        const breadcrumbContainer = document.createElement('nav');\n        breadcrumbContainer.className = 'breadcrumb-navigation';\n        breadcrumbContainer.setAttribute('aria-label', 'Breadcrumb');\n        \n        const breadcrumbs = generateBreadcrumbs();\n        \n        if (breadcrumbs.length > 1) {\n            const breadcrumbList = document.createElement('ol');\n            breadcrumbList.className = 'breadcrumb-list';\n            \n            breadcrumbs.forEach((crumb, index) => {\n                const listItem = document.createElement('li');\n                listItem.className = 'breadcrumb-item';\n                \n                if (index === breadcrumbs.length - 1) {\n                    // Current page (not a link)\n                    listItem.classList.add('current');\n                    listItem.innerHTML = `\n                        <span class=\"breadcrumb-current\">\n                            ${crumb.icon ? `<span class=\"breadcrumb-icon\">${crumb.icon}</span>` : ''}\n                            ${crumb.title}\n                        </span>\n                    `;\n                } else {\n                    // Clickable breadcrumb\n                    listItem.innerHTML = `\n                        <a href=\"${crumb.url}\" class=\"breadcrumb-link\">\n                            ${crumb.icon ? `<span class=\"breadcrumb-icon\">${crumb.icon}</span>` : ''}\n                            ${crumb.title}\n                        </a>\n                        <span class=\"breadcrumb-separator\">${NAV_CONFIG.breadcrumbSeparator}</span>\n                    `;\n                }\n                \n                breadcrumbList.appendChild(listItem);\n            });\n            \n            breadcrumbContainer.appendChild(breadcrumbList);\n            \n            // Insert breadcrumbs into the page\n            const contentContainer = document.querySelector('.md-content__inner');\n            if (contentContainer) {\n                contentContainer.insertBefore(breadcrumbContainer, contentContainer.firstChild);\n            }\n        }\n    }\n    \n    function generateBreadcrumbs() {\n        const pathSegments = currentPath.split('/').filter(segment => segment);\n        const breadcrumbs = [];\n        \n        // Always start with Home\n        breadcrumbs.push({\n            title: 'Home',\n            url: '/',\n            icon: '🏠'\n        });\n        \n        // Build breadcrumbs from path segments\n        let currentUrl = '';\n        pathSegments.forEach((segment, index) => {\n            currentUrl += '/' + segment;\n            \n            // Skip file extensions and index files\n            if (segment.endsWith('.html') || segment === 'index') {\n                return;\n            }\n            \n            const title = formatBreadcrumbTitle(segment);\n            const icon = NAV_CONFIG.sectionIcons[segment];\n            \n            breadcrumbs.push({\n                title: title,\n                url: currentUrl + '/',\n                icon: icon\n            });\n        });\n        \n        return breadcrumbs;\n    }\n    \n    function formatBreadcrumbTitle(segment) {\n        // Convert URL segment to readable title\n        return segment\n            .split('-')\n            .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n            .join(' ');\n    }\n    \n    function createQuickAccessToolbar() {\n        const toolbar = document.createElement('div');\n        toolbar.className = 'quick-access-toolbar';\n        toolbar.innerHTML = `\n            <div class=\"toolbar-container\">\n                <div class=\"toolbar-section toolbar-brand\">\n                    <span class=\"brand-icon\">🤖</span>\n                    <span class=\"brand-text\">AI Agent TDD</span>\n                </div>\n                <div class=\"toolbar-section toolbar-actions\">\n                    ${NAV_CONFIG.quickActions.map(action => `\n                        <button class=\"toolbar-action\" data-action=\"${action.name}\" \n                                ${action.url ? `data-url=\"${action.url}\"` : ''}\n                                ${action.external ? 'data-external=\"true\"' : ''}\n                                title=\"${action.name}${action.shortcut ? ` (${action.shortcut})` : ''}\">\n                            <span class=\"action-icon\">${action.icon}</span>\n                            <span class=\"action-label\">${action.name}</span>\n                            ${action.shortcut ? `<span class=\"action-shortcut\">${action.shortcut}</span>` : ''}\n                        </button>\n                    `).join('')}\n                </div>\n                <div class=\"toolbar-section toolbar-controls\">\n                    <button class=\"toolbar-control mobile-nav-toggle\" aria-label=\"Toggle mobile navigation\">\n                        <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <line x1=\"3\" y1=\"6\" x2=\"21\" y2=\"6\"></line>\n                            <line x1=\"3\" y1=\"12\" x2=\"21\" y2=\"12\"></line>\n                            <line x1=\"3\" y1=\"18\" x2=\"21\" y2=\"18\"></line>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        // Insert at the top of the page\n        document.body.insertBefore(toolbar, document.body.firstChild);\n        \n        // Add event listeners for toolbar actions\n        toolbar.querySelectorAll('.toolbar-action').forEach(button => {\n            button.addEventListener('click', function() {\n                const action = this.dataset.action;\n                const url = this.dataset.url;\n                const external = this.dataset.external === 'true';\n                \n                if (action === 'Search') {\n                    window.UniversalSearch?.open();\n                } else if (url) {\n                    if (external) {\n                        window.open(url, '_blank', 'noopener,noreferrer');\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                \n                // Track analytics\n                if (typeof gtag !== 'undefined') {\n                    gtag('event', 'toolbar_action', {\n                        event_category: 'navigation',\n                        event_label: action\n                    });\n                }\n            });\n        });\n    }\n    \n    function enhanceMobileNavigation() {\n        // Create mobile navigation overlay\n        const mobileNav = document.createElement('div');\n        mobileNav.className = 'mobile-navigation-overlay';\n        mobileNav.innerHTML = `\n            <div class=\"mobile-nav-container\">\n                <div class=\"mobile-nav-header\">\n                    <div class=\"mobile-nav-brand\">\n                        <span class=\"brand-icon\">🤖</span>\n                        <span class=\"brand-text\">AI Agent TDD</span>\n                    </div>\n                    <button class=\"mobile-nav-close\" aria-label=\"Close navigation\">\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                            <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                            <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                        </svg>\n                    </button>\n                </div>\n                <div class=\"mobile-nav-content\">\n                    <div class=\"mobile-nav-search\">\n                        <button class=\"mobile-search-button\" onclick=\"window.UniversalSearch?.open()\">\n                            <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                                <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\n                                <path d=\"M21 21l-4.35-4.35\"></path>\n                            </svg>\n                            <span>Search documentation</span>\n                        </button>\n                    </div>\n                    <div id=\"mobile-nav-menu\" class=\"mobile-nav-menu\">\n                        <!-- Navigation items will be populated here -->\n                    </div>\n                </div>\n            </div>\n        `;\n        \n        document.body.appendChild(mobileNav);\n        \n        // Populate mobile navigation menu\n        populateMobileNavMenu();\n        \n        // Setup mobile navigation event listeners\n        const toggleBtn = document.querySelector('.mobile-nav-toggle');\n        const closeBtn = mobileNav.querySelector('.mobile-nav-close');\n        \n        if (toggleBtn) {\n            toggleBtn.addEventListener('click', toggleMobileNav);\n        }\n        \n        if (closeBtn) {\n            closeBtn.addEventListener('click', closeMobileNav);\n        }\n        \n        // Close mobile nav when clicking overlay\n        mobileNav.addEventListener('click', function(e) {\n            if (e.target === mobileNav) {\n                closeMobileNav();\n            }\n        });\n    }\n    \n    function populateMobileNavMenu() {\n        const mobileMenu = document.getElementById('mobile-nav-menu');\n        const mainNav = document.querySelector('.md-nav--primary');\n        \n        if (!mobileMenu || !mainNav) return;\n        \n        const navItems = mainNav.querySelectorAll('.md-nav__item');\n        const mobileNavHTML = [];\n        \n        navItems.forEach(item => {\n            const link = item.querySelector('.md-nav__link');\n            if (!link) return;\n            \n            const href = link.getAttribute('href') || '#';\n            const title = link.textContent.trim();\n            const section = extractSectionFromUrl(href);\n            const icon = NAV_CONFIG.sectionIcons[section] || '📄';\n            const isActive = window.location.pathname.includes(href.replace('.html', ''));\n            \n            // Check for subitems\n            const subNav = item.querySelector('.md-nav');\n            const hasSubitems = subNav && subNav.querySelectorAll('.md-nav__item').length > 0;\n            \n            mobileNavHTML.push(`\n                <div class=\"mobile-nav-item ${isActive ? 'active' : ''}\">\n                    <a href=\"${href}\" class=\"mobile-nav-link\">\n                        <span class=\"nav-icon\">${icon}</span>\n                        <span class=\"nav-title\">${title}</span>\n                        ${hasSubitems ? '<span class=\"nav-expand\">›</span>' : ''}\n                    </a>\n                    ${hasSubitems ? generateMobileSubNav(subNav) : ''}\n                </div>\n            `);\n        });\n        \n        mobileMenu.innerHTML = mobileNavHTML.join('');\n    }\n    \n    function generateMobileSubNav(subNav) {\n        const subItems = subNav.querySelectorAll('.md-nav__item');\n        const subHTML = [];\n        \n        subItems.forEach(item => {\n            const link = item.querySelector('.md-nav__link');\n            if (!link) return;\n            \n            const href = link.getAttribute('href') || '#';\n            const title = link.textContent.trim();\n            const isActive = window.location.pathname.includes(href.replace('.html', ''));\n            \n            subHTML.push(`\n                <a href=\"${href}\" class=\"mobile-nav-sublink ${isActive ? 'active' : ''}\">\n                    <span class=\"nav-title\">${title}</span>\n                </a>\n            `);\n        });\n        \n        return `<div class=\"mobile-nav-subitems\">${subHTML.join('')}</div>`;\n    }\n    \n    function setupNavigationEventListeners() {\n        // Handle navigation link clicks for analytics\n        document.addEventListener('click', function(e) {\n            const link = e.target.closest('a');\n            if (link && link.classList.contains('md-nav__link')) {\n                const href = link.getAttribute('href');\n                const text = link.textContent.trim();\n                \n                if (typeof gtag !== 'undefined') {\n                    gtag('event', 'navigation_click', {\n                        event_category: 'navigation',\n                        event_label: href,\n                        event_value: text\n                    });\n                }\n            }\n        });\n        \n        // Handle breadcrumb clicks\n        document.addEventListener('click', function(e) {\n            const breadcrumbLink = e.target.closest('.breadcrumb-link');\n            if (breadcrumbLink) {\n                const href = breadcrumbLink.getAttribute('href');\n                \n                if (typeof gtag !== 'undefined') {\n                    gtag('event', 'breadcrumb_click', {\n                        event_category: 'navigation',\n                        event_label: href\n                    });\n                }\n            }\n        });\n        \n        // Handle window resize for mobile navigation\n        window.addEventListener('resize', function() {\n            if (window.innerWidth > 1024 && mobileNavOpen) {\n                closeMobileNav();\n            }\n        });\n    }\n    \n    function toggleMobileNav() {\n        if (mobileNavOpen) {\n            closeMobileNav();\n        } else {\n            openMobileNav();\n        }\n    }\n    \n    function openMobileNav() {\n        const overlay = document.querySelector('.mobile-navigation-overlay');\n        if (overlay) {\n            overlay.classList.add('visible');\n            document.body.style.overflow = 'hidden';\n            mobileNavOpen = true;\n        }\n    }\n    \n    function closeMobileNav() {\n        const overlay = document.querySelector('.mobile-navigation-overlay');\n        if (overlay) {\n            overlay.classList.remove('visible');\n            document.body.style.overflow = '';\n            mobileNavOpen = false;\n        }\n    }\n    \n    function updateActiveNavigation() {\n        // Update active states based on current path\n        const navLinks = document.querySelectorAll('.md-nav__link');\n        \n        navLinks.forEach(link => {\n            const href = link.getAttribute('href') || '';\n            const isActive = currentPath.includes(href.replace('.html', ''));\n            \n            if (isActive) {\n                link.classList.add('md-nav__link--active');\n                // Also mark parent items as active\n                let parent = link.closest('.md-nav__item');\n                while (parent) {\n                    parent.classList.add('md-nav__item--active');\n                    parent = parent.parentElement?.closest('.md-nav__item');\n                }\n            }\n        });\n    }\n    \n    function extractSectionFromUrl(url) {\n        const parts = url.split('/');\n        return parts[1] || parts[0] || '';\n    }\n    \n    // Export public API\n    window.EnhancedNavigation = {\n        openMobileNav,\n        closeMobileNav,\n        toggleMobileNav\n    };\n    \n})();"