#!/usr/bin/env python3
"""
Consolidate Context Manager documentation and remove redundancy.

This script:
1. Archives redundant documentation files
2. Updates the Context Manager with information ownership mappings
3. Creates a summary of the consolidation
"""

import os
import shutil
from pathlib import Path
from datetime import datetime
import json

# Files to archive (redundant with consolidated design)
REDUNDANT_FILES = [
    "CONTEXT_COLLECTION_IMPROVEMENT_PLAN.md",
    "CONTEXT_MANAGER_CLEANUP_PLAN.md",
    "CONTEXT_MANAGER_CLEANUP_DETAILS.md",
    "CONTEXT_COLLECTION_ROADMAP.md",
    "CONTEXT_MANAGER_V1.1_PLAN.md"
]

# Information ownership mappings
INFORMATION_OWNERSHIP = {
    # Context Manager documentation
    "context_manager_design": "docs/agents/context-manager/TECHNICAL_DESIGN.md",
    "context_manager_implementation": "docs/agents/context-manager/IMPLEMENTATION_PLAN.md",
    "context_manager_api": "docs/agents/context-manager/AGENT_SPECIFICATION.md",
    "context_manager_improvements": "docs/agents/context-manager/TECHNICAL_DESIGN.md",
    "context_manager_cleanup": "docs/agents/context-manager/IMPLEMENTATION_NOTES.md",
    "context_collection_enhancements": "docs/agents/context-manager/TECHNICAL_DESIGN.md",
    
    # Project-level documentation
    "project_overview": "README.md",
    "project_vision": "docs/project-evolution-guide/01_AUTONOMOUS_SOFTWARE_COMPANY_VISION.md",
    "project_status": "CLAUDE.md",
    "project_milestones": "CLAUDE.md",
    
    # Agent documentation
    "agent_specifications": "docs/agents/",
    "agent_communication": "docs/agents/README.md",
    
    # Implementation details
    "code_cleanup_plans": "docs/agents/context-manager/IMPLEMENTATION_NOTES.md",
    "performance_improvements": "docs/agents/context-manager/IMPLEMENTATION_NOTES.md",
    "bootstrap_process": "docs/agents/context-manager/BOOTSTRAP_GUIDE.md",
}

def archive_redundant_files():
    """Archive redundant documentation files."""
    archive_dir = Path("archived/context_plans")
    archive_dir.mkdir(parents=True, exist_ok=True)
    
    archived = []
    for filename in REDUNDANT_FILES:
        if os.path.exists(filename):
            dest = archive_dir / filename
            shutil.move(filename, dest)
            archived.append(filename)
            print(f"✓ Archived {filename}")
        else:
            print(f"- {filename} not found (may already be archived)")
    
    return archived

def create_ownership_mapping():
    """Create the information ownership mapping file."""
    ownership_file = Path("aw_context/project_index/ownership.json")
    ownership_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(ownership_file, 'w') as f:
        json.dump(INFORMATION_OWNERSHIP, f, indent=2)
    
    print(f"\n✓ Created information ownership mapping at {ownership_file}")

def create_consolidation_summary(archived_files):
    """Create a summary of the consolidation."""
    summary = f"""# Context Manager Documentation Consolidation Summary

**Date**: {datetime.now().strftime('%Y-%m-%d %H:%M')}

## Unified Design Location

All Context Manager design and implementation details have been consolidated into:
- **Technical Design**: `docs/agents/context-manager/TECHNICAL_DESIGN.md` (v2.0)
- **Implementation Plan**: `docs/agents/context-manager/IMPLEMENTATION_PLAN.md` (v2.0)

## Key Changes

1. **Introduced Project Consciousness Model**: Context Manager now actively prevents redundancy
2. **Added Semantic Understanding**: Beyond keyword matching to concept relationships
3. **Implemented Documentation Gateway**: All docs operations go through Context Manager
4. **Created Information Ownership**: Clear mappings of where information belongs

## Archived Files

The following redundant files were archived to `archived/context_plans/`:
{chr(10).join(f"- {f}" for f in archived_files)}

## Information Ownership Mappings

The following mappings help prevent future redundancy:
```json
{json.dumps(INFORMATION_OWNERSHIP, indent=2)}
```

## Next Steps

1. Implement the v2 features described in TECHNICAL_DESIGN.md
2. Follow the implementation plan in IMPLEMENTATION_PLAN.md
3. Use Context Manager to prevent future documentation sprawl

---
Generated by consolidate_context_docs.py
"""
    
    with open("archived/CONSOLIDATION_SUMMARY.md", 'w') as f:
        f.write(summary)
    
    print(f"\n✓ Created consolidation summary")

def main():
    """Run the consolidation process."""
    print("Starting Context Manager documentation consolidation...\n")
    
    # 1. Archive redundant files
    archived = archive_redundant_files()
    
    # 2. Create ownership mappings
    create_ownership_mapping()
    
    # 3. Create summary
    create_consolidation_summary(archived)
    
    print("\n✅ Consolidation complete!")
    print("\nNext steps:")
    print("1. Review the changes")
    print("2. Run: git add -A")
    print("3. Run: git commit -m 'refactor: Consolidate Context Manager v2 design and remove redundancy'")
    print("4. Begin implementing v2 features from TECHNICAL_DESIGN.md")

if __name__ == "__main__":
    main()