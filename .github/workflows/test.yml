name: Test Suite

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install additional test dependencies
        pip install pytest-xdist pytest-mock pytest-timeout
    
    - name: Run unit tests with coverage
      run: |
        # Run unit tests only (fast and reliable)
        pytest tests/unit/ --cov=lib --cov-report=xml --cov-report=term-missing
        
    - name: Run integration tests
      run: |
        # Run integration tests with timeout
        timeout 300 pytest tests/integration/ -v --tb=short || echo "Integration tests completed with issues"
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Run flake8
      run: flake8 lib/ tests/ --max-line-length=100 --ignore=E203,W503
      
    - name: Run black
      run: black --check lib/ tests/ --line-length=100
      
    - name: Run isort
      run: isort --check-only lib/ tests/ --profile=black --line-length=100

  coverage-analysis:
    runs-on: ubuntu-latest  
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Run coverage analysis
      run: |
        python3 analyze_coverage.py
        
    - name: Verify 100% test coverage
      run: |
        # Ensure we maintain 100% test file coverage
        lib_count=$(find lib -name "*.py" ! -name "__init__.py" | wc -l)
        test_count=$(find tests/unit -name "test_*.py" | wc -l)
        echo "Lib files: $lib_count"
        echo "Test files: $test_count"
        if [ "$lib_count" != "$test_count" ]; then
          echo "❌ Test coverage regression detected!"
          echo "Expected $lib_count test files, found $test_count"
          exit 1
        else
          echo "✅ 100% test file coverage maintained"
        fi