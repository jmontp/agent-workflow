# Discord Bot Configuration Template
# This file contains Discord-specific settings for the AI Agent Workflow bot
# Copy this file to discord-bot.config and customize as needed

# ====================================================================
# BOT IDENTITY AND BRANDING
# ====================================================================
bot:
  # Bot display name (will appear in Discord)
  name: "AI Workflow Bot"
  
  # Bot description for Discord application
  description: "AI Agent TDD-Scrum workflow orchestrator with Human-In-The-Loop controls"
  
  # Bot status message
  status_message: "Managing AI workflows"
  
  # Activity type: playing, streaming, listening, watching, competing
  activity_type: "watching"
  activity_name: "your code quality improve"

# ====================================================================
# SERVER AND CHANNEL CONFIGURATION
# ====================================================================
server:
  # Auto-create project channels
  auto_create_channels: true
  
  # Channel naming convention
  # Variables: {hostname}, {project_name}, {environment}
  channel_name_template: "{hostname}-{project_name}"
  
  # Channel categories
  create_categories: true
  category_names:
    projects: "üöÄ Projects"
    monitoring: "üìä Monitoring" 
    general: "üí¨ General"
  
  # Default channel permissions
  default_permissions:
    send_messages: true
    embed_links: true
    read_message_history: true
    use_slash_commands: true
    create_public_threads: true
    manage_threads: false

# ====================================================================
# COMMAND CONFIGURATION
# ====================================================================
commands:
  # Command prefix for text commands (in addition to slash commands)
  prefix: "!"
  
  # Enable/disable command categories
  enabled_categories:
    - project_management  # /project, /epic commands
    - workflow_control    # /sprint, /approve commands
    - tdd_workflow       # /tdd commands
    - state_management   # /state commands
    - administration     # Admin-only commands
  
  # Command cooldowns (seconds)
  cooldowns:
    default: 5
    epic: 30          # Prevent epic spam
    project: 60       # Project operations
    approve: 10       # Approval commands
  
  # Auto-complete suggestions
  enable_autocomplete: true
  
  # Command help system
  show_help_embeds: true
  include_examples: true

# ====================================================================
# PERMISSIONS AND ROLES
# ====================================================================
permissions:
  # Role-based command access
  role_mappings:
    workflow_admin:
      - project_register
      - project_configure
      - system_status
      - all_commands
    
    project_manager:
      - epic
      - sprint
      - approve
      - backlog
      - state
    
    developer:
      - tdd
      - backlog
      - state
      - feedback
    
    observer:
      - state
      - status
  
  # User-specific permissions (Discord User IDs)
  user_overrides:
    # "123456789012345678": ["all_commands"]  # Bot owner
  
  # Channel-specific restrictions
  restrict_to_project_channels: true
  allow_dm_commands: false

# ====================================================================
# NOTIFICATION SETTINGS
# ====================================================================
notifications:
  # Notification preferences
  default_settings:
    sprint_start: true
    task_complete: true
    approval_needed: true
    error_alerts: true
    agent_status: false
    performance_metrics: false
  
  # Mention settings
  mentions:
    # Role mentions for different events
    approval_needed: ["@project-manager", "@workflow-admin"]
    error_alerts: ["@workflow-admin"]
    sprint_complete: ["@team"]
  
  # Quiet hours (disable non-critical notifications)
  quiet_hours:
    enabled: false
    start_time: "22:00"  # 10 PM
    end_time: "08:00"    # 8 AM
    timezone: "UTC"
  
  # Emergency notification overrides
  emergency_always_notify: true
  emergency_keywords: ["error", "failure", "critical", "blocked"]

# ====================================================================
# APPEARANCE AND FORMATTING
# ====================================================================
appearance:
  # Embed colors (hex codes)
  colors:
    success: "#28a745"    # Green
    warning: "#ffc107"    # Yellow
    error: "#dc3545"      # Red
    info: "#007bff"       # Blue
    primary: "#6f42c1"    # Purple
  
  # Emoji usage
  use_emojis: true
  custom_emojis:
    success: "‚úÖ"
    warning: "‚ö†Ô∏è"
    error: "‚ùå"
    info: "‚ÑπÔ∏è"
    loading: "üîÑ"
    approval: "üëç"
  
  # Embed styling
  embeds:
    include_thumbnails: true
    include_footers: true
    footer_text: "AI Agent Workflow System"
    timestamp_format: "relative"  # relative, absolute, none
  
  # Message formatting
  code_highlighting: true
  use_rich_formatting: true

# ====================================================================
# INTEGRATION SETTINGS
# ====================================================================
integrations:
  # Webhook notifications
  webhooks:
    # External webhook URLs for different events
    # sprint_complete: "https://hooks.slack.com/services/YOUR/WEBHOOK"
    # error_alerts: "https://hooks.slack.com/services/YOUR/ERROR/WEBHOOK"
  
  # GitHub integration
  github:
    enable_pr_notifications: true
    enable_commit_notifications: false
    enable_issue_notifications: true
  
  # External APIs
  external_apis:
    # Custom API endpoints for notifications
    # status_endpoint: "https://api.yourdomain.com/status"

# ====================================================================
# PERFORMANCE AND LIMITS
# ====================================================================
performance:
  # Rate limiting
  rate_limits:
    commands_per_minute: 20
    messages_per_minute: 10
    embeds_per_minute: 5
  
  # Response timeouts
  timeouts:
    command_response: 30      # seconds
    long_operation: 300       # 5 minutes
    file_upload: 60          # 1 minute
  
  # Message limits
  limits:
    max_embed_fields: 25
    max_message_length: 2000
    max_embed_description: 4096
  
  # Caching
  cache:
    enabled: true
    ttl_seconds: 300         # 5 minutes
    max_cache_size: 100      # Number of cached items

# ====================================================================
# DEVELOPMENT AND DEBUGGING
# ====================================================================
debug:
  # Debug mode settings
  enable_debug_commands: false
  log_all_interactions: false
  verbose_error_messages: false
  
  # Test mode
  test_mode: false
  mock_responses: false
  
  # Development overrides
  dev_overrides:
    ignore_cooldowns: false
    bypass_permissions: false
    enable_experimental: false

# ====================================================================
# SECURITY SETTINGS
# ====================================================================
security:
  # Command validation
  validate_inputs: true
  sanitize_messages: true
  
  # Anti-spam protection
  spam_protection:
    enabled: true
    max_identical_messages: 3
    time_window_seconds: 60
    punishment: "timeout"     # timeout, kick, ban
  
  # Content filtering
  content_filter:
    enabled: false
    blocked_words: []
    blocked_patterns: []
  
  # Audit logging
  audit_log:
    enabled: true
    log_all_commands: true
    log_permission_checks: false
    retention_days: 30

# ====================================================================
# SETUP INSTRUCTIONS
# ====================================================================
# 1. Copy this file: cp discord-bot.config.example discord-bot.config
# 2. Configure your Discord bot token in .env file
# 3. Customize the settings above for your server
# 4. Test the configuration: agent-orch setup-discord --test-config
# 5. Start the bot: python lib/discord_bot.py
#
# Quick Setup Steps:
# 1. Create Discord application at https://discord.com/developers/applications
# 2. Create bot and copy token to .env file
# 3. Invite bot to your server with proper permissions
# 4. Configure channel names and permissions above
# 5. Test with /state command in Discord
#
# Permission Requirements:
# - Send Messages
# - Use Slash Commands  
# - Embed Links
# - Read Message History
# - Manage Channels (for auto-creation)
# - Create Public Threads
# - Manage Threads
# - Add Reactions
#
# For detailed setup guide: docs/deployment/discord-setup.md